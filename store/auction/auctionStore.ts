import { create } from 'zustand';
import { subscribeWithSelector } from 'zustand/middleware';

// Types for auction data
export interface Auction {
  id: string;
  title: string;
  description: string;
  starting_price: number;
  current_bid?: number;
  end_time: string;
  status: 'active' | 'completed' | 'cancelled';
  vehicle_type: string;
  route_from: string;
  route_to: string;
  estimated_distance: number;
  load_type: string;
  consigner_id: string;
  winning_bid_id?: string;
  created_at: string;
  updated_at: string;
}

export interface Bid {
  id: string;
  auction_id: string;
  driver_id: string;
  amount: number;
  status: 'active' | 'withdrawn' | 'accepted' | 'rejected';
  created_at: string;
  updated_at: string;
}

export interface AuctionFilters {
  vehicleType: string;
  priceRange: [number, number];
  status: 'all' | 'active' | 'completed';
  sortBy: 'end_time' | 'starting_price' | 'created_at';
  sortOrder: 'asc' | 'desc';
}

export interface CreateAuctionData {
  title: string;
  description: string;
  startingBid: number;
  reservePrice?: number;
  duration: number;
  category: string;
  location: string;
  condition: 'new' | 'like-new' | 'good' | 'fair' | 'poor';
  images: string[];
}

export interface AuctionState {
  // Data
  auctions: Auction[];
  userBids: Bid[];
  selectedAuction: Auction | null;

  // UI State
  isLoading: boolean;
  isRefreshing: boolean;
  error: string | null;
  filters: AuctionFilters;

  // Actions
  setAuctions: (auctions: Auction[]) => void;
  addAuction: (auction: Auction) => void;
  createAuction: (data: CreateAuctionData) => Promise<void>;
  updateAuction: (id: string, updates: Partial<Auction>) => void;
  removeAuction: (id: string) => void;
  setSelectedAuction: (auction: Auction | null) => void;

  setUserBids: (bids: Bid[]) => void;
  addBid: (bid: Bid) => void;
  updateBid: (id: string, updates: Partial<Bid>) => void;

  setLoading: (loading: boolean) => void;
  setRefreshing: (refreshing: boolean) => void;
  setError: (error: string | null) => void;
  setFilters: (filters: Partial<AuctionFilters>) => void;
  resetFilters: () => void;

  clearAll: () => void;
}

const defaultFilters: AuctionFilters = {
  vehicleType: 'all',
  priceRange: [0, 100000],
  status: 'active',
  sortBy: 'end_time',
  sortOrder: 'asc',
};

export const useAuctionStore = create<AuctionState>()(
  subscribeWithSelector((set, get) => ({
    // Initial state
    auctions: [],
    userBids: [],
    selectedAuction: null,
    isLoading: false,
    isRefreshing: false,
    error: null,
    filters: defaultFilters,

    // Auction actions
    setAuctions: (auctions) => set({ auctions, error: null }),

    addAuction: (auction) => set((state) => ({
      auctions: [auction, ...state.auctions]
    })),

    createAuction: async (data) => {
      set({ isLoading: true, error: null });
      try {
        // Create auction with proper format
        const auction: Auction = {
          id: Date.now().toString(), // Temporary ID - should be generated by backend
          title: data.title,
          description: data.description,
          starting_price: data.startingBid,
          current_bid: undefined,
          end_time: new Date(Date.now() + data.duration * 24 * 60 * 60 * 1000).toISOString(),
          status: 'active',
          vehicle_type: data.category, // Using category as vehicle_type for now
          route_from: data.location,
          route_to: data.location,
          estimated_distance: 0,
          load_type: data.condition,
          consigner_id: 'current-user-id', // Should be actual user ID
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        };

        set((state) => ({
          auctions: [auction, ...state.auctions],
          isLoading: false
        }));
      } catch (error: any) {
        set({ error: error.message || 'Failed to create auction', isLoading: false });
        throw error;
      }
    },

    updateAuction: (id, updates) => set((state) => ({
      auctions: state.auctions.map(auction =>
        auction.id === id ? { ...auction, ...updates } : auction
      ),
      selectedAuction: state.selectedAuction?.id === id
        ? { ...state.selectedAuction, ...updates }
        : state.selectedAuction
    })),

    removeAuction: (id) => set((state) => ({
      auctions: state.auctions.filter(auction => auction.id !== id),
      selectedAuction: state.selectedAuction?.id === id ? null : state.selectedAuction
    })),

    setSelectedAuction: (auction) => set({ selectedAuction: auction }),

    // Bid actions
    setUserBids: (bids) => set({ userBids: bids }),

    addBid: (bid) => set((state) => ({
      userBids: [bid, ...state.userBids]
    })),

    updateBid: (id, updates) => set((state) => ({
      userBids: state.userBids.map(bid =>
        bid.id === id ? { ...bid, ...updates } : bid
      )
    })),

    // UI actions
    setLoading: (isLoading) => set({ isLoading }),
    setRefreshing: (isRefreshing) => set({ isRefreshing }),
    setError: (error) => set({ error }),

    setFilters: (newFilters) => set((state) => ({
      filters: { ...state.filters, ...newFilters }
    })),

    resetFilters: () => set({ filters: defaultFilters }),

    clearAll: () => set({
      auctions: [],
      userBids: [],
      selectedAuction: null,
      isLoading: false,
      isRefreshing: false,
      error: null,
      filters: defaultFilters,
    }),
  }))
);
