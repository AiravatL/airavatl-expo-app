Directory structure:
└── airavatl-airavatl-expo-app/
    ├── README.md
    ├── app.config.js
    ├── eas.json
    ├── eslint.config.js
    ├── jest.config.js
    ├── jest.setup.js
    ├── metro.config.js
    ├── package.json
    ├── tsconfig.json
    ├── .easignore
    ├── .prettierrc
    ├── __tests__/
    │   └── components/
    │       └── ui/
    │           └── Button.test.tsx
    ├── app/
    │   ├── +not-found.tsx
    │   ├── _layout.tsx
    │   ├── edit-auction.tsx
    │   ├── (auth)/
    │   │   ├── _layout.tsx
    │   │   ├── sign-in-improved.tsx
    │   │   ├── sign-in.tsx
    │   │   └── sign-up.tsx
    │   └── (tabs)/
    │       ├── _layout.tsx
    │       ├── create-auction.tsx
    │       ├── index.tsx
    │       ├── profile.tsx
    │       ├── auctions/
    │       │   ├── [id].tsx
    │       │   ├── _layout.tsx
    │       │   ├── create.tsx
    │       │   ├── index.tsx
    │       │   └── payment-info.tsx
    │       └── info/
    │           ├── _layout.tsx
    │           ├── about.tsx
    │           ├── contact.tsx
    │           ├── index.tsx
    │           └── privacy.tsx
    ├── components/
    │   ├── index.ts
    │   ├── auction/
    │   │   ├── AuctionsList.tsx
    │   │   └── index.ts
    │   ├── common/
    │   │   ├── DateTimePicker.tsx
    │   │   ├── ErrorBoundary.tsx
    │   │   ├── FixDriverVehicleTypes.tsx
    │   │   └── index.ts
    │   ├── forms/
    │   │   ├── AuctionFormShared.tsx
    │   │   ├── Form.tsx
    │   │   ├── index.ts
    │   │   └── ProfileForm.tsx
    │   ├── map/
    │   │   └── index.ts
    │   ├── navigation/
    │   │   └── index.ts
    │   └── ui/
    │       ├── Button.tsx
    │       ├── Card.tsx
    │       ├── Empty.tsx
    │       ├── EmptyState.tsx
    │       ├── index.ts
    │       ├── Input.tsx
    │       ├── Loading.tsx
    │       └── Modal.tsx
    ├── config/
    │   ├── env.ts
    │   └── index.ts
    ├── constants/
    │   ├── api.ts
    │   ├── colors.ts
    │   ├── dimensions.ts
    │   ├── fonts.ts
    │   ├── index.ts
    │   ├── routes.ts
    │   └── storage-keys.ts
    ├── hooks/
    │   ├── index.ts
    │   ├── useAppState.ts
    │   ├── useAuth.ts
    │   ├── useAuthEnhanced.ts
    │   ├── useAuthSimplified.ts
    │   ├── useFrameworkReady.ts
    │   ├── useKeyboard.ts
    │   ├── useNetwork.ts
    │   └── usePushNotifications.ts
    ├── lib/
    │   ├── supabase.ts
    │   ├── api/
    │   │   ├── auctions.ts
    │   │   ├── client.ts
    │   │   └── index.ts
    │   ├── notifications/
    │   │   ├── auctionNotifications.ts
    │   │   ├── notificationHelpers.ts
    │   │   └── pushNotifications.ts
    │   ├── services/
    │   │   ├── dataService.ts
    │   │   └── index.ts
    │   ├── storage/
    │   │   ├── index.ts
    │   │   └── storage.ts
    │   └── utils/
    │       ├── format.ts
    │       ├── index.ts
    │       └── validation.ts
    ├── store/
    │   ├── index.ts
    │   ├── auction/
    │   │   ├── auctionStore.ts
    │   │   └── index.ts
    │   ├── auth/
    │   │   ├── authStore.ts
    │   │   └── index.ts
    │   ├── notification/
    │   │   ├── index.ts
    │   │   └── notificationStore.ts
    │   └── user/
    │       ├── index.ts
    │       └── userStore.ts
    ├── supabase/
    │   ├── README.md
    │   ├── docs/
    │   │   ├── api-functions.md
    │   │   ├── schema-diagram.md
    │   │   └── security-recommendations.md
    │   └── migrations/
    │       ├── 00_init_database.sql
    │       ├── 01_core_functions.sql
    │       ├── 02_automation_and_notifications.sql
    │       ├── 04_complete_database_schema.sql
    │       ├── 05_database_functions.sql
    │       ├── 06_database_views.sql
    │       ├── 07_database_triggers.sql
    │       ├── 08_push_notifications.sql
    │       ├── 09_sample_data.sql
    │       ├── 10_current_database_complete_schema.sql
    │       └── 11_add_auction_updated_notification_type.sql
    ├── types/
    │   └── supabase.ts
    └── .github/
        ├── dependabot.yml
        ├── PULL_REQUEST_TEMPLATE.md
        ├── ISSUE_TEMPLATE/
        │   └── bug_report.md
        └── workflows/
            └── ci.yml

================================================
FILE: README.md
================================================
# Setup Guide

## Prerequisites

- Node.js 18+
- npm or yarn
- Expo CLI (`npm install -g @expo/cli`)
- Android Studio (for Android development)
- Xcode (for iOS development)

## Installation

1. Clone the repository:

   ```bash
   git clone <repository-url>
   cd airavatl-expo-app
   ```

2. Install dependencies:

   ```bash
   npm install
   ```

3. Configure your environment variables in `.env`:

   ```env
   EXPO_PUBLIC_SUPABASE_URL=your_supabase_url_here
   EXPO_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key_here
   EXPO_PUBLIC_API_URL=your_api_url_here
   ```

4. Start the development server:
   ```bash
   npm run dev
   ```

## Environment Variables

### Required

- `EXPO_PUBLIC_SUPABASE_URL`: Your Supabase project URL
- `EXPO_PUBLIC_SUPABASE_ANON_KEY`: Your Supabase anonymous key

### Optional

- `EXPO_PUBLIC_API_URL`: Your API base URL (defaults to production)
- `EXPO_PUBLIC_ENABLE_ANALYTICS`: Enable analytics (default: false)
- `EXPO_PUBLIC_ENABLE_CRASH_REPORTING`: Enable crash reporting (default: false)
- `EXPO_PUBLIC_ENABLE_PUSH_NOTIFICATIONS`: Enable push notifications (default: true)

## Development Commands

- `npm run start`: Start Expo development server
- `npm run dev`: Start with development configuration
- `npm run android`: Run on Android
- `npm run ios`: Run on iOS
- `npm run web`: Run on web
- `npm run lint`: Run ESLint
- `npm run tunnel`: Start with tunnel for external device testing

## Build Commands

- `npm run build:web`: Build for web
- `npm run build:android:preview`: Build Android preview
- `npm run build:android:production`: Build Android production
- `npm run build:ios:preview`: Build iOS preview
- `npm run build:ios:production`: Build iOS production

## Troubleshooting

### Common Issues

1. **Metro bundler cache issues**:

   ```bash
   npm run dev
   ```

2. **Module resolution issues**:

   ```bash
   npm install
   npx expo install --check
   ```

3. **iOS build issues**:
   ```bash
   cd ios && pod install && cd ..
   ```

### Getting Help

- Check the [Troubleshooting Guide](./TROUBLESHOOTING.md)
- Review the [API Documentation](./API.md)
- Contact the development team



================================================
FILE: app.config.js
================================================
// app.config.js
export default {
  expo: {
    name: 'AiravatL',
    slug: 'airavatl-efuh5yckuaxsfb5ueygzd',
    orientation: 'portrait',
    icon: './assets/images/icon.png',
    scheme: 'airavatl',
    userInterfaceStyle: 'automatic',
    splash: {
      image: './assets/images/icon.png',
      resizeMode: 'contain',
      backgroundColor: '#ffffff',
    },
    assetBundlePatterns: ['**/*'],
    ios: {
      supportsTablet: true,
      bundleIdentifier: 'com.airavatl.app',
    },
    android: {
      package: 'com.airavatl.app',
      // EAS injects the file-secret here; locally we fall back:
      googleServicesFile:
        process.env.GOOGLE_SERVICES_JSON
        ?? './google-services.json',
      adaptiveIcon: {
        foregroundImage: './assets/images/icon.png',
        backgroundColor: '#ffffff',
      },
      permissions: [
        'INTERNET',
        'CAMERA',
        'RECORD_AUDIO',
        'WRITE_EXTERNAL_STORAGE',
        'READ_EXTERNAL_STORAGE',
        'VIBRATE',
        'RECEIVE_BOOT_COMPLETED',
        'WAKE_LOCK',
      ],
    },
    web: {
      bundler: 'metro',
      favicon: './assets/images/favicon.png',
    },
    plugins: [
      'expo-router',
      [
        'expo-notifications',
        {
          icon: './assets/images/icon.png',
          color: '#ffffff',
          defaultChannel: 'default',
        },
      ],
    ],
    experiments: {
      typedRoutes: true,
      tsconfigPaths: true,
    },
    sdkVersion: '53.0.0',
    extra: {
      router: {},
      eas: {
        projectId: '34fdc681-b1ea-4ea4-afac-90495ca8e9e4',
      },
    },
    owner: 'vishalkalita',
  },
};



================================================
FILE: eas.json
================================================
{
  "cli": {
    "version": ">= 16.17.3",
    "appVersionSource": "remote"
  },
  "build": {
    "development": {
      "developmentClient": true,
      "distribution": "internal"
    },
    "preview": {
      "distribution": "internal"
    },
    "production": {
      "autoIncrement": true
    }
  },
  "submit": {
    "production": {}
  }
}



================================================
FILE: eslint.config.js
================================================
// https://docs.expo.dev/guides/using-eslint/
const { defineConfig } = require('eslint/config');
const expoConfig = require("eslint-config-expo/flat");

module.exports = defineConfig([
  expoConfig,
  {
    ignores: ["dist/*", ".expo/*", "node_modules/*"],
  },
  {
    files: ["jest.setup.js", "**/__tests__/**", "**/*.test.*", "**/*.spec.*"],
    languageOptions: {
      globals: {
        jest: "readonly",
        expect: "readonly",
        describe: "readonly",
        it: "readonly",
        beforeEach: "readonly",
        afterEach: "readonly",
        beforeAll: "readonly",
        afterAll: "readonly",
        global: "readonly",
      },
    },
  },
]);



================================================
FILE: jest.config.js
================================================
module.exports = {
  preset: 'jest-expo',
  setupFilesAfterEnv: [
    '<rootDir>/jest.setup.js'
  ],
  transformIgnorePatterns: [
    'node_modules/(?!((jest-)?react-native|@react-native(-community)?)|expo(nent)?|@expo(nent)?/.*|@expo-google-fonts/.*|react-navigation|@react-navigation/.*|@unimodules/.*|unimodules|sentry-expo|native-base|react-native-svg)'
  ],
  collectCoverageFrom: [
    'components/**/*.{js,jsx,ts,tsx}',
    'lib/**/*.{js,jsx,ts,tsx}',
    'store/**/*.{js,jsx,ts,tsx}',
    'hooks/**/*.{js,jsx,ts,tsx}',
    '!**/*.d.ts',
    '!**/node_modules/**',
    '!**/__tests__/**',
    '!**/coverage/**'
  ],
  coverageReporters: [
    'json',
    'lcov',
    'text',
    'html'
  ],
  testMatch: [
    '**/__tests__/**/*.(test|spec).(js|jsx|ts|tsx)',
    '**/*.(test|spec).(js|jsx|ts|tsx)'
  ],
  moduleFileExtensions: [
    'ts',
    'tsx',
    'js',
    'jsx',
    'json'
  ],
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/$1',
    '^@components/(.*)$': '<rootDir>/components/$1',
    '^@lib/(.*)$': '<rootDir>/lib/$1',
    '^@store/(.*)$': '<rootDir>/store/$1',
    '^@hooks/(.*)$': '<rootDir>/hooks/$1',
    '^@constants/(.*)$': '<rootDir>/constants/$1',
    '^@types/(.*)$': '<rootDir>/types/$1'
  }
};



================================================
FILE: jest.setup.js
================================================
/* eslint-env jest */
import 'react-native-gesture-handler/jestSetup';

// Mock AsyncStorage
jest.mock('@react-native-async-storage/async-storage', () =>
  require('@react-native-async-storage/async-storage/jest/async-storage-mock')
);

// Mock Expo modules
jest.mock('expo-constants', () => ({
  default: {
    appOwnership: 'standalone',
    expoVersion: '46.0.0',
  },
}));

jest.mock('expo-font', () => ({
  loadAsync: jest.fn(),
  isLoaded: jest.fn(() => true),
}));

jest.mock('expo-notifications', () => ({
  setNotificationHandler: jest.fn(),
  requestPermissionsAsync: jest.fn(() => Promise.resolve({ status: 'granted' })),
  getPermissionsAsync: jest.fn(() => Promise.resolve({ status: 'granted' })),
  scheduleNotificationAsync: jest.fn(),
  cancelScheduledNotificationAsync: jest.fn(),
  dismissNotificationAsync: jest.fn(),
}));

// Mock Supabase
jest.mock('@supabase/supabase-js', () => ({
  createClient: jest.fn(() => ({
    auth: {
      getSession: jest.fn(() => Promise.resolve({ data: { session: null }, error: null })),
      signIn: jest.fn(),
      signOut: jest.fn(),
      onAuthStateChange: jest.fn(() => ({ data: { subscription: { unsubscribe: jest.fn() } } })),
    },
    from: jest.fn(() => ({
      select: jest.fn(() => Promise.resolve({ data: [], error: null })),
      insert: jest.fn(() => Promise.resolve({ data: [], error: null })),
      update: jest.fn(() => Promise.resolve({ data: [], error: null })),
      delete: jest.fn(() => Promise.resolve({ data: [], error: null })),
    })),
  })),
}));

// Mock React Navigation
jest.mock('@react-navigation/native', () => ({
  useNavigation: () => ({
    navigate: jest.fn(),
    goBack: jest.fn(),
    push: jest.fn(),
    replace: jest.fn(),
  }),
  useRoute: () => ({
    params: {},
    name: 'MockScreen',
  }),
  useFocusEffect: jest.fn(),
}));

// Mock Zustand
jest.mock('zustand');

// Global test utilities
global.console = {
  ...console,
  // Suppress console.error for cleaner test output
  error: jest.fn(),
  warn: jest.fn(),
};



================================================
FILE: metro.config.js
================================================
const { getDefaultConfig } = require('@expo/metro-config');

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname);

// Safely extract default extensions
const { assetExts, sourceExts } = config.resolver;

// Enable SVG support
config.transformer.babelTransformerPath = require.resolve('react-native-svg-transformer');
config.resolver.assetExts = assetExts.filter(ext => ext !== 'svg');
config.resolver.sourceExts = [...sourceExts, 'svg'];

module.exports = config;



================================================
FILE: package.json
================================================
{
  "name": "airavatl",
  "version": "1.0.0",
  "main": "expo-router/entry",
  "private": true,
  "scripts": {
    "prepare": "npx expo-doctor",
    "lint": "expo lint",
    "start": "expo start --dev-client",
    "test": "jest",
    "test:watch": "jest --watch",
    "android": "expo run:android",
    "ios": "expo run:ios",
    "web": "expo start --web",
    "dev": "EXPO_NO_TELEMETRY=1 NODE_OPTIONS='--max-old-space-size=4096' expo start --clear",
    "tunnel": "EXPO_NO_TELEMETRY=1 NODE_OPTIONS='--max-old-space-size=4096' expo start --tunnel",
    "build:web": "expo export --platform web",
    "build:android:preview": "eas build --platform android --profile preview",
    "build:android:production": "eas build --platform android --profile production",
    "build:ios:preview": "eas build --platform ios --profile preview",
    "build:ios:production": "eas build --platform ios --profile production"
  },
  "dependencies": {
    "@expo-google-fonts/inter": "^0.2.3",
    "@expo/vector-icons": "^14.0.0",
    "@hookform/resolvers": "^5.2.1",
    "@react-native-async-storage/async-storage": "2.1.2",
    "@react-native-community/datetimepicker": "8.4.1",
    "@react-navigation/bottom-tabs": "^7.3.10",
    "@react-navigation/native": "^7.1.6",
    "@supabase/supabase-js": "^2.39.3",
    "check": "^1.0.0",
    "date-fns": "^3.3.1",
    "dotenv": "^17.2.1",
    "expo": "53.0.20",
    "expo-blur": "~14.1.5",
    "expo-camera": "~16.1.11",
    "expo-constants": "~17.1.7",
    "expo-device": "~7.1.4",
    "expo-font": "~13.3.1",
    "expo-haptics": "~14.1.4",
    "expo-linear-gradient": "~14.1.5",
    "expo-linking": "~7.1.7",
    "expo-notifications": "~0.31.4",
    "expo-router": "~5.1.4",
    "expo-splash-screen": "~0.30.10",
    "expo-status-bar": "~2.2.3",
    "expo-symbols": "~0.4.5",
    "expo-system-ui": "~5.0.10",
    "expo-web-browser": "~14.2.0",
    "lucide-react-native": "^0.534.0",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "react-hook-form": "^7.62.0",
    "react-native": "0.79.5",
    "react-native-gesture-handler": "~2.24.0",
    "react-native-reanimated": "~3.17.4",
    "react-native-safe-area-context": "5.4.0",
    "react-native-screens": "~4.11.1",
    "react-native-svg": "15.11.2",
    "react-native-svg-transformer": "^1.3.0",
    "react-native-url-polyfill": "^2.0.0",
    "react-native-web": "^0.20.0",
    "react-native-webview": "13.13.5",
    "tailwind-merge": "^3.3.1",
    "whatwg-fetch": "^3.6.20",
    "zod": "^4.0.15",
    "zustand": "^5.0.7"
  },
  "devDependencies": {
    "@babel/core": "^7.20.0",
    "@testing-library/react-native": "^13.2.2",
    "@types/jest": "^30.0.0",
    "@types/react": "~19.0.10",
    "eslint": "^9.0.0",
    "eslint-config-expo": "~9.2.0",
    "jest": "^29.7.0",
    "jest-expo": "^53.0.9",
    "react-test-renderer": "19.0.0",
    "supabase": "^2.33.7",
    "typescript": "~5.8.3"
  },
  "expo": {
    "doctor": {
      "reactNativeDirectoryCheck": {
        "listUnknownPackages": false
      }
    }
  }
}



================================================
FILE: tsconfig.json
================================================
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "jsx": "react-jsx",
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".expo/types/**/*.ts",
    "expo-env.d.ts",
    "nativewind-env.d.ts"
  ]
}



================================================
FILE: .easignore
================================================
# build / cache
node_modules/
.expo/
.expo-shared/
android/.gradle/
ios/Pods/
/android
/ios
.eas
.bolt


# secrets & credentials
.env
.env.local
.env.*.local
*.jks
*.keystore
GoogleService-Info.plist

# misc
.DS_Store
.idea/
.vscode/
*.log

# @generated expo-cli sync-2b81b286409207a5da26e14c78851eb30d8ccbdb
# The following patterns were generated by expo-cli
expo-env.d.ts
# @end expo-cli



================================================
FILE: .prettierrc
================================================
{
  "useTabs": false,
  "bracketSpacing": true,
  "singleQuote": true,
  "tabWidth": 2
}



================================================
FILE: __tests__/components/ui/Button.test.tsx
================================================
import React from 'react';
import { render, fireEvent } from '@testing-library/react-native';
import { Button } from '@/components/ui';

describe('Button Component', () => {
  it('renders correctly with title', () => {
    const { getByText } = render(
      <Button title="Test Button" onPress={() => {}} />
    );
    expect(getByText('Test Button')).toBeTruthy();
  });

  it('handles press events', () => {
    const onPressMock = jest.fn();
    const { getByText } = render(
      <Button title="Test Button" onPress={onPressMock} />
    );

    fireEvent.press(getByText('Test Button'));
    expect(onPressMock).toHaveBeenCalledTimes(1);
  });

  it('shows loading state', () => {
    const { getByTestId } = render(
      <Button title="Test Button" loading={true} onPress={() => {}} />
    );

    expect(getByTestId('button-loading')).toBeTruthy();
  });

  it('disables button when disabled prop is true', () => {
    const onPressMock = jest.fn();
    const { getByText } = render(
      <Button title="Test Button" onPress={onPressMock} disabled={true} />
    );

    const button = getByText('Test Button');
    fireEvent.press(button);
    expect(onPressMock).not.toHaveBeenCalled();
  });

  it('applies correct variant styles', () => {
    const { getByTestId } = render(
      <Button title="Test Button" variant="secondary" onPress={() => {}} />
    );

    const button = getByTestId('test-button');
    expect(button).toBeTruthy();
  });
});



================================================
FILE: app/+not-found.tsx
================================================
import { Link, Stack } from 'expo-router';
import { StyleSheet, Text, View } from 'react-native';

export default function NotFoundScreen() {
  return (
    <>
      <Stack.Screen options={{ title: 'Oops!' }} />
      <View style={styles.container}>
        <Text style={styles.text}>This screen doesn&apos;t exist.</Text>
        <Link href="/" style={styles.link}>
          <Text>Go to home screen!</Text>
        </Link>
      </View>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  text: {
    fontSize: 20,
    fontWeight: 600,
  },
  link: {
    marginTop: 15,
    paddingVertical: 15,
  },
});



================================================
FILE: app/_layout.tsx
================================================
import { useEffect, useState } from 'react';
import { Stack, router } from 'expo-router';
import { StatusBar } from 'expo-status-bar';
import * as SplashScreen from 'expo-splash-screen';
import { useFrameworkReady } from '@/hooks/useFrameworkReady';
import {
  useFonts,
  Inter_400Regular,
  Inter_600SemiBold,
  Inter_700Bold,
} from '@expo-google-fonts/inter';
import { useAuth } from '@/hooks/useAuth';
import { usePushNotifications } from '@/hooks/usePushNotifications';
import { View, ActivityIndicator, Text } from 'react-native';

// Keep the splash screen visible while we fetch resources
SplashScreen.preventAutoHideAsync();

export default function RootLayout() {
  const [initError, setInitError] = useState<string | null>(null);

  useFrameworkReady();

  const [fontsLoaded] = useFonts({
    Inter_400Regular,
    Inter_600SemiBold,
    Inter_700Bold,
  });

  const { session, isLoading, isInitialized } = useAuth();
  const { registerForPushNotifications } = usePushNotifications();

  // Debug logging for session changes
  useEffect(() => {
    if (__DEV__) {
      console.log('🔍 Session state changed:', {
        hasSession: !!session,
        userId: session?.user?.id || 'None',
        isLoading,
        isInitialized,
      });
    }
  }, [session, isLoading, isInitialized]);

  // Register for push notifications when user is authenticated
  useEffect(() => {
    if (session?.user?.id && isInitialized && !isLoading) {
      // Wait a moment for the auth context to be fully established
      const timer = setTimeout(() => {
        // Don't block app loading if push notifications fail
        registerForPushNotifications().catch((error) => {
          if (__DEV__) {
            console.warn('Push notification setup failed:', error);
          }
          // Continue app loading normally
        });
      }, 2000); // Wait 2 seconds after auth is ready

      return () => clearTimeout(timer);
    }
  }, [
    session?.user?.id,
    isInitialized,
    isLoading,
    registerForPushNotifications,
  ]);

  // Handle navigation after everything is ready and mounted
  useEffect(() => {
    // Only navigate after fonts are loaded, auth is initialized, and not loading
    if (!fontsLoaded || !isInitialized || isLoading) {
      if (__DEV__) {
        console.log('⏳ Not ready for navigation yet:', {
          fontsLoaded,
          isInitialized,
          isLoading,
        });
      }
      return;
    }

    // Hide splash screen when everything is ready
    SplashScreen.hideAsync().catch((error) => {
      console.warn('Failed to hide splash screen:', error);
    });

    // Add a small delay to ensure the component is fully mounted
    const timer = setTimeout(() => {
      try {
        if (__DEV__) {
          console.log(
            '🧭 Navigation check - Session:',
            session?.user?.id || 'None'
          );
        }

        if (session?.user?.id) {
          if (__DEV__) {
            console.log('🧭 Navigating to tabs');
          }
          router.replace('/(tabs)');
        } else {
          if (__DEV__) {
            console.log('🧭 Navigating to sign-in');
          }
          router.replace('/(auth)/sign-in');
        }
      } catch (error) {
        if (__DEV__) {
          console.error('❌ Navigation error:', error);
        }
        setInitError('Navigation failed. Please restart the app.');
        // Fallback navigation
        if (session?.user?.id) {
          router.replace('/(tabs)');
        } else {
          router.replace('/(auth)/sign-in');
        }
      }
    }, 100);

    return () => clearTimeout(timer);
  }, [fontsLoaded, session?.user?.id, isInitialized, isLoading]);

  // Show error screen if initialization failed
  if (initError) {
    return (
      <View
        style={{
          flex: 1,
          justifyContent: 'center',
          alignItems: 'center',
          backgroundColor: '#007AFF',
          padding: 20,
        }}
      >
        <Text style={{ color: '#FFFFFF', textAlign: 'center', fontSize: 16 }}>
          {initError}
        </Text>
      </View>
    );
  }

  // Show loading screen while fonts or auth are loading
  if (!fontsLoaded || !isInitialized || isLoading) {
    return (
      <View
        style={{
          flex: 1,
          justifyContent: 'center',
          alignItems: 'center',
          backgroundColor: '#007AFF',
        }}
      >
        <ActivityIndicator size="large" color="#FFFFFF" />
      </View>
    );
  }

  return (
    <>
      <Stack screenOptions={{ headerShown: false }}>
        <Stack.Screen name="(auth)" options={{ headerShown: false }} />
        <Stack.Screen name="(tabs)" options={{ headerShown: false }} />
        <Stack.Screen name="+not-found" options={{ presentation: 'modal' }} />
      </Stack>
      <StatusBar style="auto" />
    </>
  );
}



================================================
FILE: app/edit-auction.tsx
================================================
import React from 'react';
import { View, StyleSheet } from 'react-native';
import { useLocalSearchParams, router } from 'expo-router';
import { AuctionFormShared } from '@/components/forms';

export default function EditAuctionScreen() {
  const params = useLocalSearchParams();

  // Parse auction data from parameters
  const parseAuctionTitle = (title: string) => {
    const match = title.match(/^Delivery from (.+) to (.+)$/);
    return match ? { from: match[1], to: match[2] } : { from: '', to: '' };
  };

  const extractDescriptionAndWeight = (description: string) => {
    const lines = description.split('\n');
    const mainDescription = lines[0] || '';

    // Extract weight from description
    const weightMatch = description.match(/Weight: (\d+(?:\.\d+)?)\s*kg/);
    const weight = weightMatch ? weightMatch[1] : '';

    return { description: mainDescription, weight };
  };

  const locations = parseAuctionTitle(params.title as string);
  const { description, weight } = extractDescriptionAndWeight(
    params.description as string
  );

  const initialData = {
    from: locations.from,
    to: locations.to,
    description,
    weight,
    vehicleType: params.vehicleType as string,
    duration: 5, // Default for edit mode
    customDuration: '',
    isCustomDuration: false,
    consignmentDate: new Date(),
  };

  const handleSuccess = () => {
    // Navigate back to auctions list and replace the current route
    router.replace('/auctions');
  };

  const handleCancel = () => {
    router.back();
  };

  return (
    <View style={styles.container}>
      <AuctionFormShared
        mode="edit"
        initialData={initialData}
        auctionId={params.auctionId as string}
        onSuccess={handleSuccess}
        onCancel={handleCancel}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
});



================================================
FILE: app/(auth)/_layout.tsx
================================================
import { Stack } from 'expo-router';

export default function AuthLayout() {
  return (
    <Stack screenOptions={{ headerShown: false }}>
      <Stack.Screen name="sign-in" />
      <Stack.Screen name="sign-up" />
    </Stack>
  );
}



================================================
FILE: app/(auth)/sign-in-improved.tsx
================================================
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Image,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
} from 'react-native';
import { Link, router } from 'expo-router';
import { supabase } from '@/lib/supabase';
import { authStorage } from '@/lib/storage/storage';
import { Button, Input, Card } from '@/components/ui';
import { validateEmail } from '@/lib/utils';

export default function SignInScreenImproved() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [errors, setErrors] = useState<{ email?: string; password?: string; general?: string }>({});

  const validateForm = () => {
    const newErrors: typeof errors = {};

    if (!email) {
      newErrors.email = 'Email is required';
    } else if (!validateEmail(email)) {
      newErrors.email = 'Please enter a valid email address';
    }

    if (!password) {
      newErrors.password = 'Password is required';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSignIn = async () => {
    if (!validateForm()) return;

    setIsLoading(true);
    setErrors({});

    try {
      console.log('📧 Attempting sign in with email:', email);

      const {
        data: { user, session },
        error: signInError,
      } = await supabase.auth.signInWithPassword({
        email: email.trim(),
        password,
      });

      if (signInError) {
        console.error('❌ Sign in error:', signInError);

        if (signInError.message.includes('Invalid login credentials')) {
          setErrors({ general: 'Invalid email or password. Please try again.' });
        } else if (signInError.message.includes('Email not confirmed')) {
          setErrors({ general: 'Please check your email and confirm your account before signing in.' });
        } else {
          setErrors({ general: signInError.message });
        }
        return;
      }

      if (!user || !session) {
        setErrors({ general: 'Sign in failed. Please try again.' });
        return;
      }

      console.log('✅ Sign in successful for user:', user.id);

      // Store session
      try {
        await authStorage.saveSession(session);
        console.log('💾 Session saved successfully');
      } catch (storageError) {
        console.warn('⚠️ Failed to save session to storage:', storageError);
        // Continue anyway, as the user is authenticated
      }

      // Get user profile to determine role
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('role')
        .eq('id', user.id)
        .single();

      if (profileError) {
        console.warn('⚠️ Failed to fetch user profile:', profileError);
      }

      console.log('👤 User profile:', profile);

      // Navigate to appropriate screen
      router.replace('/(tabs)/' as any);
    } catch (error) {
      console.error('❌ Unexpected sign in error:', error);
      setErrors({ general: 'An unexpected error occurred. Please try again.' });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <KeyboardAvoidingView
      style={styles.container}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
    >
      <ScrollView
        contentContainerStyle={styles.scrollContent}
        keyboardShouldPersistTaps="handled"
      >
        <View style={styles.logoContainer}>
          <Image
            source={require('@/assets/images/Airavatl_Airvatl 512X512.png')}
            style={styles.logo}
            resizeMode="contain"
          />
          <Text style={styles.title}>Welcome Back</Text>
          <Text style={styles.subtitle}>Sign in to your account</Text>
        </View>

        <Card style={styles.formCard} variant="elevated" padding="large">
          <View style={styles.form}>
            <Input
              label="Email"
              placeholder="Enter your email"
              value={email}
              onChangeText={setEmail}
              keyboardType="email-address"
              autoCapitalize="none"
              autoCorrect={false}
              icon="mail"
              error={errors.email}
              editable={!isLoading}
            />

            <Input
              label="Password"
              placeholder="Enter your password"
              value={password}
              onChangeText={setPassword}
              secureTextEntry
              icon="lock"
              error={errors.password}
              editable={!isLoading}
            />

            {errors.general && (
              <View style={styles.errorContainer}>
                <Text style={styles.errorText}>{errors.general}</Text>
              </View>
            )}

            <Button
              title="Sign In"
              onPress={handleSignIn}
              loading={isLoading}
              disabled={isLoading}
              variant="primary"
              size="large"
              fullWidth
              style={styles.signInButton}
            />

            <View style={styles.linkContainer}>
              <Text style={styles.linkText}>
                Don&apos;t have an account?{' '}
                <Link href="/(auth)/sign-up" asChild>
                  <Text style={styles.link}>Sign up</Text>
                </Link>
              </Text>
            </View>
          </View>
        </Card>
      </ScrollView>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F9FA',
  },
  scrollContent: {
    flexGrow: 1,
    justifyContent: 'center',
    padding: 20,
  },
  logoContainer: {
    alignItems: 'center',
    marginBottom: 40,
  },
  logo: {
    width: 80,
    height: 80,
    marginBottom: 20,
  },
  title: {
    fontSize: 28,
    fontFamily: 'Inter_700Bold',
    color: '#1C1C1E',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
    textAlign: 'center',
  },
  formCard: {
    marginHorizontal: 0,
  },
  form: {
    gap: 0, // Inputs have their own margin
  },
  errorContainer: {
    backgroundColor: '#FFEBEE',
    padding: 12,
    borderRadius: 8,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#FFCDD2',
  },
  errorText: {
    color: '#C62828',
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    textAlign: 'center',
  },
  signInButton: {
    marginTop: 10,
  },
  linkContainer: {
    marginTop: 24,
    alignItems: 'center',
  },
  linkText: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
  },
  link: {
    color: '#007AFF',
    fontFamily: 'Inter_600SemiBold',
  },
});



================================================
FILE: app/(auth)/sign-in.tsx
================================================
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Image,
  ActivityIndicator,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
} from 'react-native';
import { Link } from 'expo-router';
import { supabase } from '@/lib/supabase';
import { authStorage } from '@/lib/storage';
import { Feather } from '@expo/vector-icons';

export default function SignInScreen() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const validateEmail = (email: string) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const handleSignIn = async () => {
    console.log('🔄 Starting sign in process...');
    setError(null);

    if (!email || !password) {
      setError('Please fill in all fields');
      return;
    }

    if (!validateEmail(email)) {
      setError('Please enter a valid email address');
      return;
    }

    setIsLoading(true);
    try {
      console.log('📧 Attempting sign in with email:', email);

      const {
        data: { user, session },
        error: signInError,
      } = await supabase.auth.signInWithPassword({
        email: email.trim().toLowerCase(),
        password,
      });

      console.log('📧 Sign in response:', {
        user: user?.id || 'None',
        session: session?.access_token ? 'Present' : 'None',
        error: signInError?.message || 'None',
      });

      if (signInError) {
        console.error('❌ Sign in error:', signInError);
        if (signInError.message === 'Invalid login credentials') {
          setError('Invalid email or password. Please check your credentials.');
        } else if (signInError.message.includes('Email not confirmed')) {
          setError(
            'Please check your email and confirm your account before signing in.'
          );
        } else {
          setError(`Sign in failed: ${signInError.message}`);
        }
        return;
      }

      if (user && session) {
        console.log('✅ Sign in successful, user ID:', user.id);

        // Save session to storage
        await authStorage.saveSession(session);

        // Get user profile
        console.log('👤 Fetching user profile...');
        const { data: profile, error: profileError } = await supabase
          .from('profiles')
          .select('role')
          .eq('id', user.id)
          .single();

        console.log('👤 Profile response:', {
          profile: profile?.role || 'None',
          error: profileError?.message || 'None',
        });

        if (profileError) {
          console.error('❌ Error fetching profile:', profileError);
          setError('Error fetching user profile. Please try again.');
          return;
        }

        if (!profile) {
          setError('User profile not found. Please contact support.');
          await supabase.auth.signOut();
          await authStorage.clearAll();
          return;
        }

        // Save user profile to storage
        await authStorage.saveUserProfile(profile);

        if (profile.role === 'driver' || profile.role === 'consigner') {
          console.log('✅ Valid role found:', profile.role);
          // Navigation will be handled by the auth state change listener
          console.log(
            '🧭 Sign in successful, navigation will be handled automatically'
          );
        } else {
          setError('Invalid user role. Please contact support.');
          await supabase.auth.signOut();
          await authStorage.clearAll();
          return;
        }
      } else {
        console.error('❌ No user or session returned');
        setError('Sign in failed. Please try again.');
      }
    } catch (error) {
      console.error('❌ Unexpected sign in error:', error);
      setError('An unexpected error occurred. Please try again later.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <ScrollView contentContainerStyle={styles.scrollContainer}>
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.container}
      >
        <View style={styles.header}>
          <Image
            source={{
              uri: 'https://images.unsplash.com/photo-1635872666354-a8c2b5e17c2a?w=800&auto=format&fit=crop&q=60',
            }}
            style={styles.headerImage}
          />
          <View style={styles.headerOverlay}>
            <Text style={styles.headerTitle}>Welcome Back</Text>
            <Text style={styles.headerSubtitle}>
              Sign in to continue using AiravatL
            </Text>
          </View>
        </View>

        <View style={styles.formContainer}>
          {error && (
            <View style={styles.errorContainer}>
              <Text style={styles.errorText}>{error}</Text>
            </View>
          )}

          <View style={styles.inputContainer}>
            <Feather
              name="mail"
              size={20}
              color="#6C757D"
              style={styles.inputIcon}
            />
            <TextInput
              style={styles.input}
              placeholder="Email"
              value={email}
              onChangeText={(text) => {
                setEmail(text);
                setError(null);
              }}
              autoCapitalize="none"
              keyboardType="email-address"
              placeholderTextColor="#6C757D"
              autoComplete="email"
              textContentType="emailAddress"
            />
          </View>

          <View style={styles.inputContainer}>
            <Feather
              name="lock"
              size={20}
              color="#6C757D"
              style={styles.inputIcon}
            />
            <TextInput
              style={styles.input}
              placeholder="Password"
              value={password}
              onChangeText={(text) => {
                setPassword(text);
                setError(null);
              }}
              secureTextEntry
              placeholderTextColor="#6C757D"
              autoComplete="password"
              textContentType="password"
            />
          </View>

          <TouchableOpacity
            style={[
              styles.signInButton,
              isLoading && styles.signInButtonDisabled,
            ]}
            onPress={handleSignIn}
            disabled={isLoading}
          >
            {isLoading ? (
              <ActivityIndicator color="#FFFFFF" />
            ) : (
              <>
                <Text style={styles.signInButtonText}>Sign In</Text>
                <Feather name="arrow-right" size={20} color="#FFFFFF" />
              </>
            )}
          </TouchableOpacity>

          <View style={styles.footer}>
            <Text style={styles.footerText}>Don&apos;t have an account?</Text>
            <Link href="/(auth)/sign-up" asChild>
              <TouchableOpacity>
                <Text style={styles.signUpLink}>Sign Up</Text>
              </TouchableOpacity>
            </Link>
          </View>
        </View>
      </KeyboardAvoidingView>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  scrollContainer: {
    flexGrow: 1,
  },
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  header: {
    height: 300,
    position: 'relative',
  },
  headerImage: {
    width: '100%',
    height: '100%',
  },
  headerOverlay: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    padding: 24,
    backgroundColor: 'rgba(0, 0, 0, 0.4)',
  },
  headerTitle: {
    fontSize: 32,
    fontFamily: 'Inter_700Bold',
    color: '#FFFFFF',
    marginBottom: 8,
  },
  headerSubtitle: {
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#FFFFFF',
    opacity: 0.9,
  },
  formContainer: {
    padding: 24,
    backgroundColor: '#FFFFFF',
    borderTopLeftRadius: 24,
    borderTopRightRadius: 24,
    marginTop: -24,
  },
  errorContainer: {
    backgroundColor: '#FEE2E2',
    padding: 16,
    borderRadius: 12,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: '#FCA5A5',
  },
  errorText: {
    color: '#DC2626',
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F8F9FA',
    borderRadius: 12,
    marginBottom: 16,
    paddingHorizontal: 16,
    borderWidth: 1,
    borderColor: '#E5E5E5',
  },
  inputIcon: {
    marginRight: 12,
  },
  input: {
    flex: 1,
    height: 48,
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
  },
  signInButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#007AFF',
    padding: 16,
    borderRadius: 12,
    marginTop: 24,
  },
  signInButtonDisabled: {
    opacity: 0.7,
  },
  signInButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    marginRight: 8,
  },
  footer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 24,
  },
  footerText: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
  },
  signUpLink: {
    fontSize: 14,
    fontFamily: 'Inter_600SemiBold',
    color: '#007AFF',
    marginLeft: 4,
  },
});



================================================
FILE: app/(auth)/sign-up.tsx
================================================
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Alert,
  ActivityIndicator,
  Platform,
  ScrollView,
  KeyboardAvoidingView,
  Modal,
} from 'react-native';
import { Link, router } from 'expo-router';
import { Feather } from '@expo/vector-icons';
import { supabase } from '../../lib/supabase';
import { authStorage } from '@/lib/storage';

type UserRole = 'consigner' | 'driver';

const VEHICLE_TYPES = [
  {
    id: 'three_wheeler',
    label: '3 Wheeler',
    description: 'Capacity: Up to 500 kg',
  },
  {
    id: 'pickup_truck',
    label: 'Pickup Truck',
    description: 'Capacity: Up to 1000 kg',
  },
  {
    id: 'mini_truck',
    label: 'Mini Truck',
    description: 'Capacity: Up to 2000 kg',
  },
  {
    id: 'medium_truck',
    label: 'Medium Truck',
    description: 'Capacity: Up to 5000 kg',
  },
  {
    id: 'large_truck',
    label: 'Large Truck',
    description: 'Capacity: Over 5000 kg',
  },
];

export default function SignUpScreen() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [role, setRole] = useState<UserRole | null>(null);
  const [phoneNumber, setPhoneNumber] = useState('');
  const [vehicleType, setVehicleType] = useState('');
  const [vehicleNumber, setVehicleNumber] = useState('');
  const [showVehicleDropdown, setShowVehicleDropdown] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const validateEmail = (email: string) =>
    /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  const validatePassword = (password: string) => password.length >= 6;
  const validatePhoneNumber = (phone: string) => /^[0-9]{10}$/.test(phone);
  const validateVehicleNumber = (vehicleNum: string) => {
    // Basic validation - just check if it's not empty
    return vehicleNum.trim().length > 0;
  };

  const showExistingAccountAlert = () => {
    if (Platform.OS === 'web') {
      setError(
        'An account with this email already exists. Please sign in instead.'
      );
    } else {
      Alert.alert(
        'Account Exists',
        'An account with this email already exists. Would you like to sign in instead?',
        [
          { text: 'Cancel', style: 'cancel' },
          { text: 'Sign In', onPress: () => router.replace('/sign-in') },
        ]
      );
    }
  };

  const handleSignUp = async () => {
    setError(null);

    if (!email || !password || !confirmPassword || !role) {
      setError('Please fill in all fields and select a role');
      return;
    }

    if (!validateEmail(email)) {
      setError('Please enter a valid email address');
      return;
    }

    if (!validatePassword(password)) {
      setError('Password must be at least 6 characters long');
      return;
    }

    if (password !== confirmPassword) {
      setError('Passwords do not match');
      return;
    }

    // Additional validation for drivers
    if (role === 'driver') {
      if (!phoneNumber || !vehicleType || !vehicleNumber) {
        setError(
          'Phone number, vehicle type, and vehicle number are required for drivers'
        );
        return;
      }

      if (!validatePhoneNumber(phoneNumber)) {
        setError('Please enter a valid 10-digit phone number');
        return;
      }

      if (!validateVehicleNumber(vehicleNumber)) {
        setError('Please enter a valid vehicle number');
        return;
      }
    }

    setIsLoading(true);
    try {
      const {
        data: { user, session },
        error: signUpError,
      } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            role,
            username: email.split('@')[0],
            phone_number: role === 'driver' ? phoneNumber : null,
            vehicle_type: role === 'driver' ? vehicleType : null,
            vehicle_number: role === 'driver' ? vehicleNumber : null,
          },
        },
      });

      if (signUpError) {
        if (signUpError.message === 'User already registered') {
          showExistingAccountAlert();
          return;
        } else {
          setError(signUpError.message);
        }
        return;
      }

      if (user) {
        console.log('✅ User created successfully:', user.id);
        console.log('📱 Session available:', session ? 'Yes' : 'No');

        // With auto-confirmation, we should always get a session
        if (session) {
          console.log('💾 Saving session to storage');
          await authStorage.saveSession(session);

          // Wait a moment for the trigger to create the profile
          setTimeout(async () => {
            try {
              const { data: profile } = await supabase
                .from('profiles')
                .select('*')
                .eq('id', user.id)
                .single();

              if (profile) {
                console.log('✅ Profile found, saving to storage');
                await authStorage.saveUserProfile(profile);
              }
            } catch {
              console.log(
                '⏳ Profile not ready yet, will be fetched on next sign in'
              );
            }
          }, 1000);

          Alert.alert(
            'Success',
            'Account created successfully! You will be signed in automatically.',
            [
              {
                text: 'OK',
                onPress: () => {
                  console.log(
                    '🧭 Sign up complete, navigation will be handled automatically'
                  );
                  // Navigation will be handled by useAuth hook
                },
              },
            ]
          );
        } else {
          // This shouldn't happen with auto-confirmation, but handle it just in case
          console.log('⚠️ No session returned, trying to sign in manually');
          const { data: signInData, error: signInError } =
            await supabase.auth.signInWithPassword({
              email,
              password,
            });

          if (signInError || !signInData.session) {
            Alert.alert(
              'Account Created',
              'Your account was created successfully. Please sign in to continue.',
              [
                {
                  text: 'OK',
                  onPress: () => router.replace('/sign-in'),
                },
              ]
            );
          } else {
            await authStorage.saveSession(signInData.session);
            Alert.alert(
              'Success',
              'Account created and signed in successfully!'
            );
          }
        }
      }
    } catch (error) {
      console.error('Signup error:', error);
      setError('Failed to create account. Please try again later.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <KeyboardAvoidingView
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      style={styles.container}
      keyboardVerticalOffset={Platform.OS === 'ios' ? 0 : 24}
    >
      <ScrollView
        contentContainerStyle={styles.scrollContainer}
        showsVerticalScrollIndicator={false}
        bounces={false}
      >
        <View style={styles.header}>
          <Text style={styles.headerTitle}>Create Account</Text>
          <Text style={styles.headerSubtitle}>
            Join AiravatL and start your logistics journey
          </Text>
        </View>

        <View style={styles.formContainer}>
          {error && (
            <View style={styles.errorContainer}>
              <Text style={styles.errorText}>{error}</Text>
            </View>
          )}

          <View style={styles.inputContainer}>
            <Feather
              name="mail"
              size={20}
              color="#6C757D"
              style={styles.inputIcon}
            />
            <TextInput
              style={styles.input}
              placeholder="Email"
              value={email}
              onChangeText={setEmail}
              keyboardType="email-address"
              autoCapitalize="none"
              placeholderTextColor="#6C757D"
            />
          </View>

          <View style={styles.inputContainer}>
            <Feather
              name="lock"
              size={20}
              color="#6C757D"
              style={styles.inputIcon}
            />
            <TextInput
              style={styles.input}
              placeholder="Password"
              value={password}
              onChangeText={setPassword}
              secureTextEntry
              placeholderTextColor="#6C757D"
            />
          </View>

          <View style={styles.inputContainer}>
            <Feather
              name="check-circle"
              size={20}
              color="#6C757D"
              style={styles.inputIcon}
            />
            <TextInput
              style={styles.input}
              placeholder="Confirm Password"
              value={confirmPassword}
              onChangeText={setConfirmPassword}
              secureTextEntry
              placeholderTextColor="#6C757D"
            />
          </View>

          <Text style={styles.roleLabel}>Select your role:</Text>
          <View style={styles.roleContainer}>
            <TouchableOpacity
              style={[
                styles.roleOption,
                role === 'consigner' && styles.roleOptionSelected,
              ]}
              onPress={() => setRole('consigner')}
            >
              <Feather
                name="package"
                size={24}
                color={role === 'consigner' ? '#FFFFFF' : '#6C757D'}
              />
              <View style={styles.roleContent}>
                <Text
                  style={[
                    styles.roleTitle,
                    role === 'consigner' && styles.roleTitleSelected,
                  ]}
                >
                  Consigner
                </Text>
                <Text
                  style={[
                    styles.roleDescription,
                    role === 'consigner' && styles.roleDescriptionSelected,
                  ]}
                >
                  I want to ship goods
                </Text>
              </View>
            </TouchableOpacity>

            <TouchableOpacity
              style={[
                styles.roleOption,
                role === 'driver' && styles.roleOptionSelected,
              ]}
              onPress={() => setRole('driver')}
            >
              <Feather
                name="truck"
                size={24}
                color={role === 'driver' ? '#FFFFFF' : '#6C757D'}
              />
              <View style={styles.roleContent}>
                <Text
                  style={[
                    styles.roleTitle,
                    role === 'driver' && styles.roleTitleSelected,
                  ]}
                >
                  Driver
                </Text>
                <Text
                  style={[
                    styles.roleDescription,
                    role === 'driver' && styles.roleDescriptionSelected,
                  ]}
                >
                  I want to transport goods
                </Text>
              </View>
            </TouchableOpacity>
          </View>

          {/* Driver-specific fields */}
          {role === 'driver' && (
            <>
              <View style={styles.driverFieldsContainer}>
                <Text style={styles.driverFieldsTitle}>Driver Information</Text>

                <View style={styles.inputContainer}>
                  <Feather
                    name="phone"
                    size={20}
                    color="#6C757D"
                    style={styles.inputIcon}
                  />
                  <TextInput
                    style={styles.input}
                    placeholder="Phone Number (10 digits)"
                    value={phoneNumber}
                    onChangeText={setPhoneNumber}
                    keyboardType="numeric"
                    maxLength={10}
                    placeholderTextColor="#6C757D"
                  />
                </View>

                <View style={styles.vehicleSelectionContainer}>
                  <TouchableOpacity
                    style={[styles.inputContainer, styles.vehicleButton]}
                    onPress={() => setShowVehicleDropdown(true)}
                  >
                    <Feather
                      name="truck"
                      size={20}
                      color="#6C757D"
                      style={styles.inputIcon}
                    />
                    <Text
                      style={[
                        styles.vehicleButtonText,
                        !vehicleType && styles.placeholderText,
                      ]}
                    >
                      {vehicleType
                        ? VEHICLE_TYPES.find((v) => v.id === vehicleType)?.label
                        : 'Select Vehicle Type'}
                    </Text>
                    <Feather name="chevron-right" size={20} color="#6C757D" />
                  </TouchableOpacity>
                </View>

                {/* Vehicle Selection Modal */}
                <Modal
                  visible={showVehicleDropdown}
                  animationType="slide"
                  presentationStyle="formSheet"
                  onRequestClose={() => setShowVehicleDropdown(false)}
                >
                  <View style={styles.modalContainer}>
                    <View style={styles.modalHeader}>
                      <TouchableOpacity
                        onPress={() => setShowVehicleDropdown(false)}
                        style={styles.modalCloseButton}
                      >
                        <Feather name="x" size={24} color="#6C757D" />
                      </TouchableOpacity>
                      <Text style={styles.modalTitle}>Select Vehicle Type</Text>
                      <View style={styles.modalHeaderSpacer} />
                    </View>

                    <ScrollView
                      style={styles.modalContent}
                      showsVerticalScrollIndicator={true}
                      contentContainerStyle={styles.modalScrollContent}
                      bounces={true}
                    >
                      {VEHICLE_TYPES.map((vehicle, index) => (
                        <TouchableOpacity
                          key={vehicle.id}
                          style={[
                            styles.modalVehicleItem,
                            vehicleType === vehicle.id &&
                              styles.modalVehicleItemSelected,
                            index === VEHICLE_TYPES.length - 1 &&
                              styles.lastModalItem,
                          ]}
                          onPress={() => {
                            setVehicleType(vehicle.id);
                            setShowVehicleDropdown(false);
                          }}
                          activeOpacity={0.7}
                        >
                          <View style={styles.modalVehicleContent}>
                            <Text
                              style={[
                                styles.modalVehicleTitle,
                                vehicleType === vehicle.id &&
                                  styles.modalVehicleTitleSelected,
                              ]}
                            >
                              {vehicle.label}
                            </Text>
                            <Text
                              style={[
                                styles.modalVehicleDescription,
                                vehicleType === vehicle.id &&
                                  styles.modalVehicleDescriptionSelected,
                              ]}
                            >
                              {vehicle.description}
                            </Text>
                          </View>
                          {vehicleType === vehicle.id && (
                            <Feather name="check" size={20} color="#007AFF" />
                          )}
                        </TouchableOpacity>
                      ))}
                    </ScrollView>
                  </View>
                </Modal>

                <View style={styles.inputContainer}>
                  <Feather
                    name="hash"
                    size={20}
                    color="#6C757D"
                    style={styles.inputIcon}
                  />
                  <TextInput
                    style={styles.input}
                    placeholder="Vehicle Number"
                    value={vehicleNumber}
                    onChangeText={setVehicleNumber}
                    autoCapitalize="characters"
                    placeholderTextColor="#6C757D"
                  />
                </View>
              </View>
            </>
          )}

          <TouchableOpacity
            style={[
              styles.signUpButton,
              isLoading && styles.signUpButtonDisabled,
            ]}
            onPress={handleSignUp}
            disabled={isLoading}
          >
            {isLoading ? (
              <ActivityIndicator color="#FFFFFF" />
            ) : (
              <>
                <Text style={styles.signUpButtonText}>Create Account</Text>
                <Feather name="arrow-right" size={20} color="#FFFFFF" />
              </>
            )}
          </TouchableOpacity>

          <View style={styles.footer}>
            <Text style={styles.footerText}>Already have an account?</Text>
            <Link href="/sign-in" asChild>
              <TouchableOpacity>
                <Text style={styles.signInLink}>Sign In</Text>
              </TouchableOpacity>
            </Link>
          </View>
        </View>
      </ScrollView>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  scrollContainer: {
    flexGrow: 1,
    paddingBottom: 20,
  },
  header: {
    paddingTop: 80,
    paddingHorizontal: 24,
    paddingBottom: 40,
    backgroundColor: '#007AFF',
  },
  headerTitle: {
    fontSize: 32,
    fontFamily: 'Inter_700Bold',
    color: '#FFFFFF',
    marginBottom: 8,
  },
  headerSubtitle: {
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#FFFFFF',
    opacity: 0.9,
  },
  formContainer: {
    padding: 24,
    backgroundColor: '#FFFFFF',
    borderTopLeftRadius: 24,
    borderTopRightRadius: 24,
    marginTop: -24,
    flex: 1,
  },
  errorContainer: {
    backgroundColor: '#FEE2E2',
    padding: 16,
    borderRadius: 12,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: '#FCA5A5',
  },
  errorText: {
    color: '#DC2626',
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F8F9FA',
    borderRadius: 12,
    marginBottom: 16,
    paddingHorizontal: 16,
    borderWidth: 1,
    borderColor: '#E5E5E5',
  },
  inputIcon: {
    marginRight: 12,
  },
  input: {
    flex: 1,
    height: 48,
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
  },
  roleLabel: {
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginBottom: 12,
    marginTop: 8,
  },
  roleContainer: {
    gap: 12,
    marginBottom: 24,
  },
  roleOption: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F8F9FA',
    padding: 16,
    borderRadius: 12,
    borderWidth: 2,
    borderColor: '#E5E5E5',
  },
  roleOptionSelected: {
    backgroundColor: '#007AFF',
    borderColor: '#007AFF',
  },
  roleContent: {
    marginLeft: 16,
  },
  roleTitle: {
    fontSize: 18,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginBottom: 4,
  },
  roleTitleSelected: {
    color: '#FFFFFF',
  },
  roleDescription: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
  },
  roleDescriptionSelected: {
    color: '#FFFFFF',
    opacity: 0.9,
  },
  driverFieldsContainer: {
    backgroundColor: '#F8F9FA',
    padding: 16,
    borderRadius: 12,
    marginBottom: 24,
    borderWidth: 1,
    borderColor: '#E5E5E5',
  },
  driverFieldsTitle: {
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#007AFF',
    marginBottom: 16,
    textAlign: 'center',
  },
  vehicleSelectionContainer: {
    marginBottom: 16,
  },
  vehicleButton: {
    backgroundColor: '#FFFFFF',
  },
  vehicleButtonText: {
    flex: 1,
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
    paddingVertical: 14,
  },
  placeholderText: {
    color: '#6C757D',
  },
  modalContainer: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  modalHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingTop: Platform.OS === 'ios' ? 44 : 16,
    paddingBottom: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E5E5',
    backgroundColor: '#FFFFFF',
  },
  modalCloseButton: {
    padding: 8,
  },
  modalTitle: {
    fontSize: 18,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
  },
  modalHeaderSpacer: {
    width: 40,
  },
  modalContent: {
    flex: 1,
    paddingHorizontal: 16,
  },
  modalScrollContent: {
    paddingTop: 16,
    paddingBottom: Platform.OS === 'ios' ? 50 : 32,
    flexGrow: 1,
  },
  modalVehicleItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingVertical: 20,
    paddingHorizontal: 16,
    marginVertical: 6,
    borderRadius: 12,
    backgroundColor: '#F8F9FA',
    borderWidth: 1,
    borderColor: '#E5E5E5',
    minHeight: 80,
  },
  lastModalItem: {
    marginBottom: 20,
  },
  modalVehicleItemSelected: {
    backgroundColor: '#E3F2FD',
    borderColor: '#007AFF',
  },
  modalVehicleContent: {
    flex: 1,
  },
  modalVehicleTitle: {
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginBottom: 4,
  },
  modalVehicleTitleSelected: {
    color: '#007AFF',
  },
  modalVehicleDescription: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
  },
  modalVehicleDescriptionSelected: {
    color: '#5A9FD4',
  },
  signUpButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#007AFF',
    padding: 16,
    borderRadius: 12,
    marginTop: 8,
  },
  signUpButtonDisabled: {
    opacity: 0.7,
  },
  signUpButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    marginRight: 8,
  },
  footer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 24,
  },
  footerText: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
  },
  signInLink: {
    fontSize: 14,
    fontFamily: 'Inter_600SemiBold',
    color: '#007AFF',
    marginLeft: 4,
  },
});



================================================
FILE: app/(tabs)/_layout.tsx
================================================
import { Tabs, router } from 'expo-router';
import { Feather } from '@expo/vector-icons';
import { useAuth } from '@/hooks/useAuth';
import { View, ActivityIndicator } from 'react-native';
import { useEffect, useState } from 'react';
import { supabase } from '@/lib/supabase';

type UserRole = 'consigner' | 'driver';

export default function TabLayout() {
  const { isLoading } = useAuth();
  const [userRole, setUserRole] = useState<UserRole | null>(null);
  const [roleLoading, setRoleLoading] = useState(true);

  useEffect(() => {
    async function getUserRole() {
      try {
        const {
          data: { user },
        } = await supabase.auth.getUser();
        if (user) {
          const { data: profile } = await supabase
            .from('profiles')
            .select('role')
            .eq('id', user.id)
            .single();

          if (profile) {
            console.log('User role detected:', profile.role);
            setUserRole(profile.role as UserRole);
          } else {
            router.replace('/(auth)/sign-in');
            return;
          }
        } else {
          router.replace('/(auth)/sign-in');
          return;
        }
      } catch (error) {
        console.error('Error fetching user role:', error);
        router.replace('/(auth)/sign-in');
        return;
      } finally {
        setRoleLoading(false);
      }
    }

    getUserRole();
  }, []);

  if (isLoading || roleLoading) {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <ActivityIndicator size="large" color="#007AFF" />
      </View>
    );
  }

  if (!userRole) {
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
        <ActivityIndicator size="large" color="#007AFF" />
      </View>
    );
  }

  console.log('Rendering tabs for role:', userRole);

  // Render different tab layouts based on user role
  if (userRole === 'driver') {
    return (
      <Tabs
        screenOptions={{
          tabBarActiveTintColor: '#007AFF',
          tabBarStyle: {
            borderTopWidth: 1,
            borderTopColor: '#E5E5E5',
          },
          headerStyle: {
            backgroundColor: '#FFFFFF',
          },
          headerTitleStyle: {
            fontFamily: 'Inter_600SemiBold',
          },
        }}
      >
        <Tabs.Screen
          name="index"
          options={{
            title: 'Home',
            tabBarIcon: ({ size, color }) => (
              <Feather name="home" size={size} color={color} />
            ),
            headerTitle: 'Welcome to AiravatL',
          }}
        />

        <Tabs.Screen
          name="auctions"
          options={{
            title: 'Jobs',
            tabBarIcon: ({ size, color }) => (
              <Feather name="briefcase" size={size} color={color} />
            ),
            headerShown: false,
          }}
        />

        <Tabs.Screen
          name="info"
          options={{
            title: 'Info',
            tabBarIcon: ({ size, color }) => (
              <Feather name="info" size={size} color={color} />
            ),
            headerShown: false,
          }}
        />

        <Tabs.Screen
          name="profile"
          options={{
            title: 'Profile',
            tabBarIcon: ({ size, color }) => (
              <Feather name="user" size={size} color={color} />
            ),
            headerTitle: 'My Profile',
          }}
        />

        {/* Hide create-auction completely for drivers */}
        <Tabs.Screen
          name="create-auction"
          options={{
            href: null,
          }}
        />
      </Tabs>
    );
  }

  // Consigner layout with all tabs
  return (
    <Tabs
      screenOptions={{
        tabBarActiveTintColor: '#007AFF',
        tabBarStyle: {
          borderTopWidth: 1,
          borderTopColor: '#E5E5E5',
        },
        headerStyle: {
          backgroundColor: '#FFFFFF',
        },
        headerTitleStyle: {
          fontFamily: 'Inter_600SemiBold',
        },
      }}
    >
      <Tabs.Screen
        name="index"
        options={{
          title: 'Home',
          tabBarIcon: ({ size, color }) => (
            <Feather name="home" size={size} color={color} />
          ),
          headerTitle: 'Welcome to AiravatL',
        }}
      />

      <Tabs.Screen
        name="auctions"
        options={{
          title: 'Auctions',
          tabBarIcon: ({ size, color }) => (
            <Feather name="package" size={size} color={color} />
          ),
          headerShown: false,
        }}
        listeners={({ navigation }) => ({
          tabPress: (e) => {
            // Reset the auctions stack when tab is pressed
            navigation.reset({
              index: 0,
              routes: [{ name: 'auctions' }],
            });
          },
        })}
      />

      <Tabs.Screen
        name="create-auction"
        options={{
          title: 'Create',
          tabBarIcon: ({ size, color }) => (
            <Feather name="plus-circle" size={size} color={color} />
          ),
          headerTitle: 'Create Auction',
        }}
      />

      <Tabs.Screen
        name="info"
        options={{
          title: 'Info',
          tabBarIcon: ({ size, color }) => (
            <Feather name="info" size={size} color={color} />
          ),
          headerShown: false,
        }}
      />

      <Tabs.Screen
        name="profile"
        options={{
          title: 'Profile',
          tabBarIcon: ({ size, color }) => (
            <Feather name="user" size={size} color={color} />
          ),
          headerTitle: 'My Profile',
        }}
      />
    </Tabs>
  );
}



================================================
FILE: app/(tabs)/create-auction.tsx
================================================
import React from 'react';
import { View, StyleSheet } from 'react-native';
import { router } from 'expo-router';
import { AuctionFormShared } from '@/components/forms';

export default function CreateAuctionScreen() {
  const handleSuccess = () => {
    router.push('/auctions');
  };

  return (
    <View style={styles.container}>
      <AuctionFormShared mode="create" onSuccess={handleSuccess} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
});



================================================
FILE: app/(tabs)/index.tsx
================================================
import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  ScrollView,
  StyleSheet,
  TouchableOpacity,
  Platform,
  Dimensions,
  Image,
} from 'react-native';
import { useRouter } from 'expo-router';
import { Feather } from '@expo/vector-icons';
import { supabase } from '@/lib/supabase';

// Use Feather icons instead of lucide-react-native for compatibility
const FEATURES = [
  {
    icon: <Feather name="package" size={24} color="#007AFF" />,
    title: 'Smart Logistics',
    description:
      'Efficient routing and real-time tracking for all your shipments',
    highlight: '2,500+ Deliveries',
  },
  {
    icon: <Feather name="users" size={24} color="#34C759" />,
    title: 'Trusted Partners',
    description: 'Network of verified delivery partners across Guwahati',
    highlight: '500+ Partners',
  },
  {
    icon: <Feather name="check-circle" size={24} color="#5856D6" />,
    title: 'Reliable Service',
    description: 'Consistent and dependable delivery performance',
    highlight: '98% Success Rate',
  },
];

type UserRole = 'consigner' | 'driver';

export default function HomeScreen() {
  const router = useRouter();
  const [userRole, setUserRole] = useState<UserRole | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    async function getUserRole() {
      try {
        const {
          data: { user },
        } = await supabase.auth.getUser();
        if (user) {
          const { data: profile } = await supabase
            .from('profiles')
            .select('role')
            .eq('id', user.id)
            .single();

          if (profile) {
            setUserRole(profile.role as UserRole);
          }
        }
      } catch (error) {
        console.error('Error fetching user role:', error);
      } finally {
        setIsLoading(false);
      }
    }

    getUserRole();
  }, []);

  const handleCreateRequest = () => {
    router.push('/create-auction');
  };

  const handleViewAuctions = () => {
    router.push('/auctions');
  };

  return (
    <ScrollView style={styles.container} contentContainerStyle={styles.content}>
      <View style={styles.header}>
        <View style={styles.headerContent}>
          <View style={styles.logoContainer}>
            <Image
              source={require('@/assets/images/icon.png')}
              style={styles.logo}
              resizeMode="contain"
            />
          </View>

          <Text style={styles.subtitle}>
            Your trusted logistics partner in Guwahati
          </Text>

          {!isLoading && userRole === 'consigner' && (
            <View style={styles.actionButtons}>
              <TouchableOpacity
                style={styles.primaryButton}
                onPress={handleCreateRequest}
              >
                <Feather name="plus" size={20} color="#FFFFFF" />
                <Text style={styles.primaryButtonText}>Create Auction</Text>
              </TouchableOpacity>

              <TouchableOpacity
                style={styles.secondaryButton}
                onPress={handleViewAuctions}
              >
                <Feather name="list" size={20} color="#007AFF" />
                <Text style={styles.secondaryButtonText}>View My Auctions</Text>
              </TouchableOpacity>
            </View>
          )}

          {!isLoading && userRole === 'driver' && (
            <TouchableOpacity
              style={styles.primaryButton}
              onPress={handleViewAuctions}
            >
              <Feather name="search" size={20} color="#FFFFFF" />
              <Text style={styles.primaryButtonText}>Find Jobs</Text>
            </TouchableOpacity>
          )}
        </View>
      </View>

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Why Choose Us?</Text>
        <View style={styles.featuresGrid}>
          {FEATURES.map((feature, index) => (
            <View key={index} style={styles.featureCard}>
              <View style={styles.featureHeader}>
                {feature.icon}
                <Text style={styles.highlightText}>{feature.highlight}</Text>
              </View>
              <Text style={styles.featureTitle}>{feature.title}</Text>
              <Text style={styles.featureDescription}>
                {feature.description}
              </Text>
            </View>
          ))}
        </View>
      </View>

      {!isLoading && userRole === 'consigner' && (
        <View style={styles.quickActionsSection}>
          <Text style={styles.sectionTitle}>Quick Actions</Text>
          <View style={styles.quickActionsGrid}>
            <TouchableOpacity
              style={styles.quickActionCard}
              onPress={handleCreateRequest}
            >
              <Feather name="plus-circle" size={32} color="#007AFF" />
              <Text style={styles.quickActionTitle}>Create New Auction</Text>
              <Text style={styles.quickActionDescription}>
                Start a new delivery auction
              </Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.quickActionCard}
              onPress={handleViewAuctions}
            >
              <Feather name="clock" size={32} color="#34C759" />
              <Text style={styles.quickActionTitle}>Active Auctions</Text>
              <Text style={styles.quickActionDescription}>
                View your ongoing auctions
              </Text>
            </TouchableOpacity>
          </View>
        </View>
      )}
    </ScrollView>
  );
}

const { width } = Dimensions.get('window');

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F9FA',
  },
  content: {
    paddingBottom: 32,
  },
  header: {
    backgroundColor: '#007AFF',
    paddingTop: 40,
    paddingBottom: 32,
    borderBottomLeftRadius: 32,
    borderBottomRightRadius: 32,
    marginBottom: 24,
  },
  headerContent: {
    paddingHorizontal: 24,
    alignItems: 'center',
  },
  logoContainer: {
    marginBottom: 16,
    alignItems: 'center',
    justifyContent: 'center',
  },
  logo: {
    width: 120,
    height: 120,
  },
  subtitle: {
    fontSize: 18,
    fontFamily: 'Inter_400Regular',
    color: '#FFFFFF',
    opacity: 0.9,
    marginBottom: 24,
    textAlign: 'center',
  },
  actionButtons: {
    gap: 12,
    width: '100%',
  },
  primaryButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#FFFFFF',
    paddingVertical: 16,
    paddingHorizontal: 24,
    borderRadius: 12,
    gap: 8,
  },
  primaryButtonText: {
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#007AFF',
  },
  secondaryButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'transparent',
    paddingVertical: 16,
    paddingHorizontal: 24,
    borderRadius: 12,
    borderWidth: 2,
    borderColor: '#FFFFFF',
    gap: 8,
  },
  secondaryButtonText: {
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#FFFFFF',
  },
  section: {
    padding: 24,
  },
  sectionTitle: {
    fontSize: 24,
    fontFamily: 'Inter_700Bold',
    color: '#1C1C1E',
    marginBottom: 24,
  },
  featuresGrid: {
    flexDirection: Platform.OS === 'web' ? 'row' : 'column',
    flexWrap: Platform.OS === 'web' ? 'wrap' : 'nowrap',
    gap: 16,
  },
  featureCard: {
    width: Platform.OS === 'web' ? (width >= 768 ? '31%' : '100%') : '100%',
    backgroundColor: '#FFFFFF',
    padding: 24,
    borderRadius: 16,
    ...Platform.select({
      web: {
        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
      },
      default: {
        elevation: 2,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
      },
    }),
  },
  featureHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  highlightText: {
    fontSize: 14,
    fontFamily: 'Inter_600SemiBold',
    color: '#007AFF',
  },
  featureTitle: {
    fontSize: 18,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginBottom: 8,
  },
  featureDescription: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
    lineHeight: 20,
  },
  quickActionsSection: {
    padding: 24,
    paddingTop: 0,
  },
  quickActionsGrid: {
    flexDirection: Platform.OS === 'web' ? 'row' : 'column',
    gap: 16,
  },
  quickActionCard: {
    flex: 1,
    backgroundColor: '#FFFFFF',
    padding: 24,
    borderRadius: 16,
    alignItems: 'center',
    ...Platform.select({
      web: {
        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
      },
      default: {
        elevation: 2,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
      },
    }),
  },
  quickActionTitle: {
    fontSize: 18,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginTop: 16,
    marginBottom: 8,
    textAlign: 'center',
  },
  quickActionDescription: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
    textAlign: 'center',
  },
});



================================================
FILE: app/(tabs)/profile.tsx
================================================
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  RefreshControl,
  ActivityIndicator,
  Platform,
  TextInput,
  Alert,
  Linking,
} from 'react-native';
import { supabase } from '@/lib/supabase';
import { authStorage } from '@/lib/storage';
import { Feather } from '@expo/vector-icons';
import { format } from 'date-fns';
import { router } from 'expo-router';

type Profile = {
  username: string;
  phone_number: string | null;
  upi_id: string | null;
  address: string | null;
  bio: string | null;
  role: string;
  vehicle_type?: string | null; // Add vehicle type for drivers
};

type Auction = {
  id: string;
  title: string;
  description: string;
  start_time: string;
  end_time: string;
  status: string;
  winner_id: string | null;
  vehicle_type: string;
};

type Bid = {
  id: string;
  amount: number;
  status: string;
  created_at: string;
  is_winning_bid: boolean;
  auction: Auction | null;
};

type EditableField =
  | 'username'
  | 'phone_number'
  | 'upi_id'
  | 'address'
  | 'bio'
  | 'vehicle_type';

export default function ProfileScreen() {
  const [activeTab, setActiveTab] = useState<
    'profile' | 'auctions' | 'bids' | 'info'
  >('profile');
  const [auctions, setAuctions] = useState<Auction[]>([]);
  const [bids, setBids] = useState<Bid[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [refreshing, setIsRefreshing] = useState(false);
  const [profile, setProfile] = useState<Profile | null>(null);
  const [editingField, setEditingField] = useState<EditableField | null>(null);
  const [tempValues, setTempValues] = useState<Partial<Profile>>({});
  const [error, setError] = useState<string | null>(null);

  // Contact form state
  const [contactForm, setContactForm] = useState({
    name: '',
    email: '',
    message: '',
  });
  const [isSubmittingContact, setIsSubmittingContact] = useState(false);
  const [contactSuccess, setContactSuccess] = useState(false);
  const [contactError, setContactError] = useState<string | null>(null);

  const fetchUserData = async () => {
    try {
      setError(null);
      const {
        data: { user },
      } = await supabase.auth.getUser();

      if (!user) {
        router.replace('/sign-in');
        return;
      }

      // Get user profile
      const { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .single();

      if (profileError) throw profileError;
      setProfile(profileData);
      setTempValues(profileData);

      // Fetch user's auctions if they are a consigner
      if (profileData.role === 'consigner') {
        const { data: auctionsData, error: auctionsError } = await supabase
          .from('auctions')
          .select('*')
          .eq('created_by', user.id)
          .order('created_at', { ascending: false });

        if (auctionsError) throw auctionsError;
        setAuctions(auctionsData || []);
      }

      // Fetch user's bids if they are a driver
      if (profileData.role === 'driver') {
        const { data: bidsData, error: bidsError } = await supabase
          .from('auction_bids')
          .select(
            `
            id,
            amount,
            created_at,
            is_winning_bid,
            auction_id,
            user_id,
            auctions!auction_bids_auction_id_fkey (
              id,
              title,
              description,
              status,
              end_time,
              vehicle_type,
              created_at,
              winner_id
            )
          `
          )
          .eq('user_id', user.id)
          .order('created_at', { ascending: false });

        if (bidsError) {
          console.error('Error fetching bids:', bidsError);
          throw bidsError;
        }

        // Transform the data to match our expected structure
        const transformedBids = (bidsData || []).map((bid) => ({
          id: bid.id,
          amount: bid.amount,
          created_at: bid.created_at,
          is_winning_bid: bid.is_winning_bid,
          auction: bid.auctions
            ? {
                id: bid.auctions.id,
                title: bid.auctions.title,
                description: bid.auctions.description,
                status: bid.auctions.status,
                end_time: bid.auctions.end_time,
                vehicle_type: bid.auctions.vehicle_type,
                start_time: bid.auctions.created_at,
                winner_id: bid.auctions.winner_id,
              }
            : null,
        }));

        setBids(transformedBids);
      }
    } catch (error) {
      console.error('Error fetching user data:', error);
      setError('Failed to load profile data. Please try again.');
    } finally {
      setIsLoading(false);
      setIsRefreshing(false);
    }
  };

  useEffect(() => {
    fetchUserData();
  }, []);

  const validatePhoneNumber = (phone: string) => {
    return /^[0-9]{10}$/.test(phone);
  };

  const validateUpiId = (upi: string) => {
    return /^[a-zA-Z0-9._-]+@[a-zA-Z0-9]+$/.test(upi);
  };

  const handleUpdateField = async (field: EditableField) => {
    try {
      const value = tempValues[field];

      if (field === 'phone_number' && value && !validatePhoneNumber(value)) {
        Alert.alert(
          'Invalid Phone Number',
          'Please enter a valid 10-digit phone number'
        );
        return;
      }

      if (field === 'upi_id' && value && !validateUpiId(value)) {
        Alert.alert(
          'Invalid UPI ID',
          'Please enter a valid UPI ID (e.g., username@bank)'
        );
        return;
      }

      const {
        data: { user },
      } = await supabase.auth.getUser();

      if (!user) {
        router.replace('/sign-in');
        return;
      }

      // Check username uniqueness if updating username
      if (field === 'username' && value) {
        const { data: existingUser, error: checkError } = await supabase
          .from('profiles')
          .select('id')
          .eq('username', value)
          .neq('id', user.id)
          .maybeSingle();

        if (checkError && checkError.code !== 'PGRST116') {
          // PGRST116 means no rows returned
          throw checkError;
        }

        if (existingUser) {
          Alert.alert(
            'Username Taken',
            'This username is already in use. Please choose a different one.'
          );
          return;
        }
      }

      const { error } = await supabase
        .from('profiles')
        .update({ [field]: value })
        .eq('id', user.id);

      if (error) throw error;

      setProfile((prev) => (prev ? { ...prev, [field]: value } : null));
      setEditingField(null);
      Alert.alert('Success', `${field.replace('_', ' ')} updated successfully`);
    } catch (error) {
      console.error('Error updating field:', error);
      Alert.alert('Error', `Failed to update ${field.replace('_', ' ')}`);
    }
  };

  const handleSignOut = async () => {
    try {
      // Clear stored session first
      await authStorage.clearAll();

      // Then sign out from Supabase
      const { error } = await supabase.auth.signOut();
      if (error) throw error;

      // Navigation will be handled by the auth state change listener
      console.log(
        'Sign out successful, navigation will be handled automatically'
      );
    } catch (error) {
      console.error('Error signing out:', error);
      Alert.alert('Error', 'Failed to sign out. Please try again.');
    }
  };

  const handleContactSubmit = async () => {
    setContactError(null);
    setContactSuccess(false);

    if (!contactForm.name || !contactForm.email || !contactForm.message) {
      setContactError('Please fill in all fields');
      return;
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(contactForm.email)) {
      setContactError('Please enter a valid email address');
      return;
    }

    setIsSubmittingContact(true);

    try {
      // Simulate API call
      await new Promise((resolve) => setTimeout(resolve, 1000));

      setContactSuccess(true);
      setContactForm({ name: '', email: '', message: '' });
    } catch (err) {
      setContactError('Failed to send message. Please try again.');
    } finally {
      setIsSubmittingContact(false);
    }
  };

  const renderProfileField = (
    label: string,
    field: EditableField,
    icon: React.ReactNode,
    placeholder: string
  ) => {
    const isEditing = editingField === field;
    const value = isEditing ? tempValues[field] : profile?.[field];

    return (
      <View style={styles.profileField}>
        <View style={styles.fieldHeader}>
          {icon}
          <Text style={styles.fieldLabel}>{label}</Text>
        </View>
        {isEditing ? (
          <View style={styles.editContainer}>
            <TextInput
              style={styles.editInput}
              value={value || ''}
              onChangeText={(text) =>
                setTempValues((prev) => ({ ...prev, [field]: text }))
              }
              placeholder={placeholder}
              autoFocus
            />
            <TouchableOpacity
              style={styles.saveButton}
              onPress={() => handleUpdateField(field)}
            >
              <Text style={styles.saveButtonText}>Save</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.cancelButton}
              onPress={() => {
                setEditingField(null);
                setTempValues((prev) => ({
                  ...prev,
                  [field]: profile?.[field],
                }));
              }}
            >
              <Text style={styles.cancelButtonText}>Cancel</Text>
            </TouchableOpacity>
          </View>
        ) : (
          <View style={styles.valueContainer}>
            <Text style={styles.fieldValue}>{value || 'Not set'}</Text>
            <TouchableOpacity
              style={styles.editButton}
              onPress={() => setEditingField(field)}
            >
              <Feather name="edit-2" size={16} color="#007AFF" />
            </TouchableOpacity>
          </View>
        )}
      </View>
    );
  };

  const renderInfoContent = () => (
    <View style={styles.infoContent}>
      {/* About Section */}
      <View style={styles.infoSection}>
        <Text style={styles.infoSectionTitle}>About AiravatL</Text>
        <Text style={styles.infoText}>
          AiravatL is revolutionizing logistics in Guwahati through our
          innovative auction-based delivery platform. We connect businesses and
          individuals with reliable delivery partners, ensuring efficient and
          cost-effective transportation solutions.
        </Text>

        <View style={styles.statsContainer}>
          <View style={styles.statCard}>
            <Feather name="truck" size={32} color="#007AFF" />
            <Text style={styles.statNumber}>2,500+</Text>
            <Text style={styles.statLabel}>Deliveries</Text>
          </View>

          <View style={styles.statCard}>
            <Feather name="users" size={32} color="#34C759" />
            <Text style={styles.statNumber}>500+</Text>
            <Text style={styles.statLabel}>Partners</Text>
          </View>

          <View style={styles.statCard}>
            <Feather name="shield" size={32} color="#5856D6" />
            <Text style={styles.statNumber}>98%</Text>
            <Text style={styles.statLabel}>Success Rate</Text>
          </View>
        </View>
      </View>

      {/* Contact Section */}
      <View style={styles.infoSection}>
        <Text style={styles.infoSectionTitle}>Contact Information</Text>

        <View style={styles.contactCards}>
          <View style={styles.contactCard}>
            <Feather name="mail" size={24} color="#007AFF" />
            <Text style={styles.contactLabel}>Email</Text>
            <Text style={styles.contactValue}>support@airavatl.com</Text>
          </View>

          <View style={styles.contactCard}>
            <Feather name="phone" size={24} color="#34C759" />
            <Text style={styles.contactLabel}>Phone</Text>
            <Text style={styles.contactValue}>+91 709-922-0645</Text>
          </View>

          <View style={styles.contactCard}>
            <Feather name="map-pin" size={24} color="#5856D6" />
            <Text style={styles.contactLabel}>Address</Text>
            <Text style={styles.contactValue}>
              BSP SPARTON PRIVATE LIMITED{'\n'}
              1B, 1st Floor Saroj Estate{'\n'}
              K.C. Patowary Road, Ulubari{'\n'}
              Guwahati 781007
            </Text>
          </View>
        </View>
      </View>

      {/* Contact Form */}
      <View style={styles.infoSection}>
        <Text style={styles.infoSectionTitle}>Send us a message</Text>

        {contactError && (
          <View style={styles.errorContainer}>
            <Text style={styles.errorText}>{contactError}</Text>
          </View>
        )}

        {contactSuccess && (
          <View style={styles.successContainer}>
            <Text style={styles.successText}>
              Message sent successfully! We&apos;ll get back to you soon.
            </Text>
          </View>
        )}

        <View style={styles.inputContainer}>
          <Text style={styles.label}>Name</Text>
          <TextInput
            style={styles.input}
            value={contactForm.name}
            onChangeText={(text) =>
              setContactForm((prev) => ({ ...prev, name: text }))
            }
            placeholder="Enter your name"
            placeholderTextColor="#6C757D"
          />
        </View>

        <View style={styles.inputContainer}>
          <Text style={styles.label}>Email</Text>
          <TextInput
            style={styles.input}
            value={contactForm.email}
            onChangeText={(text) =>
              setContactForm((prev) => ({ ...prev, email: text }))
            }
            placeholder="Enter your email"
            placeholderTextColor="#6C757D"
            keyboardType="email-address"
            autoCapitalize="none"
          />
        </View>

        <View style={styles.inputContainer}>
          <Text style={styles.label}>Message</Text>
          <TextInput
            style={styles.textArea}
            value={contactForm.message}
            onChangeText={(text) =>
              setContactForm((prev) => ({ ...prev, message: text }))
            }
            placeholder="Enter your message"
            placeholderTextColor="#6C757D"
            multiline
            numberOfLines={4}
            textAlignVertical="top"
          />
        </View>

        <TouchableOpacity
          style={[
            styles.submitButton,
            isSubmittingContact && styles.submitButtonDisabled,
          ]}
          onPress={handleContactSubmit}
          disabled={isSubmittingContact}
        >
          {isSubmittingContact ? (
            <ActivityIndicator color="#FFFFFF" />
          ) : (
            <Text style={styles.submitButtonText}>Send Message</Text>
          )}
        </TouchableOpacity>
      </View>

      {/* Privacy Policy */}
      <View style={styles.infoSection}>
        <Text style={styles.infoSectionTitle}>Privacy Policy</Text>
        <Text style={styles.infoText}>
          We collect information that you provide directly to us, including
          name, contact information, account credentials, and transaction data.
          We use this information to provide and maintain our services, process
          transactions, and improve our platform.
        </Text>
        <Text style={styles.infoText}>
          We do not sell your personal information. We implement appropriate
          security measures to protect your data from unauthorized access,
          disclosure, alteration, and destruction.
        </Text>
        <Text style={styles.lastUpdated}>Last updated: May 24, 2025</Text>
      </View>
    </View>
  );

  if (isLoading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#007AFF" />
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>{error}</Text>
        <TouchableOpacity
          style={styles.retryButton}
          onPress={() => {
            setIsLoading(true);
            fetchUserData();
          }}
        >
          <Text style={styles.retryButtonText}>Retry</Text>
        </TouchableOpacity>
      </View>
    );
  }

  const isConsigner = profile?.role === 'consigner';

  return (
    <View style={styles.container}>
      <View style={styles.tabsContainer}>
        <TouchableOpacity
          style={[styles.tab, activeTab === 'profile' && styles.activeTab]}
          onPress={() => setActiveTab('profile')}
        >
          <Feather
            name="edit-2"
            size={20}
            color={activeTab === 'profile' ? '#007AFF' : '#6C757D'}
          />
          <Text
            style={[
              styles.tabText,
              activeTab === 'profile' && styles.activeTabText,
            ]}
          >
            Profile
          </Text>
        </TouchableOpacity>
        {isConsigner ? (
          <TouchableOpacity
            style={[styles.tab, activeTab === 'auctions' && styles.activeTab]}
            onPress={() => setActiveTab('auctions')}
          >
            <Feather
              name="award"
              size={20}
              color={activeTab === 'auctions' ? '#007AFF' : '#6C757D'}
            />
            <Text
              style={[
                styles.tabText,
                activeTab === 'auctions' && styles.activeTabText,
              ]}
            >
              Auctions ({auctions.length})
            </Text>
          </TouchableOpacity>
        ) : (
          <TouchableOpacity
            style={[styles.tab, activeTab === 'bids' && styles.activeTab]}
            onPress={() => setActiveTab('bids')}
          >
            <Feather
              name="briefcase"
              size={20}
              color={activeTab === 'bids' ? '#007AFF' : '#6C757D'}
            />
            <Text
              style={[
                styles.tabText,
                activeTab === 'bids' && styles.activeTabText,
              ]}
            >
              My Jobs ({bids.length})
            </Text>
          </TouchableOpacity>
        )}
        <TouchableOpacity
          style={[styles.tab, activeTab === 'info' && styles.activeTab]}
          onPress={() => setActiveTab('info')}
        >
          <Feather
            name="info"
            size={20}
            color={activeTab === 'info' ? '#007AFF' : '#6C757D'}
          />
          <Text
            style={[
              styles.tabText,
              activeTab === 'info' && styles.activeTabText,
            ]}
          >
            Info
          </Text>
        </TouchableOpacity>
      </View>

      <ScrollView
        style={styles.content}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={fetchUserData} />
        }
      >
        {activeTab === 'profile' ? (
          <View style={styles.profileContent}>
            {renderProfileField(
              'Username',
              'username',
              <Feather name="at-sign" size={20} color="#6C757D" />,
              'Enter username'
            )}
            {renderProfileField(
              'Phone Number',
              'phone_number',
              <Feather name="phone" size={20} color="#6C757D" />,
              'Enter 10-digit phone number'
            )}
            {renderProfileField(
              'UPI ID',
              'upi_id',
              <Feather name="credit-card" size={20} color="#6C757D" />,
              'Enter UPI ID (e.g., username@bank)'
            )}
            {renderProfileField(
              'Address',
              'address',
              <Feather name="home" size={20} color="#6C757D" />,
              'Enter your address'
            )}
            {renderProfileField(
              'Bio',
              'bio',
              <Feather name="edit-2" size={20} color="#6C757D" />,
              'Tell us about yourself'
            )}

            <TouchableOpacity
              style={styles.signOutButton}
              onPress={handleSignOut}
            >
              <Feather name="log-out" size={20} color="#FFFFFF" />
              <Text style={styles.signOutButtonText}>Sign Out</Text>
            </TouchableOpacity>
          </View>
        ) : activeTab === 'auctions' && isConsigner ? (
          auctions.length > 0 ? (
            auctions.map((auction) => (
              <TouchableOpacity
                key={auction.id}
                style={styles.card}
                onPress={() => router.push(`/auctions/${auction.id}`)}
              >
                <View style={styles.cardHeader}>
                  <Text style={styles.cardTitle}>{auction.title}</Text>
                  <View
                    style={[
                      styles.statusBadge,
                      {
                        backgroundColor:
                          auction.status === 'active' ? '#28A745' : '#6C757D',
                      },
                    ]}
                  >
                    <Text style={styles.statusText}>
                      {auction.status.charAt(0).toUpperCase() +
                        auction.status.slice(1)}
                    </Text>
                  </View>
                </View>

                <Text style={styles.description} numberOfLines={2}>
                  {auction.description}
                </Text>

                <View style={styles.cardFooter}>
                  <View style={styles.timeInfo}>
                    <Feather name="clock" size={16} color="#6C757D" />
                    <Text style={styles.timeText}>
                      {format(new Date(auction.end_time), 'MMM d, h:mm a')}
                    </Text>
                  </View>
                </View>
              </TouchableOpacity>
            ))
          ) : (
            <View style={styles.emptyState}>
              <Feather name="award" size={48} color="#6C757D" />
              <Text style={styles.emptyStateTitle}>No Auctions Yet</Text>
              <Text style={styles.emptyStateText}>
                Create your first auction to get started
              </Text>
            </View>
          )
        ) : activeTab === 'bids' ? (
          bids.length > 0 ? (
            bids.map(
              (bid) =>
                bid.auction && (
                  <TouchableOpacity
                    key={bid.id}
                    style={styles.card}
                    onPress={() => router.push(`/auctions/${bid.auction.id}`)}
                  >
                    <View style={styles.cardHeader}>
                      <Text style={styles.cardTitle}>{bid.auction.title}</Text>
                      {bid.is_winning_bid && (
                        <View style={styles.winnerBadge}>
                          <Feather name="award" size={16} color="#FFD700" />
                          <Text style={styles.winnerText}>Winner</Text>
                        </View>
                      )}
                    </View>

                    <View style={styles.bidDetails}>
                      <View style={styles.bidAmount}>
                        <Feather name="credit-card" size={16} color="#28A745" />
                        <Text style={styles.bidAmountText}>₹{bid.amount}</Text>
                      </View>
                      <Text style={styles.bidTime}>
                        {format(new Date(bid.created_at), 'MMM d, h:mm a')}
                      </Text>
                    </View>

                    <View style={styles.auctionStatus}>
                      <Feather name="clock" size={16} color="#6C757D" />
                      <Text style={styles.statusText}>
                        {bid.auction.status.charAt(0).toUpperCase() +
                          bid.auction.status.slice(1)}
                      </Text>
                    </View>
                  </TouchableOpacity>
                )
            )
          ) : (
            <View style={styles.emptyState}>
              <Feather name="briefcase" size={48} color="#6C757D" />
              <Text style={styles.emptyStateTitle}>No Jobs Yet</Text>
              <Text style={styles.emptyStateText}>
                Start bidding on available auctions to get jobs
              </Text>
            </View>
          )
        ) : (
          renderInfoContent()
        )}
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F9FA',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16,
  },
  errorText: {
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#DC3545',
    textAlign: 'center',
    marginBottom: 16,
  },
  retryButton: {
    backgroundColor: '#007AFF',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  retryButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
  },
  tabsContainer: {
    flexDirection: 'row',
    padding: 16,
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E5E5',
  },
  tab: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    marginHorizontal: 4,
    borderRadius: 8,
    backgroundColor: '#F8F9FA',
  },
  activeTab: {
    backgroundColor: '#E1F0FF',
  },
  tabText: {
    marginLeft: 8,
    fontSize: 14,
    fontFamily: 'Inter_600SemiBold',
    color: '#6C757D',
  },
  activeTabText: {
    color: '#007AFF',
  },
  content: {
    flex: 1,
    padding: 16,
  },
  profileContent: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    ...Platform.select({
      web: {
        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
      },
      default: {
        elevation: 2,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
      },
    }),
  },
  profileField: {
    marginBottom: 16,
  },
  fieldHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  fieldLabel: {
    marginLeft: 8,
    fontSize: 14,
    fontFamily: 'Inter_600SemiBold',
    color: '#6C757D',
  },
  valueContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: '#F8F9FA',
    padding: 12,
    borderRadius: 8,
  },
  fieldValue: {
    flex: 1,
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
  },
  editButton: {
    padding: 8,
  },
  editContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  editInput: {
    flex: 1,
    backgroundColor: '#F8F9FA',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
    borderWidth: 1,
    borderColor: '#E5E5E5',
  },
  saveButton: {
    backgroundColor: '#28A745',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 8,
  },
  saveButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontFamily: 'Inter_600SemiBold',
  },
  cancelButton: {
    backgroundColor: '#DC3545',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 8,
  },
  cancelButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontFamily: 'Inter_600SemiBold',
  },
  signOutButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#DC3545',
    padding: 16,
    borderRadius: 12,
    marginTop: 24,
  },
  signOutButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    marginLeft: 8,
  },
  card: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    ...Platform.select({
      web: {
        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
      },
      default: {
        elevation: 2,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
      },
    }),
  },
  cardHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  cardTitle: {
    fontSize: 18,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    flex: 1,
    marginRight: 8,
  },
  statusBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  statusText: {
    fontSize: 12,
    fontFamily: 'Inter_600SemiBold',
    color: '#FFFFFF',
  },
  description: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
    marginBottom: 12,
  },
  cardFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  timeInfo: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  timeText: {
    marginLeft: 4,
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
  },
  winnerBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFF8E5',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  winnerText: {
    marginLeft: 4,
    fontSize: 12,
    fontFamily: 'Inter_600SemiBold',
    color: '#FFB100',
  },
  bidDetails: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  bidAmount: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  bidAmountText: {
    marginLeft: 4,
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#28A745',
  },
  bidTime: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
  },
  auctionStatus: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  emptyState: {
    alignItems: 'center',
    justifyContent: 'center',
    padding: 32,
  },
  emptyStateTitle: {
    fontSize: 20,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginTop: 16,
    marginBottom: 8,
  },
  emptyStateText: {
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
    textAlign: 'center',
  },
  // Info section styles
  infoContent: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    ...Platform.select({
      web: {
        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
      },
      default: {
        elevation: 2,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
      },
    }),
  },
  infoSection: {
    marginBottom: 32,
  },
  infoSectionTitle: {
    fontSize: 20,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginBottom: 16,
  },
  infoText: {
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
    lineHeight: 24,
    marginBottom: 16,
  },
  statsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 16,
  },
  statCard: {
    flex: 1,
    alignItems: 'center',
    backgroundColor: '#F8F9FA',
    padding: 16,
    borderRadius: 12,
    marginHorizontal: 4,
  },
  statNumber: {
    fontSize: 20,
    fontFamily: 'Inter_700Bold',
    color: '#1C1C1E',
    marginTop: 8,
  },
  statLabel: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
    marginTop: 4,
  },
  contactCards: {
    gap: 16,
  },
  contactCard: {
    backgroundColor: '#F8F9FA',
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
  },
  contactLabel: {
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginTop: 8,
    marginBottom: 4,
  },
  contactValue: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
    textAlign: 'center',
  },
  inputContainer: {
    marginBottom: 16,
  },
  label: {
    fontSize: 14,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginBottom: 8,
  },
  input: {
    backgroundColor: '#F8F9FA',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
    borderWidth: 1,
    borderColor: '#E5E5E5',
    ...(Platform.OS === 'web' && { outlineStyle: 'none' as any }),
  },
  textArea: {
    backgroundColor: '#F8F9FA',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
    borderWidth: 1,
    borderColor: '#E5E5E5',
    height: 120,
    textAlignVertical: 'top',
    ...(Platform.OS === 'web' && { outlineStyle: 'none' as any }),
  },
  submitButton: {
    backgroundColor: '#007AFF',
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 8,
  },
  submitButtonDisabled: {
    opacity: 0.7,
  },
  submitButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
  },
  successContainer: {
    backgroundColor: '#D1FAE5',
    padding: 12,
    borderRadius: 8,
    marginBottom: 16,
  },
  successText: {
    color: '#059669',
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
  },
  lastUpdated: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
    marginTop: 24,
    textAlign: 'center',
  },
});



================================================
FILE: app/(tabs)/auctions/[id].tsx
================================================
import React, { useState, useEffect, useCallback } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  ScrollView,
  Alert,
  ActivityIndicator,
  Platform,
  RefreshControl,
  Linking,
  Modal,
} from 'react-native';
import { useLocalSearchParams, router } from 'expo-router';
import { Feather } from '@expo/vector-icons';
import { supabase } from '@/lib/supabase';
import { formatDistanceToNow, isPast } from 'date-fns';

interface Auction {
  id: string;
  title: string;
  description: string;
  start_time: string;
  end_time: string;
  status: string;
  winner_id: string | null;
  winning_bid_id: string | null;
  created_at: string | null;
  created_by: string;
  vehicle_type: string;
  consignment_date: string;
  winner?: {
    username: string;
  } | null;
}

interface Bid {
  id: string;
  auction_id: string;
  user_id: string;
  amount: number;
  created_at: string | null;
  is_winning_bid: boolean | null;
  bidder?: any;
}

interface User {
  id: string;
  email?: string;
  username?: string;
  phone_number?: string | null;
}

const AuctionDetailsScreen = () => {
  const [refreshing, setRefreshing] = useState(false);
  const [auction, setAuction] = useState<Auction | null>(null);
  const [bids, setBids] = useState<Bid[]>([]);
  const [bidAmount, setBidAmount] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const [userRole, setUserRole] = useState<string | null>(null);
  const [contactInfo, setContactInfo] = useState<{
    username: string;
    phone_number: string | null;
  } | null>(null);
  const [showCancelModal, setShowCancelModal] = useState(false);
  const [isCancelling, setIsCancelling] = useState(false);
  const [showCancelBidModal, setShowCancelBidModal] = useState(false);
  const [isCancellingBid, setIsCancellingBid] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [userBid, setUserBid] = useState<Bid | null>(null);
  const [auctionHasBids, setAuctionHasBids] = useState(false);
  const [checkingBids, setCheckingBids] = useState(false);
  const params = useLocalSearchParams();

  useEffect(() => {
    const fetchUser = async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      if (user) {
        setCurrentUser(user);

        // Get user role
        const { data: profile } = await supabase
          .from('profiles')
          .select('role')
          .eq('id', user.id)
          .single();

        if (profile) {
          setUserRole(profile.role);
        }
      }
    };
    fetchUser();
  }, []);

  const fetchContactInfo = useCallback(
    async (auctionData: Auction) => {
      if (
        !auctionData ||
        auctionData.status !== 'completed' ||
        !auctionData.winner_id ||
        !currentUser
      ) {
        return;
      }

      try {
        let contactUserId = null;

        // Determine whose contact info to fetch based on user role
        if (
          userRole === 'consigner' &&
          auctionData.created_by === currentUser.id
        ) {
          // Consigner viewing their auction - show winner's contact info
          contactUserId = auctionData.winner_id;
        } else if (
          userRole === 'driver' &&
          auctionData.winner_id === currentUser.id
        ) {
          // Winner driver viewing auction - show consigner's contact info
          contactUserId = auctionData.created_by;
        }

        if (contactUserId) {
          const { data: contactData, error: contactError } = await supabase
            .from('profiles')
            .select('username, phone_number')
            .eq('id', contactUserId)
            .single();

          if (contactError) {
            console.error('Error fetching contact info:', contactError);
          } else {
            setContactInfo(contactData);
          }
        }
      } catch (err) {
        console.error('Error fetching contact info:', err);
      }
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [] // currentUser and userRole are stable during component lifecycle
  );

  const fetchAuctionDetails = useCallback(async () => {
    try {
      if (!params.id) {
        setError('Auction ID is missing');
        return;
      }

      // Fetch auction details directly from Supabase
      const { data: auctionData, error: auctionError } = await supabase
        .from('auctions')
        .select('*')
        .eq('id', String(params.id))
        .single();

      if (auctionError || !auctionData) {
        setError('Auction not found');
        setAuction(null);
        setBids([]);
        return;
      }

      // Fetch bids for this auction
      const { data: bidsData, error: bidsError } = await supabase
        .from('auction_bids')
        .select(
          `
          id,
          amount,
          created_at,
          is_winning_bid,
          user_id,
          auction_id,
          profiles!auction_bids_user_id_fkey (
            id,
            username
          )
        `
        )
        .eq('auction_id', String(params.id))
        .order('amount', { ascending: true });

      if (bidsError) {
        console.error('Error fetching bids:', bidsError);
        setBids([]);
      } else {
        // Convert to expected Bid format
        const convertedBids: Bid[] = (bidsData || []).map((bid) => ({
          id: bid.id,
          auction_id: bid.auction_id,
          user_id: bid.user_id,
          amount: bid.amount,
          created_at: bid.created_at,
          is_winning_bid: bid.is_winning_bid,
          bidder: { username: (bid.profiles as any)?.username || 'Anonymous' },
        }));
        setBids(convertedBids);
      }

      // Set auction data
      const convertedAuction: Auction = {
        id: auctionData.id,
        title: auctionData.title,
        description: auctionData.description,
        start_time: auctionData.start_time,
        end_time: auctionData.end_time,
        status: auctionData.status,
        created_by: auctionData.created_by,
        vehicle_type: auctionData.vehicle_type,
        consignment_date: auctionData.consignment_date,
        created_at: auctionData.start_time,
        winner_id: auctionData.winner_id,
        winning_bid_id: null,
        winner: auctionData.winner_id ? { username: 'Winner' } : null,
      };

      setAuction(convertedAuction);

      // Find user's bid if exists
      if (currentUser && bidsData) {
        const userBidData = bidsData.find(
          (bid) => bid.user_id === currentUser.id
        );
        if (userBidData) {
          setUserBid({
            id: userBidData.id,
            auction_id: userBidData.auction_id,
            user_id: userBidData.user_id,
            amount: userBidData.amount,
            created_at: userBidData.created_at,
            is_winning_bid: userBidData.is_winning_bid,
            bidder: {
              username: (userBidData.profiles as any)?.username || 'Anonymous',
            },
          });
        } else {
          setUserBid(null);
        }
      }

      // Fetch contact info for completed auctions
      await fetchContactInfo(convertedAuction);
      setError(null);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : 'Failed to load auction details'
      );
    } finally {
      setIsLoading(false);
      setRefreshing(false);
    }
  }, [params.id, fetchContactInfo, currentUser]);

  // Check if auction has bids
  const checkAuctionHasBids = useCallback(async () => {
    if (!auction?.id) return false;

    try {
      setCheckingBids(true);
      const { data: bids, error } = await supabase
        .from('auction_bids')
        .select('id')
        .eq('auction_id', auction.id)
        .limit(1);

      if (error) {
        console.error('Error checking bids:', error);
        return false;
      }

      const hasBids = bids && bids.length > 0;
      setAuctionHasBids(hasBids);
      return hasBids;
    } catch (error) {
      console.error('Error checking auction bids:', error);
      return false;
    } finally {
      setCheckingBids(false);
    }
  }, [auction?.id]);

  // Check for bids when auction data is loaded
  useEffect(() => {
    if (auction?.id && currentUser && auction.created_by === currentUser.id) {
      checkAuctionHasBids();
    }
  }, [auction?.id, auction?.created_by, currentUser, checkAuctionHasBids]);

  useEffect(() => {
    fetchAuctionDetails();

    // Reduced polling frequency to prevent performance issues
    // TODO: Replace with WebSocket/Realtime subscriptions
    const interval = setInterval(() => {
      if (auction?.status === 'active') {
        fetchAuctionDetails(); // Just refetch data, no expensive operations
      }
    }, 300000); // Increased to 5 minutes to reduce performance impact

    return () => clearInterval(interval);
  }, [fetchAuctionDetails, auction?.status]);

  const handleCancelAuction = async () => {
    try {
      if (!currentUser || !auction) return;

      setIsCancelling(true);

      // Call the auction cancellation function
      const { error } = await (supabase as any).rpc(
        'cancel_auction_by_consigner',
        {
          p_auction_id: String(params.id),
          p_user_id: currentUser.id,
        }
      );

      if (error) throw error;

      // Close the modal and refresh data
      setShowCancelModal(false);
      await fetchAuctionDetails();

      Alert.alert('Success', 'Auction cancelled successfully');
    } catch {
      Alert.alert('Error', 'Failed to cancel auction. Please try again.');
    } finally {
      setIsCancelling(false);
    }
  };

  const handleCancelBid = async () => {
    try {
      if (!currentUser || !userBid) return;

      setIsCancellingBid(true);

      const { error } = await (supabase as any).rpc('cancel_bid_by_driver', {
        p_bid_id: userBid.id,
        p_user_id: currentUser.id,
      });

      if (error) throw error;

      // Close the modal and refresh data
      setShowCancelBidModal(false);
      await fetchAuctionDetails();

      Alert.alert('Success', 'Your bid has been cancelled successfully');
    } catch {
      Alert.alert('Error', 'Failed to cancel bid. Please try again.');
    } finally {
      setIsCancellingBid(false);
    }
  };

  const handleSubmitBid = async () => {
    if (!auction || !bidAmount || !currentUser) return;
    try {
      setIsSubmitting(true);
      const amount = parseFloat(bidAmount);
      if (isNaN(amount) || amount <= 0) {
        Alert.alert('Invalid bid amount');
        return;
      }

      // Check if auction is still active before placing bid
      if (auction.status !== 'active' || isPast(new Date(auction.end_time))) {
        Alert.alert('Error', 'This auction has ended');
        await fetchAuctionDetails();
        return;
      }

      // Use direct Supabase call for bid creation
      const { error: bidError } = await supabase
        .from('auction_bids')
        .insert({
          auction_id: auction.id,
          user_id: currentUser.id,
          amount: amount,
        })
        .select()
        .single();

      if (bidError) {
        throw new Error(bidError.message || 'Failed to place bid');
      }

      // Send notifications in background (non-blocking)
      setTimeout(async () => {
        try {
          const { auctionNotificationService } = await import(
            '@/lib/notifications/auctionNotifications'
          );

          // Get previous bidders who are now outbid (since lower bids win in this auction format)
          // Anyone who bid higher than the new bid amount is now outbid
          const outbidUsers = bids.filter(
            (bid) => bid.user_id !== currentUser.id && bid.amount > amount
          );

          // Notify auction creator about new bid
          if (auction.created_by !== currentUser.id) {
            await auctionNotificationService.notifyNewBid(
              auction.id,
              auction.created_by,
              auction.title,
              amount
            );
          }

          // Notify outbid users
          for (const bid of outbidUsers) {
            await auctionNotificationService.notifyOutbid(
              auction.id,
              bid.user_id,
              auction.title,
              amount
            );
          }
        } catch {
          // Silently handle notification errors in production
        }
      }, 100);

      setBidAmount('');
      await fetchAuctionDetails();
    } catch {
      Alert.alert('Error', 'Failed to place bid');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleCallContact = () => {
    if (contactInfo?.phone_number) {
      const phoneUrl = `tel:${contactInfo.phone_number}`;
      Linking.openURL(phoneUrl).catch((err) => {
        console.error('Error opening phone app:', err);
        Alert.alert('Error', 'Unable to open phone app');
      });
    }
  };

  const renderCancelBidButton = () => {
    // Only show cancel bid button for drivers who have placed a bid on an active auction
    if (
      !auction ||
      !userBid ||
      userRole !== 'driver' ||
      auction.status !== 'active' ||
      isPast(new Date(auction.end_time)) ||
      userBid.is_winning_bid
    ) {
      return null;
    }

    return (
      <TouchableOpacity
        style={styles.cancelBidButton}
        onPress={() => setShowCancelBidModal(true)}
      >
        <Feather name="x-circle" size={20} color="#FFFFFF" />
        <Text style={styles.cancelBidButtonText}>Cancel My Bid</Text>
      </TouchableOpacity>
    );
  };

  const renderContactInfo = () => {
    if (
      !contactInfo ||
      auction?.status !== 'completed' ||
      !auction?.winner_id
    ) {
      return null;
    }

    // Only show contact info to consigner (for winner) or winner (for consigner)
    const shouldShowContact =
      (userRole === 'consigner' && auction.created_by === currentUser?.id) ||
      (userRole === 'driver' && auction.winner_id === currentUser?.id);

    if (!shouldShowContact) {
      return null;
    }

    const contactTitle =
      userRole === 'consigner' ? 'Winner Contact' : 'Consigner Contact';

    return (
      <View style={styles.contactSection}>
        <Text style={styles.contactTitle}>{contactTitle}</Text>
        <View style={styles.contactCard}>
          <View style={styles.contactInfo}>
            <View style={styles.contactRow}>
              <Feather name="user" size={20} color="#007AFF" />
              <Text style={styles.contactName}>{contactInfo.username}</Text>
            </View>
            {contactInfo.phone_number && (
              <View style={styles.contactRow}>
                <Feather name="phone" size={20} color="#007AFF" />
                <Text style={styles.contactPhone}>
                  {contactInfo.phone_number}
                </Text>
              </View>
            )}
          </View>
          {contactInfo.phone_number && (
            <TouchableOpacity
              style={styles.callButton}
              onPress={handleCallContact}
            >
              <Feather name="phone" size={20} color="#FFFFFF" />
              <Text style={styles.callButtonText}>Call</Text>
            </TouchableOpacity>
          )}
        </View>
        {!contactInfo.phone_number && (
          <Text style={styles.noPhoneText}>Phone number not available</Text>
        )}
      </View>
    );
  };

  const renderAuctionStatus = () => {
    if (!auction) return null;

    let statusColor = '#6C757D';
    let statusText = 'Unknown';

    if (auction.status === 'active') {
      // Check if auction should be expired
      if (isPast(new Date(auction.end_time))) {
        statusColor = '#DC3545';
        statusText = 'Expired';
      } else {
        statusColor = '#28A745';
        statusText = 'Active';
      }
    } else if (auction.status === 'completed') {
      statusColor = '#007AFF';
      statusText = 'Completed';
    } else if (auction.status === 'cancelled') {
      statusColor = '#DC3545';
      statusText = 'Cancelled';
    }

    return (
      <View style={[styles.statusBadge, { backgroundColor: statusColor }]}>
        <Text style={styles.statusText}>{statusText}</Text>
      </View>
    );
  };

  const renderBidsList = () => {
    if (!bids.length) {
      return (
        <View style={styles.noBidsContainer}>
          <Text style={styles.noBidsText}>No bids yet</Text>
        </View>
      );
    }

    return (
      <View style={styles.bidsContainer}>
        <Text style={styles.bidsTitle}>Bids ({bids.length})</Text>
        {bids.map((bid) => (
          <View key={bid.id} style={styles.bidItem}>
            <View style={styles.bidderInfo}>
              <Text style={styles.bidderName}>
                {bid.bidder?.username || 'Anonymous'}
              </Text>
              <Text style={styles.bidAmount}>₹{bid.amount}</Text>
            </View>
            {bid.is_winning_bid && (
              <View style={styles.winningBadge}>
                <Feather name="award" size={16} color="#FFD700" />
                <Text style={styles.winningText}>Winner</Text>
              </View>
            )}
          </View>
        ))}
      </View>
    );
  };

  const renderWinnerSection = () => {
    if (!auction || auction.status === 'active') return null;
    const winningBid = bids.find((bid) => bid.is_winning_bid);
    if (!winningBid || !auction.winner) {
      return (
        <View style={styles.noWinnerSection}>
          <Text>No winning bid was found</Text>
        </View>
      );
    }
    return (
      <View style={styles.winnerSection}>
        <View style={styles.winnerHeader}>
          <Feather name="award" size={24} color="#FFD700" />
          <Text style={styles.winnerTitle}>Auction Winner</Text>
        </View>
        <View style={styles.winnerCard}>
          <Text style={styles.winnerName}>
            {auction.winner.username || 'Unknown Winner'}
          </Text>
          <View style={styles.winningBidAmount}>
            <Text style={styles.winningBidText}>₹{winningBid.amount}</Text>
          </View>
        </View>
      </View>
    );
  };

  const renderTimeInfo = () => {
    if (!auction) return null;

    const endTime = new Date(auction.end_time);
    const isExpired = isPast(endTime);

    if (auction.status === 'active') {
      if (isExpired) {
        return (
          <View style={styles.timeWarning}>
            <Feather name="clock" size={16} color="#DC3545" />
            <Text style={[styles.timeText, { color: '#DC3545' }]}>
              Auction has expired - closing soon
            </Text>
          </View>
        );
      } else {
        return (
          <View style={styles.timeInfo}>
            <Feather name="clock" size={16} color="#6C757D" />
            <Text style={styles.timeText}>
              Ends {formatDistanceToNow(endTime, { addSuffix: true })}
            </Text>
          </View>
        );
      }
    } else {
      return (
        <View style={styles.timeInfo}>
          <Feather name="clock" size={16} color="#6C757D" />
          <Text style={styles.timeText}>
            Ended {formatDistanceToNow(endTime, { addSuffix: true })}
          </Text>
        </View>
      );
    }
  };

  if (isLoading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#007AFF" />
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>{error}</Text>
        <TouchableOpacity
          style={styles.retryButton}
          onPress={fetchAuctionDetails}
        >
          <Text style={styles.retryButtonText}>Retry</Text>
        </TouchableOpacity>
      </View>
    );
  }

  if (!auction) return <Text>Auction not found</Text>;

  const canBid =
    auction.status === 'active' && !isPast(new Date(auction.end_time));

  return (
    <ScrollView
      style={styles.container}
      refreshControl={
        <RefreshControl
          refreshing={refreshing}
          onRefresh={() => {
            setRefreshing(true);
            fetchAuctionDetails();
          }}
        />
      }
    >
      <View style={styles.header}>
        <Text style={styles.title}>{auction.title}</Text>
        {renderAuctionStatus()}
      </View>

      <View style={styles.descriptionContainer}>
        <Text style={styles.description}>{auction.description}</Text>
      </View>

      <View style={styles.statsContainer}>
        <View style={styles.statItem}>
          <Feather name="users" size={16} color="#6C757D" />
          <Text style={styles.statText}>{bids.length} bids</Text>
        </View>
        {renderTimeInfo()}
      </View>

      {/* Debug info for action buttons */}
      {auction && currentUser && (
        <Text style={{ padding: 10, fontSize: 12, color: 'gray' }}>
          Debug: Owner: {auction.created_by === currentUser.id ? 'Yes' : 'No'},
          Status: {auction.status}, Future start:{' '}
          {new Date(auction.start_time) > new Date() ? 'Yes' : 'No'}
        </Text>
      )}

      {/* Action buttons for auction owner */}
      {auction &&
        currentUser &&
        auction.created_by === currentUser.id &&
        auction.status === 'active' && (
          <View style={styles.actionButtonsContainer}>
            {!isPast(new Date(auction.end_time)) && (
              <TouchableOpacity
                style={[
                  styles.editButton,
                  (checkingBids || auctionHasBids) && styles.editButtonDisabled,
                ]}
                onPress={async () => {
                  // Check for bids before allowing edit (real-time check)
                  const hasBids = await checkAuctionHasBids();
                  if (hasBids) {
                    Alert.alert(
                      'Cannot Edit Auction',
                      'This auction cannot be edited because it already has bids from drivers. You can cancel the auction instead.',
                      [
                        { text: 'OK', style: 'default' },
                        {
                          text: 'Cancel Auction',
                          style: 'destructive',
                          onPress: () => setShowCancelModal(true),
                        },
                      ]
                    );
                  } else {
                    setShowEditModal(true);
                  }
                }}
                disabled={checkingBids}
              >
                {checkingBids ? (
                  <ActivityIndicator size="small" color="#007AFF" />
                ) : auctionHasBids ? (
                  <Feather name="lock" size={20} color="#6C757D" />
                ) : (
                  <Feather name="edit-2" size={20} color="#007AFF" />
                )}
                <Text
                  style={[
                    styles.editButtonText,
                    auctionHasBids && { color: '#6C757D' },
                  ]}
                >
                  {checkingBids
                    ? 'Checking...'
                    : auctionHasBids
                    ? 'Cannot Edit (Has Bids)'
                    : 'Edit Auction'}
                </Text>
              </TouchableOpacity>
            )}
            {!isPast(new Date(auction.end_time)) && (
              <TouchableOpacity
                style={styles.actionCancelButton}
                onPress={() => setShowCancelModal(true)}
              >
                <Feather name="x-circle" size={20} color="#FFFFFF" />
                <Text style={styles.actionCancelButtonText}>
                  Cancel Auction
                </Text>
              </TouchableOpacity>
            )}
          </View>
        )}

      {renderCancelBidButton()}
      {renderWinnerSection()}
      {renderContactInfo()}
      {renderBidsList()}

      {canBid && userRole === 'driver' && !userBid && (
        <View style={styles.bidSection}>
          <Text style={styles.bidSectionTitle}>Place Your Bid</Text>
          <View style={styles.bidInputContainer}>
            <TextInput
              style={styles.bidInput}
              value={bidAmount}
              onChangeText={setBidAmount}
              keyboardType="numeric"
              placeholder="Enter bid amount"
              placeholderTextColor="#6C757D"
              editable={!isSubmitting}
            />
            <TouchableOpacity
              style={[
                styles.bidButton,
                isSubmitting && styles.bidButtonDisabled,
              ]}
              onPress={handleSubmitBid}
              disabled={isSubmitting}
            >
              {isSubmitting ? (
                <ActivityIndicator color="#fff" />
              ) : (
                <>
                  <Text style={styles.bidButtonText}>Place Bid</Text>
                  <Feather name="arrow-right" size={20} color="#fff" />
                </>
              )}
            </TouchableOpacity>
          </View>
        </View>
      )}

      {userBid && canBid && (
        <View style={styles.currentBidSection}>
          <Text style={styles.currentBidTitle}>Your Current Bid</Text>
          <View style={styles.currentBidCard}>
            <Text style={styles.currentBidAmount}>₹{userBid.amount}</Text>
            <Text style={styles.currentBidStatus}>
              {userBid.is_winning_bid ? 'Winning Bid' : 'Active Bid'}
            </Text>
          </View>
        </View>
      )}

      {!canBid && auction.status === 'active' && (
        <View style={styles.expiredNotice}>
          <Text style={styles.expiredText}>This auction has ended</Text>
        </View>
      )}

      {/* Cancel Auction Modal */}
      <Modal
        visible={showCancelModal}
        transparent={true}
        animationType="fade"
        onRequestClose={() => setShowCancelModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.title}>Cancel Auction</Text>
            <Text style={styles.description}>
              Are you sure you want to cancel this auction? This action cannot
              be undone.
            </Text>
            <View style={styles.modalButtons}>
              <TouchableOpacity
                style={styles.modalCancelButton}
                onPress={() => setShowCancelModal(false)}
              >
                <Text style={styles.modalCancelButtonText}>Keep Auction</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={styles.modalConfirmButton}
                onPress={handleCancelAuction}
                disabled={isCancelling}
              >
                {isCancelling ? (
                  <ActivityIndicator color="#fff" />
                ) : (
                  <Text style={styles.modalConfirmButtonText}>
                    Cancel Auction
                  </Text>
                )}
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      {/* Cancel Bid Modal */}
      <Modal
        visible={showCancelBidModal}
        transparent={true}
        animationType="fade"
        onRequestClose={() => setShowCancelBidModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.title}>Cancel Bid</Text>
            <Text style={styles.description}>
              Are you sure you want to cancel your bid of ₹{userBid?.amount}?
            </Text>
            <View style={styles.modalButtons}>
              <TouchableOpacity
                style={styles.modalCancelButton}
                onPress={() => setShowCancelBidModal(false)}
              >
                <Text style={styles.modalCancelButtonText}>Keep Bid</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={styles.modalConfirmButton}
                onPress={handleCancelBid}
                disabled={isCancellingBid}
              >
                {isCancellingBid ? (
                  <ActivityIndicator color="#fff" />
                ) : (
                  <Text style={styles.modalConfirmButtonText}>Cancel Bid</Text>
                )}
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      {/* Edit Auction Modal */}
      <Modal
        visible={showEditModal}
        transparent={true}
        animationType="fade"
        onRequestClose={() => setShowEditModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.title}>Edit Auction</Text>
            <Text style={styles.description}>
              Navigate to the edit auction screen to make changes to your
              auction details.
            </Text>
            <View style={styles.modalButtons}>
              <TouchableOpacity
                style={styles.modalCancelButton}
                onPress={() => setShowEditModal(false)}
              >
                <Text style={styles.modalCancelButtonText}>Cancel</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={styles.modalConfirmButton}
                onPress={() => {
                  setShowEditModal(false);
                  // Navigate to dedicated edit auction screen
                  router.push({
                    pathname: '/edit-auction',
                    params: {
                      auctionId: auction.id,
                      title: auction.title,
                      description: auction.description,
                      vehicleType: auction.vehicle_type,
                    },
                  });
                }}
              >
                <Text style={styles.modalConfirmButtonText}>Continue</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16,
  },
  errorText: {
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#DC3545',
    textAlign: 'center',
    marginBottom: 16,
  },
  retryButton: {
    backgroundColor: '#007AFF',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  retryButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
  },
  header: {
    padding: 16,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  title: {
    fontSize: 24,
    fontFamily: 'Inter_700Bold',
    color: '#1C1C1E',
    flex: 1,
    marginRight: 16,
  },
  descriptionContainer: {
    padding: 16,
    paddingTop: 0,
  },
  description: {
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
    lineHeight: 24,
  },
  statsContainer: {
    flexDirection: 'row',
    padding: 16,
    borderTopWidth: 1,
    borderBottomWidth: 1,
    borderColor: '#E5E5E5',
    justifyContent: 'space-between',
  },
  statItem: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  statText: {
    marginLeft: 8,
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
  },
  timeInfo: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  timeWarning: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  timeText: {
    marginLeft: 8,
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
  },
  statusBadge: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
  },
  statusText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontFamily: 'Inter_600SemiBold',
  },
  cancelButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#DC3545',
    marginHorizontal: 16,
    marginVertical: 8,
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 8,
  },
  cancelButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    marginLeft: 8,
  },
  cancelBidButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#FF6B35',
    marginHorizontal: 16,
    marginVertical: 8,
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 8,
  },
  cancelBidButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    marginLeft: 8,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16,
  },
  modalContent: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 24,
    width: '100%',
    maxWidth: 400,
    ...Platform.select({
      web: {
        boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',
      },
      default: {
        elevation: 10,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 10 },
        shadowOpacity: 0.2,
        shadowRadius: 25,
      },
    }),
  },
  modalHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
  },
  modalTitle: {
    fontSize: 20,
    fontFamily: 'Inter_700Bold',
    color: '#1C1C1E',
    marginLeft: 12,
  },
  modalMessage: {
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
    lineHeight: 24,
    marginBottom: 16,
  },
  modalWarning: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#DC3545',
    backgroundColor: '#FEE2E2',
    padding: 12,
    borderRadius: 8,
    marginBottom: 24,
  },
  modalButtons: {
    flexDirection: 'row',
    gap: 12,
  },
  modalCancelButton: {
    flex: 1,
    backgroundColor: '#F8F9FA',
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 8,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#E5E5E5',
  },
  modalCancelButtonText: {
    color: '#6C757D',
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
  },
  modalConfirmButton: {
    flex: 1,
    backgroundColor: '#DC3545',
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 8,
    alignItems: 'center',
    flexDirection: 'row',
    justifyContent: 'center',
  },
  modalConfirmButtonDisabled: {
    opacity: 0.7,
  },
  modalConfirmButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    marginLeft: 8,
  },
  contactSection: {
    margin: 16,
    padding: 16,
    backgroundColor: '#F8F9FA',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E5E5',
  },
  contactTitle: {
    fontSize: 18,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginBottom: 12,
  },
  contactCard: {
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderRadius: 8,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    ...Platform.select({
      web: {
        boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
      },
      default: {
        elevation: 1,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 1 },
        shadowOpacity: 0.1,
        shadowRadius: 3,
      },
    }),
  },
  contactInfo: {
    flex: 1,
  },
  contactRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  contactName: {
    marginLeft: 12,
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
  },
  contactPhone: {
    marginLeft: 12,
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#007AFF',
  },
  callButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#007AFF',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 8,
    marginLeft: 12,
  },
  callButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontFamily: 'Inter_600SemiBold',
    marginLeft: 8,
  },
  noPhoneText: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
    fontStyle: 'italic',
    marginTop: 8,
  },
  winnerSection: {
    margin: 16,
    padding: 16,
    backgroundColor: '#F8F9FA',
    borderRadius: 12,
  },
  winnerHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  winnerTitle: {
    marginLeft: 8,
    fontSize: 18,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
  },
  winnerCard: {
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderRadius: 8,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  winnerName: {
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
  },
  winningBidAmount: {
    backgroundColor: '#E8F5E9',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
  },
  winningBidText: {
    color: '#28A745',
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
  },
  noWinnerSection: {
    margin: 16,
    padding: 16,
    backgroundColor: '#F8F9FA',
    borderRadius: 12,
    alignItems: 'center',
  },
  bidsContainer: {
    padding: 16,
  },
  bidsTitle: {
    fontSize: 18,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginBottom: 12,
  },
  bidItem: {
    backgroundColor: '#F8F9FA',
    padding: 12,
    borderRadius: 8,
    marginBottom: 8,
  },
  bidderInfo: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  bidderName: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
  },
  bidAmount: {
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#28A745',
  },
  winningBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFF8E5',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    alignSelf: 'flex-start',
    marginTop: 8,
  },
  winningText: {
    marginLeft: 4,
    fontSize: 12,
    fontFamily: 'Inter_600SemiBold',
    color: '#FFB100',
  },
  noBidsContainer: {
    padding: 16,
    alignItems: 'center',
  },
  noBidsText: {
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
  },
  bidSection: {
    padding: 16,
    backgroundColor: '#F8F9FA',
    borderTopWidth: 1,
    borderColor: '#E5E5E5',
  },
  bidSectionTitle: {
    fontSize: 18,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginBottom: 12,
  },
  bidInputContainer: {
    flexDirection: 'row',
    gap: 12,
  },
  bidInput: {
    flex: 1,
    backgroundColor: '#FFFFFF',
    borderWidth: 1,
    borderColor: '#E5E5E5',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
  },
  bidButton: {
    backgroundColor: '#007AFF',
    borderRadius: 8,
    paddingHorizontal: 16,
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  bidButtonDisabled: {
    opacity: 0.7,
  },
  bidButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
  },
  currentBidSection: {
    margin: 16,
    padding: 16,
    backgroundColor: '#E1F0FF',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#007AFF',
  },
  currentBidTitle: {
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#007AFF',
    marginBottom: 8,
  },
  currentBidCard: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  currentBidAmount: {
    fontSize: 20,
    fontFamily: 'Inter_700Bold',
    color: '#007AFF',
  },
  currentBidStatus: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#007AFF',
  },
  expiredNotice: {
    padding: 16,
    backgroundColor: '#FEE2E2',
    margin: 16,
    borderRadius: 8,
    alignItems: 'center',
  },
  expiredText: {
    color: '#DC2626',
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
  },
  // Action buttons styles
  actionButtonsContainer: {
    flexDirection: 'row',
    padding: 16,
    gap: 12,
  },
  editButton: {
    flex: 1,
    backgroundColor: '#E3F2FD',
    borderRadius: 8,
    paddingVertical: 12,
    paddingHorizontal: 16,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
  },
  editButtonDisabled: {
    opacity: 0.6,
  },
  editButtonText: {
    color: '#007AFF',
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
  },
  actionCancelButton: {
    flex: 1,
    backgroundColor: '#DC3545',
    borderRadius: 8,
    paddingVertical: 12,
    paddingHorizontal: 16,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
  },
  actionCancelButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
  },
});

export default AuctionDetailsScreen;



================================================
FILE: app/(tabs)/auctions/_layout.tsx
================================================
import { Stack, router } from 'expo-router';
import { TouchableOpacity } from 'react-native';
import { Feather } from '@expo/vector-icons';

import { useEffect, useState } from 'react';
import { supabase } from '@/lib/supabase';

type UserRole = 'consigner' | 'driver';

export default function AuctionsLayout() {
  const [userRole, setUserRole] = useState<UserRole | null>(null);

  useEffect(() => {
    async function getUserRole() {
      try {
        const {
          data: { user },
        } = await supabase.auth.getUser();
        if (user) {
          const { data: profile } = await supabase
            .from('profiles')
            .select('role')
            .eq('id', user.id)
            .single();

          if (profile) {
            setUserRole(profile.role as UserRole);
          }
        }
      } catch (error) {
        console.error('Error fetching user role:', error);
      }
    }

    getUserRole();
  }, []);

  return (
    <Stack>
      <Stack.Screen
        name="index"
        options={{
          title: userRole === 'consigner' ? 'My Auctions' : 'Available Jobs',
          headerShown: true,
          headerRight:
            userRole === 'consigner'
              ? () => (
                  <TouchableOpacity
                    onPress={() => router.push('/auctions/create')}
                    style={{ marginRight: 16 }}
                  >
                    <Feather name="plus" size={24} color="#007AFF" />
                  </TouchableOpacity>
                )
              : undefined,
        }}
      />
      <Stack.Screen
        name="[id]"
        options={{
          title: 'Auction Details',
          headerShown: true,
          headerLeft: () => (
            <TouchableOpacity
              onPress={() => router.replace('/auctions')}
              style={{ marginLeft: 16 }}
            >
              <Feather name="arrow-left" size={24} color="#007AFF" />
            </TouchableOpacity>
          ),
        }}
      />
      <Stack.Screen
        name="create"
        options={{
          title: 'Create Auction',
          headerShown: true,
          presentation: 'modal',
        }}
      />
    </Stack>
  );
}



================================================
FILE: app/(tabs)/auctions/create.tsx
================================================
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  Alert,
  ActivityIndicator,
  Platform,
} from 'react-native';
import { router } from 'expo-router';
import { supabase } from '@/lib/supabase';
import { Feather } from '@expo/vector-icons';
import DateTimePicker from '@react-native-community/datetimepicker';
import { format } from 'date-fns';

const DURATION_OPTIONS = [
  { label: '5 minutes', value: 5 },
  { label: '15 minutes', value: 15 },
  { label: '30 minutes', value: 30 },
  { label: '1 hour', value: 60 },
  { label: '2 hours', value: 120 },
  { label: '4 hours', value: 240 },
];

const VEHICLE_TYPES = [
  {
    id: 'three_wheeler',
    title: '3 Wheeler',
    description: 'Capacity: Up to 500 kg',
  },
  {
    id: 'pickup_truck',
    title: 'Pickup Truck',
    description: 'Capacity: Up to 1000 kg',
  },
  {
    id: 'mini_truck',
    title: 'Mini Truck',
    description: 'Capacity: Up to 2000 kg',
  },
  {
    id: 'medium_truck',
    title: 'Medium Truck',
    description: 'Capacity: Up to 5000 kg',
  },
  {
    id: 'large_truck',
    title: 'Large Truck',
    description: 'Capacity: Over 5000 kg',
  },
];

export default function CreateAuctionScreen() {
  const [from, setFrom] = useState('');
  const [to, setTo] = useState('');
  const [description, setDescription] = useState('');
  const [weight, setWeight] = useState('');
  const [vehicleType, setVehicleType] = useState<string | null>(null);
  const [duration, setDuration] = useState<number>(5);
  const [customDuration, setCustomDuration] = useState('');
  const [isCustomDuration, setIsCustomDuration] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [durationError, setDurationError] = useState<string | null>(null);
  const [consignmentDate, setConsignmentDate] = useState(new Date());
  const [showDatePicker, setShowDatePicker] = useState(false);

  const handleDateChange = (event: any, selectedDate?: Date) => {
    setShowDatePicker(false);
    if (selectedDate) {
      setConsignmentDate(selectedDate);
    }
  };

  const handleSubmit = async () => {
    setDurationError(null);

    if (!from || !to || !description || !weight || !vehicleType) {
      Alert.alert(
        'Error',
        'Please fill in all fields and select a vehicle type'
      );
      return;
    }

    if (from === to) {
      Alert.alert('Error', 'Pickup and dropoff locations cannot be the same');
      return;
    }

    const weightNum = parseFloat(weight);
    if (isNaN(weightNum) || weightNum <= 0) {
      Alert.alert('Error', 'Please enter a valid weight');
      return;
    }

    let finalDuration: number;
    if (isCustomDuration) {
      const parsedDuration = parseInt(customDuration, 10);
      if (isNaN(parsedDuration) || parsedDuration <= 0) {
        setDurationError('Please enter a valid duration');
        return;
      }
      finalDuration = parsedDuration;
    } else {
      finalDuration = duration;
    }

    if (finalDuration < 5) {
      setDurationError('Duration must be at least 5 minutes');
      return;
    }

    if (finalDuration > 1440) {
      setDurationError('Duration cannot exceed 24 hours');
      return;
    }

    setIsSubmitting(true);
    try {
      const {
        data: { user },
      } = await supabase.auth.getUser();

      if (!user) {
        Alert.alert('Error', 'Please sign in to create an auction');
        return;
      }

      const startTime = new Date();
      const endTime = new Date(startTime.getTime() + finalDuration * 60000);

      const { error } = await supabase.from('auctions').insert({
        title: `Delivery from ${from} to ${to}`,
        description: `${description}\nWeight: ${weight} kg\nVehicle Type: ${
          VEHICLE_TYPES.find((v) => v.id === vehicleType)?.title
        }`,
        start_time: startTime.toISOString(),
        end_time: endTime.toISOString(),
        created_by: user.id,
        vehicle_type: vehicleType,
        consignment_date: consignmentDate.toISOString(),
      });

      if (error) throw error;

      Alert.alert(
        'Success',
        `Auction created successfully. It will close in ${finalDuration} ${
          finalDuration === 1 ? 'minute' : 'minutes'
        }.`
      );
      router.push('/auctions');
    } catch (error) {
      console.error('Error creating auction:', error);
      Alert.alert('Error', 'Failed to create auction');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleDurationSelect = (value: number) => {
    setDuration(value);
    setIsCustomDuration(false);
    setCustomDuration('');
    setDurationError(null);
  };

  const handleCustomDurationPress = () => {
    setIsCustomDuration(true);
    setCustomDuration('');
    setDuration(0);
    setDurationError(null);
  };

  const handleCustomDurationChange = (text: string) => {
    setCustomDuration(text);
    setDurationError(null);

    const parsedDuration = parseInt(text, 10);
    if (text && (isNaN(parsedDuration) || parsedDuration < 5)) {
      setDurationError('Duration must be at least 5 minutes');
    } else if (parsedDuration > 1440) {
      setDurationError('Duration cannot exceed 24 hours');
    }
  };

  return (
    <ScrollView style={styles.container}>
      <View style={styles.content}>
        <View style={styles.section}>
          <Text style={styles.label}>Pickup Location</Text>
          <View style={styles.locationInput}>
            <Feather name="map-pin" size={20} color="#007AFF" />
            <TextInput
              style={styles.locationTextInput}
              value={from}
              onChangeText={setFrom}
              placeholder="Enter pickup location"
              placeholderTextColor="#6C757D"
            />
          </View>
        </View>

        <View style={styles.section}>
          <Text style={styles.label}>Dropoff Location</Text>
          <View style={styles.locationInput}>
            <Feather name="map-pin" size={20} color="#007AFF" />
            <TextInput
              style={styles.locationTextInput}
              value={to}
              onChangeText={setTo}
              placeholder="Enter dropoff location"
              placeholderTextColor="#6C757D"
            />
          </View>
        </View>

        <View style={styles.section}>
          <Text style={styles.label}>Package Details</Text>
          <TextInput
            style={styles.textArea}
            value={description}
            onChangeText={setDescription}
            placeholder="Enter package details, size, etc."
            placeholderTextColor="#6C757D"
            multiline
            numberOfLines={4}
          />
        </View>

        <View style={styles.section}>
          <Text style={styles.label}>Weight (kg)</Text>
          <View style={styles.weightInput}>
            <Feather name="package" size={20} color="#6C757D" />
            <TextInput
              style={styles.weightTextInput}
              value={weight}
              onChangeText={setWeight}
              placeholder="Enter package weight"
              keyboardType="numeric"
              placeholderTextColor="#6C757D"
            />
            <Text style={styles.weightUnit}>kg</Text>
          </View>
        </View>

        <View style={styles.section}>
          <Text style={styles.label}>Vehicle Type</Text>
          <View style={styles.vehicleGrid}>
            {VEHICLE_TYPES.map((type) => (
              <TouchableOpacity
                key={type.id}
                style={[
                  styles.vehicleCard,
                  vehicleType === type.id && styles.vehicleCardSelected,
                ]}
                onPress={() => setVehicleType(type.id)}
              >
                <View style={styles.vehicleIcon}>
                  <Feather
                    name="truck"
                    size={24}
                    color={vehicleType === type.id ? '#FFFFFF' : '#6C757D'}
                  />
                </View>
                <View style={styles.vehicleContent}>
                  <Text
                    style={[
                      styles.vehicleTitle,
                      vehicleType === type.id && styles.vehicleTitleSelected,
                    ]}
                  >
                    {type.title}
                  </Text>
                  <Text
                    style={[
                      styles.vehicleDescription,
                      vehicleType === type.id &&
                        styles.vehicleDescriptionSelected,
                    ]}
                  >
                    {type.description}
                  </Text>
                </View>
              </TouchableOpacity>
            ))}
          </View>
        </View>

        <View style={styles.section}>
          <Text style={styles.label}>Consignment Date</Text>
          <TouchableOpacity
            style={styles.dateButton}
            onPress={() => setShowDatePicker(true)}
          >
            <Feather name="calendar" size={20} color="#007AFF" />
            <Text style={styles.dateButtonText}>
              {format(consignmentDate, 'MMM d, yyyy')}
            </Text>
          </TouchableOpacity>
          {showDatePicker && (
            <DateTimePicker
              value={consignmentDate}
              mode="date"
              display="default"
              onChange={handleDateChange}
              minimumDate={new Date()}
            />
          )}
        </View>

        <View style={styles.section}>
          <Text style={styles.label}>Duration</Text>
          <View style={styles.durationGrid}>
            {DURATION_OPTIONS.map((option) => (
              <TouchableOpacity
                key={option.value}
                style={[
                  styles.durationOption,
                  !isCustomDuration &&
                    duration === option.value &&
                    styles.durationOptionSelected,
                ]}
                onPress={() => handleDurationSelect(option.value)}
              >
                <Feather
                  name="clock"
                  size={16}
                  color={
                    !isCustomDuration && duration === option.value
                      ? '#FFFFFF'
                      : '#6C757D'
                  }
                />
                <Text
                  style={[
                    styles.durationOptionText,
                    !isCustomDuration &&
                      duration === option.value &&
                      styles.durationOptionTextSelected,
                  ]}
                >
                  {option.label}
                </Text>
              </TouchableOpacity>
            ))}
          </View>

          <TouchableOpacity
            style={[
              styles.customDurationButton,
              isCustomDuration && styles.customDurationButtonSelected,
            ]}
            onPress={handleCustomDurationPress}
          >
            <View style={styles.customDurationContent}>
              <Feather
                name="clock"
                size={20}
                color={isCustomDuration ? '#FFFFFF' : '#6C757D'}
              />
              <Text
                style={[
                  styles.customDurationText,
                  isCustomDuration && styles.customDurationTextSelected,
                ]}
              >
                Custom Duration
              </Text>
            </View>
          </TouchableOpacity>

          {isCustomDuration && (
            <View style={styles.customDurationInput}>
              <View style={styles.durationInputContainer}>
                <TextInput
                  style={[
                    styles.durationInput,
                    durationError && styles.durationInputError,
                  ]}
                  value={customDuration}
                  onChangeText={handleCustomDurationChange}
                  placeholder="Enter duration (5-1440 minutes)"
                  keyboardType="numeric"
                  placeholderTextColor="#6C757D"
                  autoFocus
                />
                <Text style={styles.durationUnit}>minutes</Text>
              </View>
              {durationError && (
                <Text style={styles.errorText}>{durationError}</Text>
              )}
            </View>
          )}
        </View>

        <TouchableOpacity
          style={[
            styles.submitButton,
            isSubmitting && styles.submitButtonDisabled,
          ]}
          onPress={handleSubmit}
          disabled={isSubmitting}
        >
          {isSubmitting ? (
            <ActivityIndicator color="#FFFFFF" />
          ) : (
            <>
              <Text style={styles.submitButtonText}>Create Auction</Text>
              <Feather name="arrow-right" size={20} color="#FFFFFF" />
            </>
          )}
        </TouchableOpacity>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F9FA',
  },
  content: {
    padding: 16,
  },
  section: {
    marginBottom: 24,
  },
  label: {
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginBottom: 8,
  },
  locationInput: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E5E5',
  },
  locationTextInput: {
    flex: 1,
    marginLeft: 12,
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
    ...(Platform.OS === 'web' && { outlineStyle: 'none' as any }),
  },
  textArea: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
    borderWidth: 1,
    borderColor: '#E5E5E5',
    height: 120,
    textAlignVertical: 'top',
    ...(Platform.OS === 'web' && { outlineStyle: 'none' as any }),
  },
  weightInput: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E5E5',
    padding: 16,
  },
  weightTextInput: {
    flex: 1,
    marginLeft: 12,
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
    ...(Platform.OS === 'web' && { outlineStyle: 'none' as any }),
  },
  weightUnit: {
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#6C757D',
    marginLeft: 8,
  },
  vehicleGrid: {
    gap: 12,
  },
  vehicleCard: {
    flexDirection: 'row',
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    borderWidth: 2,
    borderColor: '#E5E5E5',
    ...Platform.select({
      web: {
        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
      },
      default: {
        elevation: 2,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
      },
    }),
  },
  vehicleCardSelected: {
    borderColor: '#007AFF',
    backgroundColor: '#007AFF',
  },
  vehicleIcon: {
    width: 48,
    height: 48,
    borderRadius: 24,
    backgroundColor: '#F8F9FA',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  vehicleContent: {
    flex: 1,
  },
  vehicleTitle: {
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginBottom: 4,
  },
  vehicleTitleSelected: {
    color: '#FFFFFF',
  },
  vehicleDescription: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
  },
  vehicleDescriptionSelected: {
    color: '#FFFFFF',
  },
  durationGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
    marginBottom: 16,
  },
  durationOption: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 20,
    borderWidth: 1,
    borderColor: '#E5E5E5',
  },
  durationOptionSelected: {
    backgroundColor: '#007AFF',
    borderColor: '#007AFF',
  },
  durationOptionText: {
    marginLeft: 6,
    fontSize: 14,
    fontFamily: 'Inter_600SemiBold',
    color: '#6C757D',
  },
  durationOptionTextSelected: {
    color: '#FFFFFF',
  },
  customDurationButton: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    borderWidth: 1,
    borderColor: '#E5E5E5',
  },
  customDurationButtonSelected: {
    backgroundColor: '#007AFF',
    borderColor: '#007AFF',
  },
  customDurationContent: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  customDurationText: {
    marginLeft: 8,
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#6C757D',
  },
  customDurationTextSelected: {
    color: '#FFFFFF',
  },
  customDurationInput: {
    marginTop: 16,
  },
  durationInputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  durationInput: {
    flex: 1,
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
    borderWidth: 1,
    borderColor: '#E5E5E5',
    marginRight: 8,
    ...Platform.select({
      web: {
        outlineStyle: 'none',
      },
    }),
  },
  durationInputError: {
    borderColor: '#DC2626',
  },
  durationUnit: {
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
  },
  errorText: {
    marginTop: 8,
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#DC2626',
  },
  submitButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#007AFF',
    padding: 16,
    borderRadius: 12,
    marginTop: 24,
  },
  submitButtonDisabled: {
    opacity: 0.7,
  },
  submitButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    marginRight: 8,
  },
  dateButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E5E5',
  },
  dateButtonText: {
    marginLeft: 12,
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
  },
});



================================================
FILE: app/(tabs)/auctions/index.tsx
================================================
import React, { useEffect, useState, useCallback } from 'react';
import {
  View,
  Text,
  ScrollView,
  StyleSheet,
  TouchableOpacity,
  RefreshControl,
  ActivityIndicator,
  Platform,
} from 'react-native';
import { useRouter } from 'expo-router';
import { Feather } from '@expo/vector-icons';
import { supabase } from '@/lib/supabase';
import { format, isPast } from 'date-fns';

type UserRole = 'consigner' | 'driver';

interface Auction {
  id: string;
  title: string;
  description: string;
  status: string;
  end_time: string;
  vehicle_type: string;
  created_by: string;
  winner_id: string | null;
  start_time: string;
  consignment_date: string;
  created_at?: string;
}

interface Bid {
  id: string;
  amount: number;
  status: string;
  created_at: string | null;
  is_winning_bid: boolean | null;
  auction: Auction | null;
  user_id: string;
  auction_id: string;
}

const VEHICLE_TYPES = [
  { id: 'all', label: 'All Vehicles', icon: 'grid' },
  { id: 'three_wheeler', label: '3 Wheeler', icon: 'truck' },
  { id: 'pickup_truck', label: 'Pickup Truck', icon: 'truck' },
  { id: 'mini_truck', label: 'Mini Truck', icon: 'truck' },
  { id: 'medium_truck', label: 'Medium Truck', icon: 'truck' },
  { id: 'large_truck', label: 'Large Truck', icon: 'truck' },
];

export default function AuctionsScreen() {
  const router = useRouter();
  const [userRole, setUserRole] = useState<UserRole | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [auctions, setAuctions] = useState<Auction[]>([]);
  const [filteredAuctions, setFilteredAuctions] = useState<Auction[]>([]);
  const [bids, setBids] = useState<Bid[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [selectedVehicleType, setSelectedVehicleType] = useState<string>('all');

  const fetchData = useCallback(async () => {
    try {
      setError(null);

      // Remove expensive checkExpiredAuctions() call
      // Let database triggers handle auction closure automatically

      const {
        data: { user },
      } = await supabase.auth.getUser();

      if (!user) {
        router.replace('/sign-in');
        return;
      }

      // Get user profile to determine role and vehicle type
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('role, vehicle_type')
        .eq('id', user.id)
        .single();

      if (profileError || !profile) {
        throw new Error('User profile not found');
      }

      setUserRole(profile.role as UserRole);

      if (profile.role === 'driver') {
        // Fetch available auctions for drivers directly
        let query = supabase
          .from('auctions')
          .select('*')
          .eq('status', 'active')
          .gt('end_time', new Date().toISOString())
          .order('created_at', { ascending: false });

        // Add vehicle type filter if specified
        if (selectedVehicleType !== 'all') {
          query = query.eq('vehicle_type', selectedVehicleType);
        }
        // Note: When 'all' is selected, show all auctions regardless of vehicle type

        const { data: auctionsData, error: auctionsError } = await query;

        if (auctionsError) {
          throw auctionsError;
        }

        // Convert to expected format
        const convertedAuctions: Auction[] = (auctionsData || []).map(
          (auction) => ({
            id: auction.id,
            title: auction.title,
            description: auction.description,
            status: auction.status,
            end_time: auction.end_time,
            vehicle_type: auction.vehicle_type,
            created_by: auction.created_by,
            winner_id: auction.winner_id,
            start_time: auction.start_time,
            consignment_date: auction.consignment_date,
            created_at: auction.start_time, // Use start_time as created_at fallback
          })
        );

        setAuctions(convertedAuctions);

        // Fetch driver's bids
        const { data: userBids } = await supabase
          .from('auction_bids')
          .select(
            `
            id,
            amount,
            created_at,
            is_winning_bid,
            auction_id,
            user_id,
            auction:auctions(*)
          `
          )
          .eq('user_id', user.id)
          .order('created_at', { ascending: false })
          .limit(50);

        // Map to proper Bid format
        const mappedBids: Bid[] = (userBids || []).map((bid) => ({
          id: bid.id,
          amount: bid.amount,
          status: 'active', // Default status
          created_at: bid.created_at,
          is_winning_bid: bid.is_winning_bid,
          auction:
            bid.auction &&
            typeof bid.auction === 'object' &&
            !('message' in bid.auction)
              ? bid.auction
              : null,
          user_id: bid.user_id,
          auction_id: bid.auction_id,
        }));

        setBids(mappedBids);
      } else {
        // Fetch user's own auctions for consigners
        const { data: userAuctions, error: auctionsError } = await supabase
          .from('auctions')
          .select('*')
          .eq('created_by', user.id)
          .order('created_at', { ascending: false });

        if (auctionsError) {
          throw auctionsError;
        }

        setAuctions((userAuctions as Auction[]) || []);
      }
    } catch {
      setError('Failed to load data. Please try again.');
    } finally {
      setIsLoading(false);
      setRefreshing(false);
    }
  }, [router, selectedVehicleType]);

  // Filter auctions based on selected vehicle type
  useEffect(() => {
    if (selectedVehicleType === 'all') {
      setFilteredAuctions(auctions);
    } else {
      const filtered = auctions.filter(
        (auction) => auction.vehicle_type === selectedVehicleType
      );
      setFilteredAuctions(filtered);
    }
  }, [auctions, selectedVehicleType]);

  const handleRefresh = async () => {
    setRefreshing(true);
    await fetchData();
    setRefreshing(false);
  };

  useEffect(() => {
    fetchData();

    // Reduced polling frequency to prevent performance issues
    // TODO: Replace with WebSocket/Realtime subscriptions
    const interval = setInterval(async () => {
      await fetchData(); // Simple data refresh, no expensive operations
    }, 300000); // Increased to 5 minutes to reduce performance impact

    return () => clearInterval(interval);
  }, [fetchData]);

  const getAuctionStatusColor = (auction: Auction) => {
    if (auction.status === 'active') {
      // Check if auction is expired
      if (isPast(new Date(auction.end_time))) {
        return '#DC3545'; // Red for expired
      }
      return '#28A745'; // Green for active
    } else if (auction.status === 'completed') {
      return '#007AFF'; // Blue for completed
    } else if (auction.status === 'cancelled') {
      return '#DC3545'; // Red for cancelled
    }
    return '#6C757D'; // Gray for unknown
  };

  const getAuctionStatusText = (auction: Auction) => {
    if (auction.status === 'active') {
      // Check if auction is expired
      if (isPast(new Date(auction.end_time))) {
        return 'Expired';
      }
      return 'Active';
    }
    return auction.status.charAt(0).toUpperCase() + auction.status.slice(1);
  };

  const renderVehicleFilter = () => {
    if (userRole !== 'driver') return null;

    return (
      <View style={styles.filterContainer}>
        <Text style={styles.filterTitle}>Filter by Vehicle Type</Text>
        <ScrollView
          horizontal
          showsHorizontalScrollIndicator={false}
          contentContainerStyle={styles.filterScrollContainer}
        >
          {VEHICLE_TYPES.map((vehicleType) => (
            <TouchableOpacity
              key={vehicleType.id}
              style={[
                styles.filterChip,
                selectedVehicleType === vehicleType.id &&
                  styles.filterChipSelected,
              ]}
              onPress={() => setSelectedVehicleType(vehicleType.id)}
            >
              <Feather
                name={vehicleType.icon as any}
                size={16}
                color={
                  selectedVehicleType === vehicleType.id ? '#FFFFFF' : '#6C757D'
                }
              />
              <Text
                style={[
                  styles.filterChipText,
                  selectedVehicleType === vehicleType.id &&
                    styles.filterChipTextSelected,
                ]}
              >
                {vehicleType.label}
              </Text>
            </TouchableOpacity>
          ))}
        </ScrollView>
      </View>
    );
  };

  if (isLoading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#007AFF" />
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>{error}</Text>
        <TouchableOpacity style={styles.retryButton} onPress={fetchData}>
          <Text style={styles.retryButtonText}>Retry</Text>
        </TouchableOpacity>
      </View>
    );
  }

  const renderDriverAuctions = () => {
    if (filteredAuctions.length === 0) {
      return (
        <View style={styles.emptyState}>
          <Feather name="clock" size={48} color="#6C757D" />
          <Text style={styles.emptyStateTitle}>
            {selectedVehicleType === 'all'
              ? 'No Active Auctions'
              : 'No Jobs for Selected Vehicle Type'}
          </Text>
          <Text style={styles.emptyStateText}>
            {selectedVehicleType === 'all'
              ? 'No active auctions available at the moment'
              : `No active auctions for ${
                  VEHICLE_TYPES.find((v) => v.id === selectedVehicleType)?.label
                }`}
          </Text>
          {selectedVehicleType !== 'all' && (
            <TouchableOpacity
              style={styles.clearFilterButton}
              onPress={() => setSelectedVehicleType('all')}
            >
              <Text style={styles.clearFilterButtonText}>Show All Jobs</Text>
            </TouchableOpacity>
          )}
        </View>
      );
    }

    return filteredAuctions.map((auction) => (
      <TouchableOpacity
        key={auction.id}
        style={styles.card}
        onPress={() => router.push(`/auctions/${auction.id}`)}
      >
        <View style={styles.cardHeader}>
          <Text style={styles.cardTitle}>{auction.title}</Text>
          <View
            style={[
              styles.statusBadge,
              { backgroundColor: getAuctionStatusColor(auction) },
            ]}
          >
            <Text style={styles.statusText}>
              {getAuctionStatusText(auction)}
            </Text>
          </View>
        </View>

        <Text style={styles.description} numberOfLines={2}>
          {auction.description}
        </Text>

        <View style={styles.vehicleInfo}>
          <Feather name="truck" size={16} color="#6C757D" />
          <Text style={styles.vehicleType}>
            {auction.vehicle_type
              .split('_')
              .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
              .join(' ')}
          </Text>
        </View>

        <View style={styles.timeInfo}>
          <Feather name="clock" size={16} color="#6C757D" />
          <Text style={styles.timeText}>
            {auction.status === 'active' && isPast(new Date(auction.end_time))
              ? `Expired ${format(new Date(auction.end_time), 'MMM d, h:mm a')}`
              : auction.status === 'cancelled'
              ? `Cancelled ${format(
                  new Date(auction.end_time),
                  'MMM d, h:mm a'
                )}`
              : `Ends ${format(new Date(auction.end_time), 'MMM d, h:mm a')}`}
          </Text>
        </View>
      </TouchableOpacity>
    ));
  };

  const renderDriverJobs = () => {
    if (bids.length === 0) {
      return (
        <View style={styles.emptyState}>
          <Feather name="briefcase" size={48} color="#6C757D" />
          <Text style={styles.emptyStateTitle}>No Jobs Yet</Text>
          <Text style={styles.emptyStateText}>
            Start bidding on available auctions to get jobs
          </Text>
        </View>
      );
    }

    return bids
      .map((bid) => {
        // Skip rendering if auction data is missing
        if (!bid.auction) {
          return null;
        }

        return (
          <TouchableOpacity
            key={bid.id}
            style={styles.card}
            onPress={() => {
              if (bid.auction) {
                router.push(`/auctions/${bid.auction.id}`);
              }
            }}
          >
            <View style={styles.cardHeader}>
              <Text style={styles.cardTitle}>{bid.auction.title}</Text>
              <View
                style={[
                  styles.statusBadge,
                  { backgroundColor: getAuctionStatusColor(bid.auction) },
                ]}
              >
                <Text style={styles.statusText}>
                  {getAuctionStatusText(bid.auction)}
                </Text>
              </View>
            </View>

            {bid.is_winning_bid && (
              <View style={styles.winnerBadge}>
                <Feather name="award" size={16} color="#FFD700" />
                <Text style={styles.winnerText}>Winning Bid</Text>
              </View>
            )}

            <Text style={styles.description} numberOfLines={2}>
              {bid.auction.description}
            </Text>

            <View style={styles.bidInfo}>
              <View style={styles.bidAmount}>
                <Feather name="credit-card" size={16} color="#28A745" />
                <Text style={styles.bidAmountText}>₹{bid.amount}</Text>
              </View>
              <Text style={styles.bidTime}>
                {bid.created_at
                  ? format(new Date(bid.created_at), 'MMM d, h:mm a')
                  : 'Unknown date'}
              </Text>
            </View>

            <View style={styles.vehicleInfo}>
              <Feather name="truck" size={16} color="#6C757D" />
              <Text style={styles.vehicleType}>
                {bid.auction.vehicle_type
                  .split('_')
                  .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
                  .join(' ')}
              </Text>
            </View>
          </TouchableOpacity>
        );
      })
      .filter(Boolean); // Remove null entries from the rendered list
  };

  const renderConsignerAuctions = () => {
    if (auctions.length === 0) {
      return (
        <View style={styles.emptyState}>
          <Feather name="package" size={48} color="#6C757D" />
          <Text style={styles.emptyStateTitle}>No Auctions Yet</Text>
          <Text style={styles.emptyStateText}>
            Create your first auction to start receiving bids
          </Text>
          <TouchableOpacity
            style={styles.createButton}
            onPress={() => router.push('/auctions/create')}
          >
            <Text style={styles.createButtonText}>Create Auction</Text>
            <Feather name="plus" size={20} color="#FFFFFF" />
          </TouchableOpacity>
        </View>
      );
    }

    return auctions.map((auction) => (
      <TouchableOpacity
        key={auction.id}
        style={styles.card}
        onPress={() => router.push(`/auctions/${auction.id}`)}
      >
        <View style={styles.cardHeader}>
          <Text style={styles.cardTitle}>{auction.title}</Text>
          <View
            style={[
              styles.statusBadge,
              { backgroundColor: getAuctionStatusColor(auction) },
            ]}
          >
            <Text style={styles.statusText}>
              {getAuctionStatusText(auction)}
            </Text>
          </View>
        </View>

        <Text style={styles.description} numberOfLines={2}>
          {auction.description}
        </Text>

        <View style={styles.vehicleInfo}>
          <Feather name="truck" size={16} color="#6C757D" />
          <Text style={styles.vehicleType}>
            {auction.vehicle_type
              .split('_')
              .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
              .join(' ')}
          </Text>
        </View>

        <View style={styles.timeInfo}>
          <Feather name="clock" size={16} color="#6C757D" />
          <Text style={styles.timeText}>
            {auction.status === 'active' && isPast(new Date(auction.end_time))
              ? `Expired ${format(new Date(auction.end_time), 'MMM d, h:mm a')}`
              : auction.status === 'cancelled'
              ? `Cancelled ${format(
                  new Date(auction.end_time),
                  'MMM d, h:mm a'
                )}`
              : `Ends ${format(new Date(auction.end_time), 'MMM d, h:mm a')}`}
          </Text>
        </View>
      </TouchableOpacity>
    ));
  };

  return (
    <ScrollView
      style={styles.container}
      contentContainerStyle={styles.content}
      refreshControl={
        <RefreshControl refreshing={refreshing} onRefresh={handleRefresh} />
      }
    >
      <View style={styles.header}>
        <Text style={styles.title}>
          {userRole === 'driver' ? 'Available Jobs' : 'My Auctions'}
        </Text>
        {userRole === 'consigner' && (
          <TouchableOpacity
            style={styles.createButton}
            onPress={() => router.push('/auctions/create')}
          >
            <Text style={styles.createButtonText}>Create Auction</Text>
            <Feather name="plus" size={20} color="#FFFFFF" />
          </TouchableOpacity>
        )}
      </View>

      {userRole === 'driver' ? (
        <>
          {renderVehicleFilter()}

          <View style={styles.sectionHeader}>
            <Text style={styles.sectionTitle}>
              Available Jobs ({filteredAuctions.length})
              {selectedVehicleType !== 'all' && (
                <Text style={styles.filterIndicator}>
                  {' '}
                  •{' '}
                  {
                    VEHICLE_TYPES.find((v) => v.id === selectedVehicleType)
                      ?.label
                  }
                </Text>
              )}
            </Text>
          </View>
          {renderDriverAuctions()}

          <View style={styles.sectionHeader}>
            <Text style={styles.sectionTitle}>My Jobs ({bids.length})</Text>
          </View>
          {renderDriverJobs()}
        </>
      ) : (
        renderConsignerAuctions()
      )}
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F9FA',
  },
  content: {
    padding: 16,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16,
  },
  errorText: {
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#DC3545',
    textAlign: 'center',
    marginBottom: 16,
  },
  retryButton: {
    backgroundColor: '#007AFF',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
    marginBottom: 8,
  },
  retryButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  title: {
    fontSize: 24,
    fontFamily: 'Inter_700Bold',
    color: '#1C1C1E',
  },
  filterContainer: {
    marginBottom: 24,
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    ...Platform.select({
      web: {
        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
      },
      default: {
        elevation: 2,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
      },
    }),
  },
  filterTitle: {
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginBottom: 12,
  },
  filterScrollContainer: {
    paddingRight: 16,
  },
  filterChip: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F8F9FA',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 20,
    marginRight: 8,
    borderWidth: 1,
    borderColor: '#E5E5E5',
  },
  filterChipSelected: {
    backgroundColor: '#007AFF',
    borderColor: '#007AFF',
  },
  filterChipText: {
    marginLeft: 6,
    fontSize: 14,
    fontFamily: 'Inter_600SemiBold',
    color: '#6C757D',
  },
  filterChipTextSelected: {
    color: '#FFFFFF',
  },
  sectionHeader: {
    marginTop: 24,
    marginBottom: 16,
  },
  sectionTitle: {
    fontSize: 18,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
  },
  filterIndicator: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#007AFF',
  },
  createButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#007AFF',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 8,
  },
  createButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    marginRight: 8,
  },
  clearFilterButton: {
    backgroundColor: '#007AFF',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 8,
    marginTop: 16,
  },
  clearFilterButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontFamily: 'Inter_600SemiBold',
  },
  card: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    ...Platform.select({
      web: {
        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
      },
      default: {
        elevation: 2,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
      },
    }),
  },
  cardHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  cardTitle: {
    fontSize: 18,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    flex: 1,
    marginRight: 8,
  },
  statusBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  statusText: {
    fontSize: 12,
    fontFamily: 'Inter_600SemiBold',
    color: '#FFFFFF',
  },
  description: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
    marginBottom: 12,
  },
  winnerBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFF8E5',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    alignSelf: 'flex-start',
    marginBottom: 8,
  },
  winnerText: {
    marginLeft: 4,
    fontSize: 12,
    fontFamily: 'Inter_600SemiBold',
    color: '#FFB100',
  },
  bidInfo: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  bidAmount: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  bidAmountText: {
    marginLeft: 4,
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#28A745',
  },
  bidTime: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
  },
  vehicleInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  vehicleType: {
    marginLeft: 8,
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
  },
  timeInfo: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  timeText: {
    marginLeft: 8,
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
  },
  emptyState: {
    alignItems: 'center',
    justifyContent: 'center',
    padding: 32,
  },
  emptyStateTitle: {
    fontSize: 20,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginTop: 16,
    marginBottom: 8,
  },
  emptyStateText: {
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
    textAlign: 'center',
  },
});



================================================
FILE: app/(tabs)/auctions/payment-info.tsx
================================================
import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';
import { useRouter } from 'expo-router';
import { Feather } from '@expo/vector-icons'; // ✅ Feather icon set

export default function PaymentInfoModal() {
  const router = useRouter();

  return (
    <View style={styles.container}>
      <View style={styles.content}>
        <Text style={styles.title}>Payment Information</Text>
        
        <View style={styles.infoSection}>
          <Feather name="dollar-sign" size={24} color="#007AFF" />
          <Text style={styles.infoText}>
            Please make payment to:
          </Text>
          <Text style={styles.accountInfo}>
            bsp.sparton@sbi
          </Text>
        </View>

        <View style={styles.infoSection}>
          <Feather name="phone" size={24} color="#007AFF" />
          <Text style={styles.infoText}>
            For further details, call:
          </Text>
          <Text style={styles.phoneNumber}>
            7099220645
          </Text>
        </View>

        <TouchableOpacity
          style={styles.closeButton}
          onPress={() => router.back()}>
          <Text style={styles.closeButtonText}>Close</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  content: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 24,
    width: '90%',
    maxWidth: 400,
  },
  title: {
    fontSize: 24,
    fontFamily: 'Inter_700Bold',
    color: '#1C1C1E',
    marginBottom: 24,
    textAlign: 'center',
  },
  infoSection: {
    alignItems: 'center',
    marginBottom: 24,
  },
  infoText: {
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
    marginTop: 8,
    marginBottom: 4,
  },
  accountInfo: {
    fontSize: 20,
    fontFamily: 'Inter_600SemiBold',
    color: '#007AFF',
  },
  phoneNumber: {
    fontSize: 20,
    fontFamily: 'Inter_600SemiBold',
    color: '#007AFF',
  },
  closeButton: {
    backgroundColor: '#007AFF',
    padding: 16,
    borderRadius: 12,
    marginTop: 16,
  },
  closeButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    textAlign: 'center',
  },
});



================================================
FILE: app/(tabs)/info/_layout.tsx
================================================
import { Stack } from 'expo-router';

export default function InfoLayout() {
  return (
    <Stack>
      <Stack.Screen
        name="index"
        options={{
          title: 'Information',
          headerShown: true,
        }}
      />
      <Stack.Screen
        name="privacy"
        options={{
          title: 'Privacy Policy',
          headerShown: true,
        }}
      />
      <Stack.Screen
        name="about"
        options={{
          title: 'About Us',
          headerShown: true,
        }}
      />
      <Stack.Screen
        name="contact"
        options={{
          title: 'Contact Us',
          headerShown: true,
        }}
      />
    </Stack>
  );
}



================================================
FILE: app/(tabs)/info/about.tsx
================================================
import React from 'react';
import { View, Text, StyleSheet, ScrollView, Image } from 'react-native';
import { Feather } from '@expo/vector-icons';

export default function AboutScreen() {
  return (
    <ScrollView style={styles.container}>
      <Image
        source={{ uri: 'https://images.pexels.com/photos/2199293/pexels-photo-2199293.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2' }}
        style={styles.headerImage}
      />
      
      <View style={styles.content}>
        <Text style={styles.title}>About AiravatL</Text>
        
        <Text style={styles.description}>
          AiravatL is revolutionizing logistics in Guwahati through our innovative auction-based delivery platform. We connect businesses and individuals with reliable delivery partners, ensuring efficient and cost-effective transportation solutions.
        </Text>

        <View style={styles.statsContainer}>
          <View style={styles.statCard}>
            <Feather name="truck" size={32} color="#007AFF" />
            <Text style={styles.statNumber}>2,500+</Text>
            <Text style={styles.statLabel}>Deliveries</Text>
          </View>

          <View style={styles.statCard}>
            <Feather name="users" size={32} color="#34C759" />
            <Text style={styles.statNumber}>500+</Text>
            <Text style={styles.statLabel}>Partners</Text>
          </View>

          <View style={styles.statCard}>
            <Feather name="shield" size={32} color="#5856D6" />
            <Text style={styles.statNumber}>98%</Text>
            <Text style={styles.statLabel}>Success Rate</Text>
          </View>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Our Mission</Text>
          <Text style={styles.sectionText}>
            To transform logistics in Northeast India by creating a transparent, efficient, and reliable delivery ecosystem that empowers businesses and delivery partners alike.
          </Text>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Our Vision</Text>
          <Text style={styles.sectionText}>
            To become the most trusted logistics platform in Northeast India, known for innovation, reliability, and exceptional service quality.
          </Text>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Our Values</Text>
          
          <View style={styles.valueCard}>
            <Text style={styles.valueTitle}>Transparency</Text>
            <Text style={styles.valueDescription}>
              We believe in complete transparency in our operations, pricing, and communication.
            </Text>
          </View>

          <View style={styles.valueCard}>
            <Text style={styles.valueTitle}>Reliability</Text>
            <Text style={styles.valueDescription}>
              We are committed to providing consistent and dependable service to all our stakeholders.
            </Text>
          </View>

          <View style={styles.valueCard}>
            <Text style={styles.valueTitle}>Innovation</Text>
            <Text style={styles.valueDescription}>
              We continuously innovate to improve our services and solve logistics challenges.
            </Text>
          </View>
        </View>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  headerImage: {
    width: '100%',
    height: 200,
  },
  content: {
    padding: 16,
  },
  title: {
    fontSize: 24,
    fontFamily: 'Inter_700Bold',
    color: '#1C1C1E',
    marginBottom: 16,
  },
  description: {
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
    lineHeight: 24,
    marginBottom: 24,
  },
  statsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 32,
  },
  statCard: {
    flex: 1,
    alignItems: 'center',
    backgroundColor: '#F8F9FA',
    padding: 16,
    borderRadius: 12,
    marginHorizontal: 4,
  },
  statNumber: {
    fontSize: 20,
    fontFamily: 'Inter_700Bold',
    color: '#1C1C1E',
    marginTop: 8,
  },
  statLabel: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
    marginTop: 4,
  },
  section: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 20,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginBottom: 16,
  },
  sectionText: {
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
    lineHeight: 24,
  },
  valueCard: {
    backgroundColor: '#F8F9FA',
    padding: 16,
    borderRadius: 12,
    marginBottom: 12,
  },
  valueTitle: {
    fontSize: 18,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginBottom: 8,
  },
  valueDescription: {
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
    lineHeight: 24,
  },
});


================================================
FILE: app/(tabs)/info/contact.tsx
================================================
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TextInput,
  TouchableOpacity,
  ActivityIndicator,
  Platform,
} from 'react-native';
import { Feather } from '@expo/vector-icons';

export default function ContactScreen() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [message, setMessage] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);

  const handleSubmit = async () => {
    setError(null);
    setSuccess(false);

    if (!name || !email || !message) {
      setError('Please fill in all fields');
      return;
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      setError('Please enter a valid email address');
      return;
    }

    setIsSubmitting(true);

    try {
      // Simulate API call
      await new Promise((resolve) => setTimeout(resolve, 1000));

      setSuccess(true);
      setName('');
      setEmail('');
      setMessage('');
    } catch (err) {
      setError('Failed to send message. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <ScrollView style={styles.container}>
      <View style={styles.content}>
        <Text style={styles.title}>Contact Us</Text>

        <Text style={styles.description}>
          Have questions or need assistance? We&apos;re here to help! Reach out
          to us through any of the following channels.
        </Text>

        <View style={styles.contactCards}>
          <View style={styles.contactCard}>
            <Feather name="mail" size={24} color="#007AFF" />
            <Text style={styles.contactLabel}>Email</Text>
            <Text style={styles.contactValue}>support@airavatl.com</Text>
          </View>

          <View style={styles.contactCard}>
            <Feather name="phone" size={24} color="#34C759" />
            <Text style={styles.contactLabel}>Phone</Text>
            <Text style={styles.contactValue}>+91 709-922-0645</Text>
          </View>

          <View style={styles.contactCard}>
            <Feather name="map-pin" size={24} color="#5856D6" />
            <Text style={styles.contactLabel}>Address</Text>
            <Text style={styles.contactValue}>
              BSP SPARTON PRIVATE LIMITED 1B, 1st Floor Saroj Estate K.C.
              Patowary Road, Ulubari Guwahati 781007
            </Text>
          </View>
        </View>

        <View style={styles.formContainer}>
          <Text style={styles.formTitle}>Send us a message</Text>

          {error && (
            <View style={styles.errorContainer}>
              <Text style={styles.errorText}>{error}</Text>
            </View>
          )}

          {success && (
            <View style={styles.successContainer}>
              <Text style={styles.successText}>
                Message sent successfully! We&apos;ll get back to you soon.
              </Text>
            </View>
          )}

          <View style={styles.inputContainer}>
            <Text style={styles.label}>Name</Text>
            <TextInput
              style={styles.input}
              value={name}
              onChangeText={setName}
              placeholder="Enter your name"
              placeholderTextColor="#6C757D"
            />
          </View>

          <View style={styles.inputContainer}>
            <Text style={styles.label}>Email</Text>
            <TextInput
              style={styles.input}
              value={email}
              onChangeText={setEmail}
              placeholder="Enter your email"
              placeholderTextColor="#6C757D"
              keyboardType="email-address"
              autoCapitalize="none"
            />
          </View>

          <View style={styles.inputContainer}>
            <Text style={styles.label}>Message</Text>
            <TextInput
              style={styles.textArea}
              value={message}
              onChangeText={setMessage}
              placeholder="Enter your message"
              placeholderTextColor="#6C757D"
              multiline
              numberOfLines={4}
              textAlignVertical="top"
            />
          </View>

          <TouchableOpacity
            style={[
              styles.submitButton,
              isSubmitting && styles.submitButtonDisabled,
            ]}
            onPress={handleSubmit}
            disabled={isSubmitting}
          >
            {isSubmitting ? (
              <ActivityIndicator color="#FFFFFF" />
            ) : (
              <Text style={styles.submitButtonText}>Send Message</Text>
            )}
          </TouchableOpacity>
        </View>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  content: {
    padding: 16,
  },
  title: {
    fontSize: 24,
    fontFamily: 'Inter_700Bold',
    color: '#1C1C1E',
    marginBottom: 16,
  },
  description: {
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
    lineHeight: 24,
    marginBottom: 24,
  },
  contactCards: {
    marginBottom: 32,
  },
  contactCard: {
    backgroundColor: '#F8F9FA',
    padding: 16,
    borderRadius: 12,
    marginBottom: 12,
    alignItems: 'center',
  },
  contactLabel: {
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginTop: 8,
    marginBottom: 4,
  },
  contactValue: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
    textAlign: 'center',
  },
  formContainer: {
    backgroundColor: '#F8F9FA',
    padding: 16,
    borderRadius: 12,
  },
  formTitle: {
    fontSize: 20,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginBottom: 16,
  },
  errorContainer: {
    backgroundColor: '#FEE2E2',
    padding: 12,
    borderRadius: 8,
    marginBottom: 16,
  },
  errorText: {
    color: '#DC2626',
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
  },
  successContainer: {
    backgroundColor: '#D1FAE5',
    padding: 12,
    borderRadius: 8,
    marginBottom: 16,
  },
  successText: {
    color: '#059669',
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
  },
  inputContainer: {
    marginBottom: 16,
  },
  label: {
    fontSize: 14,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginBottom: 8,
  },
  input: {
    backgroundColor: '#FFFFFF',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
    borderWidth: 1,
    borderColor: '#E5E5E5',
    ...(Platform.OS === 'web' && { outlineStyle: 'none' as any }),
  },
  textArea: {
    backgroundColor: '#FFFFFF',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
    borderWidth: 1,
    borderColor: '#E5E5E5',
    height: 120,
    ...(Platform.OS === 'web' && { outlineStyle: 'none' as any }),
  },
  submitButton: {
    backgroundColor: '#007AFF',
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 8,
  },
  submitButtonDisabled: {
    opacity: 0.7,
  },
  submitButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
  },
});



================================================
FILE: app/(tabs)/info/index.tsx
================================================
import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
} from 'react-native';
import { useRouter } from 'expo-router';
import { Feather } from '@expo/vector-icons';

export default function InfoScreen() {
  const router = useRouter();

  return (
    <ScrollView style={styles.container}>
      <View style={styles.content}>
        <TouchableOpacity
          style={styles.card}
          onPress={() => router.push('/info/privacy')}
        >
          <Feather name="shield" size={24} color="#007AFF" />
          <View style={styles.cardContent}>
            <Text style={styles.cardTitle}>Privacy Policy</Text>
            <Text style={styles.cardDescription}>
              Learn about how we protect your data and privacy
            </Text>
          </View>
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.card}
          onPress={() => router.push('/info/about')}
        >
          <Feather name="info" size={24} color="#34C759" />
          <View style={styles.cardContent}>
            <Text style={styles.cardTitle}>About Us</Text>
            <Text style={styles.cardDescription}>
              Learn more about AiravatL and our mission
            </Text>
          </View>
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.card}
          onPress={() => router.push('/info/contact')}
        >
          <Feather name="mail" size={24} color="#5856D6" />
          <View style={styles.cardContent}>
            <Text style={styles.cardTitle}>Contact Us</Text>
            <Text style={styles.cardDescription}>
              Get in touch with our support team
            </Text>
          </View>
        </TouchableOpacity>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F9FA',
  },
  content: {
    padding: 16,
  },
  card: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderRadius: 12,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  cardContent: {
    marginLeft: 16,
    flex: 1,
  },
  cardTitle: {
    fontSize: 18,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginBottom: 4,
  },
  cardDescription: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
  },
});



================================================
FILE: app/(tabs)/info/privacy.tsx
================================================
import React from 'react';
import { View, Text, StyleSheet, ScrollView } from 'react-native';

export default function PrivacyPolicyScreen() {
  return (
    <ScrollView style={styles.container}>
      <View style={styles.content}>
        <Text style={styles.title}>Privacy Policy</Text>
        
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>1. Information We Collect</Text>
          <Text style={styles.text}>
            We collect information that you provide directly to us, including:
          </Text>
          <View style={styles.list}>
            <Text style={styles.listItem}>• Name and contact information</Text>
            <Text style={styles.listItem}>• Account credentials</Text>
            <Text style={styles.listItem}>• Profile information</Text>
            <Text style={styles.listItem}>• Transaction data</Text>
          </View>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>2. How We Use Your Information</Text>
          <Text style={styles.text}>
            We use the information we collect to:
          </Text>
          <View style={styles.list}>
            <Text style={styles.listItem}>• Provide and maintain our services</Text>
            <Text style={styles.listItem}>• Process your transactions</Text>
            <Text style={styles.listItem}>• Send you service-related communications</Text>
            <Text style={styles.listItem}>• Improve our services</Text>
          </View>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>3. Information Sharing</Text>
          <Text style={styles.text}>
            We do not sell your personal information. We may share your information with:
          </Text>
          <View style={styles.list}>
            <Text style={styles.listItem}>• Service providers</Text>
            <Text style={styles.listItem}>• Legal authorities when required</Text>
            <Text style={styles.listItem}>• Business partners with your consent</Text>
          </View>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>4. Data Security</Text>
          <Text style={styles.text}>
            We implement appropriate security measures to protect your personal information from unauthorized access, disclosure, alteration, and destruction.
          </Text>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>5. Your Rights</Text>
          <Text style={styles.text}>
            You have the right to:
          </Text>
          <View style={styles.list}>
            <Text style={styles.listItem}>• Access your personal information</Text>
            <Text style={styles.listItem}>• Correct inaccurate information</Text>
            <Text style={styles.listItem}>• Request deletion of your information</Text>
            <Text style={styles.listItem}>• Opt-out of marketing communications</Text>
          </View>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>6. Contact Us</Text>
          <Text style={styles.text}>
            If you have any questions about this Privacy Policy, please contact us at privacy@airavatl.com
          </Text>
        </View>

        <Text style={styles.lastUpdated}>
          Last updated: May 24, 2025
        </Text>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  content: {
    padding: 16,
  },
  title: {
    fontSize: 24,
    fontFamily: 'Inter_700Bold',
    color: '#1C1C1E',
    marginBottom: 24,
  },
  section: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 18,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginBottom: 12,
  },
  text: {
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
    lineHeight: 24,
    marginBottom: 12,
  },
  list: {
    marginLeft: 8,
  },
  listItem: {
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
    lineHeight: 24,
    marginBottom: 8,
  },
  lastUpdated: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
    marginTop: 24,
    textAlign: 'center',
  },
});


================================================
FILE: components/index.ts
================================================
// UI Components
export * from './ui';

// Form Components
export * from './forms';

// Feature Components
export * from './auction';

// Common Components
export * from './common';



================================================
FILE: components/auction/AuctionsList.tsx
================================================
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  FlatList,
  TouchableOpacity,
  StyleSheet,
  RefreshControl,
  ActivityIndicator,
} from 'react-native';
import { useRouter } from 'expo-router';
import { Feather } from '@expo/vector-icons';
import { supabase } from '@/lib/supabase';
import { dataService } from '@/lib/services';
import { formatDistanceToNow } from 'date-fns';

interface Auction {
  id: string;
  title: string;
  description: string;
  status: string;
  end_time: string;
  vehicle_type: string;
  created_by: string;
  winner_id: string | null;
  start_time: string;
  consignment_date: string;
}

interface User {
  id: string;
  role: string;
  vehicle_type?: string;
}

interface AuctionsListProps {
  vehicleTypeFilter?: string;
}

export default function AuctionsList({ vehicleTypeFilter }: AuctionsListProps) {
  const router = useRouter();
  const [auctions, setAuctions] = useState<Auction[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [user, setUser] = useState<User | null>(null);

  const loadData = async (showRefreshing = false) => {
    try {
      if (showRefreshing) setRefreshing(true);
      setError(null);

      // Check for expired auctions first
      await dataService.checkExpiredAuctions();

      // Get current user
      const {
        data: { user: authUser },
      } = await supabase.auth.getUser();
      if (!authUser) {
        router.replace('/sign-in');
        return;
      }

      // Get user profile
      const profile = await dataService.getUserProfile(authUser.id);
      if (profile) {
        setUser({
          id: authUser.id,
          role: profile.role,
          vehicle_type: profile.vehicle_type || undefined,
        });

        // Load auctions based on user role
        let auctionsData: Auction[] = [];

        if (profile.role === 'driver') {
          // Load available auctions for drivers
          auctionsData = await dataService.getAvailableAuctions(
            vehicleTypeFilter
          );
        } else {
          // Load user's own auctions for consigners
          auctionsData = await dataService.getUserAuctions(authUser.id);
        }

        setAuctions(auctionsData);
      }
    } catch (err) {
      console.error('Error loading auctions:', err);
      setError('Failed to load auctions');
    } finally {
      setIsLoading(false);
      setRefreshing(false);
    }
  };

  useEffect(() => {
    loadData();
  }, [vehicleTypeFilter]);

  const handleRefresh = () => {
    loadData(true);
  };

  const getStatusColor = (auction: Auction) => {
    if (auction.status === 'active') {
      return new Date(auction.end_time) > new Date() ? '#28A745' : '#DC3545';
    }
    return auction.status === 'completed' ? '#007AFF' : '#6C757D';
  };

  const getStatusText = (auction: Auction) => {
    if (auction.status === 'active') {
      return new Date(auction.end_time) > new Date() ? 'Active' : 'Expired';
    }
    return auction.status.charAt(0).toUpperCase() + auction.status.slice(1);
  };

  const renderAuction = ({ item: auction }: { item: Auction }) => (
    <TouchableOpacity
      style={styles.card}
      onPress={() => router.push(`/auctions/${auction.id}`)}
    >
      <View style={styles.cardHeader}>
        <Text style={styles.title} numberOfLines={1}>
          {auction.title}
        </Text>
        <View
          style={[
            styles.statusBadge,
            { backgroundColor: getStatusColor(auction) },
          ]}
        >
          <Text style={styles.statusText}>{getStatusText(auction)}</Text>
        </View>
      </View>

      <Text style={styles.description} numberOfLines={2}>
        {auction.description}
      </Text>

      <View style={styles.infoRow}>
        <Feather name="truck" size={16} color="#6C757D" />
        <Text style={styles.infoText}>
          {auction.vehicle_type
            .split('_')
            .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
            .join(' ')}
        </Text>
      </View>

      <View style={styles.infoRow}>
        <Feather name="clock" size={16} color="#6C757D" />
        <Text style={styles.infoText}>
          Ends{' '}
          {formatDistanceToNow(new Date(auction.end_time), { addSuffix: true })}
        </Text>
      </View>
    </TouchableOpacity>
  );

  if (isLoading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#007AFF" />
        <Text style={styles.loadingText}>Loading auctions...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.errorContainer}>
        <Feather name="alert-circle" size={48} color="#DC3545" />
        <Text style={styles.errorText}>{error}</Text>
        <TouchableOpacity style={styles.retryButton} onPress={() => loadData()}>
          <Text style={styles.retryButtonText}>Retry</Text>
        </TouchableOpacity>
      </View>
    );
  }

  if (auctions.length === 0) {
    return (
      <View style={styles.emptyContainer}>
        <Feather name="inbox" size={48} color="#6C757D" />
        <Text style={styles.emptyTitle}>No Auctions Found</Text>
        <Text style={styles.emptyText}>
          {user?.role === 'driver'
            ? 'No active auctions available at the moment'
            : "You haven't created any auctions yet"}
        </Text>
      </View>
    );
  }

  return (
    <FlatList
      data={auctions}
      renderItem={renderAuction}
      keyExtractor={(item) => item.id}
      refreshControl={
        <RefreshControl
          refreshing={refreshing}
          onRefresh={handleRefresh}
          colors={['#007AFF']}
        />
      }
      contentContainerStyle={styles.listContainer}
      showsVerticalScrollIndicator={false}
    />
  );
}

const styles = StyleSheet.create({
  listContainer: {
    padding: 16,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  loadingText: {
    marginTop: 12,
    fontSize: 16,
    color: '#6C757D',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  errorText: {
    marginTop: 12,
    fontSize: 16,
    color: '#DC3545',
    textAlign: 'center',
  },
  retryButton: {
    marginTop: 16,
    paddingHorizontal: 20,
    paddingVertical: 10,
    backgroundColor: '#007AFF',
    borderRadius: 8,
  },
  retryButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  emptyTitle: {
    marginTop: 12,
    fontSize: 18,
    fontWeight: '600',
    color: '#1F2937',
  },
  emptyText: {
    marginTop: 8,
    fontSize: 14,
    color: '#6C757D',
    textAlign: 'center',
  },
  card: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3.84,
    elevation: 5,
  },
  cardHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  title: {
    flex: 1,
    fontSize: 18,
    fontWeight: '600',
    color: '#1F2937',
    marginRight: 12,
  },
  statusBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 6,
  },
  statusText: {
    fontSize: 12,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  description: {
    fontSize: 14,
    color: '#6C757D',
    marginBottom: 12,
    lineHeight: 20,
  },
  infoRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 4,
  },
  infoText: {
    marginLeft: 8,
    fontSize: 14,
    color: '#6C757D',
  },
});



================================================
FILE: components/auction/index.ts
================================================
// Auction components - using simple implementations without performance optimizations



================================================
FILE: components/common/DateTimePicker.tsx
================================================
import React, { useState } from 'react';
import {
  View,
  Platform,
  TouchableOpacity,
  Text,
  StyleSheet,
} from 'react-native';
import DateTimePickerNative from '@react-native-community/datetimepicker';
import { format } from 'date-fns';
import { Calendar } from 'lucide-react-native';

interface DateTimePickerProps {
  value: Date;
  onChange: (date: Date) => void;
  minimumDate?: Date;
  maximumDate?: Date;
  mode?: 'date' | 'time' | 'datetime';
  label?: string;
}

export default function DateTimePicker({
  value,
  onChange,
  minimumDate,
  maximumDate,
  mode = 'date',
  label,
}: DateTimePickerProps) {
  const [show, setShow] = useState(false);

  const handleChange = (event: any, selectedDate?: Date) => {
    setShow(Platform.OS === 'ios');
    if (selectedDate) {
      onChange(selectedDate);
    }
  };

  if (Platform.OS === 'web') {
    return (
      <View style={styles.container}>
        {label && <Text style={styles.label}>{label}</Text>}
        <input
          type={mode === 'datetime' ? 'datetime-local' : mode}
          value={format(value, "yyyy-MM-dd'T'HH:mm")}
          onChange={(e) => {
            const date = new Date(e.target.value);
            if (!isNaN(date.getTime())) {
              onChange(date);
            }
          }}
          min={minimumDate?.toISOString().split('T')[0]}
          max={maximumDate?.toISOString().split('T')[0]}
          style={styles.webInput}
        />
      </View>
    );
  }

  return (
    <View style={styles.container}>
      {label && <Text style={styles.label}>{label}</Text>}
      <TouchableOpacity style={styles.button} onPress={() => setShow(true)}>
        <Calendar size={20} color="#007AFF" />
        <Text style={styles.buttonText}>
          {format(value, mode === 'time' ? 'HH:mm' : 'MMM d, yyyy')}
        </Text>
      </TouchableOpacity>

      {show && (
        <DateTimePickerNative
          value={value}
          mode={mode}
          is24Hour={true}
          onChange={handleChange}
          minimumDate={minimumDate}
          maximumDate={maximumDate}
        />
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    width: '100%',
  },
  label: {
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginBottom: 8,
  },
  button: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E5E5',
  },
  buttonText: {
    marginLeft: 12,
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
  },
  webInput: {
    width: '100%',
    padding: 16,
    fontSize: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E5E5',
    backgroundColor: '#FFFFFF',
    fontFamily: 'Inter_400Regular',
    // outlineStyle is web-only and not supported in React Native
    ...(Platform.OS === 'web' && { outlineStyle: 'none' }),
  },
});



================================================
FILE: components/common/ErrorBoundary.tsx
================================================
import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { Button } from '../ui';

interface ErrorBoundaryProps {
  children: React.ReactNode;
  fallback?: React.ComponentType<{ error: Error; resetError: () => void }>;
  onError?: (error: Error, errorInfo: any) => void;
}

interface ErrorBoundaryState {
  hasError: boolean;
  error: Error | null;
}

const DefaultErrorFallback: React.FC<{
  error: Error;
  resetError: () => void;
}> = ({ error, resetError }) => (
  <View style={styles.container}>
    <Text style={styles.title}>Something went wrong</Text>
    <Text style={styles.message}>
      {error.message || 'An unexpected error occurred'}
    </Text>
    <Button title="Try Again" onPress={resetError} style={styles.button} />
  </View>
);

class ErrorBoundary extends React.Component<
  ErrorBoundaryProps,
  ErrorBoundaryState
> {
  constructor(props: ErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error: Error): ErrorBoundaryState {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: any) {
    console.error('ErrorBoundary caught an error:', error, errorInfo);
    this.props.onError?.(error, errorInfo);
  }

  resetError = () => {
    this.setState({ hasError: false, error: null });
  };

  render() {
    if (this.state.hasError && this.state.error) {
      const FallbackComponent = this.props.fallback || DefaultErrorFallback;
      return (
        <FallbackComponent
          error={this.state.error}
          resetError={this.resetError}
        />
      );
    }

    return this.props.children;
  }
}

// Functional component wrapper for easier use with hooks
export const withErrorBoundary = <P extends object>(
  Component: React.ComponentType<P>,
  errorBoundaryProps?: Omit<ErrorBoundaryProps, 'children'>
) => {
  const WrappedComponent = (props: P) => (
    <ErrorBoundary {...errorBoundaryProps}>
      <Component {...props} />
    </ErrorBoundary>
  );

  WrappedComponent.displayName = `withErrorBoundary(${
    Component.displayName || Component.name || 'Component'
  })`;

  return WrappedComponent;
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
    backgroundColor: '#FFFFFF',
  },
  title: {
    fontSize: 24,
    fontFamily: 'Inter_600SemiBold',
    color: '#DC3545',
    textAlign: 'center',
    marginBottom: 16,
  },
  message: {
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
    textAlign: 'center',
    lineHeight: 24,
    marginBottom: 32,
  },
  button: {
    minWidth: 120,
  },
});

export default ErrorBoundary;



================================================
FILE: components/common/FixDriverVehicleTypes.tsx
================================================
import React, { useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Alert,
  ScrollView,
} from 'react-native';
import { supabase } from '../../lib/supabase';

const VEHICLE_TYPE_MAPPING = {
  Truck: 'large_truck',
  Pickup: 'pickup_truck',
  '3 Wheeler': 'three_wheeler',
  'Mini Truck': 'mini_truck',
  'Large Truck': 'large_truck',
  LCV: 'pickup_truck',
  Tempo: 'mini_truck',
  'Medium Truck': 'medium_truck',
};

export default function FixDriverVehicleTypes() {
  const [isLoading, setIsLoading] = useState(false);
  const [logs, setLogs] = useState<string[]>([]);

  const addLog = (message: string) => {
    setLogs((prev) => [
      ...prev,
      `${new Date().toLocaleTimeString()}: ${message}`,
    ]);
  };

  const fixDriverVehicleTypes = async () => {
    if (isLoading) return;

    setIsLoading(true);
    setLogs([]);
    addLog('🔧 Starting driver vehicle type migration...');

    try {
      // Get all drivers with NULL vehicle_type
      const { data: drivers, error: fetchError } = await supabase
        .from('profiles')
        .select('id, username, bio, vehicle_type')
        .eq('role', 'driver')
        .is('vehicle_type', null);

      if (fetchError) {
        addLog(`❌ Error fetching drivers: ${fetchError.message}`);
        return;
      }

      if (!drivers || drivers.length === 0) {
        addLog('✅ No drivers with NULL vehicle_type found');
        return;
      }

      addLog(`📋 Found ${drivers.length} drivers with NULL vehicle_type`);

      let successCount = 0;
      let skipCount = 0;

      for (const driver of drivers) {
        let vehicleType: string | null = null;

        // Parse vehicle type from bio
        if (driver.bio) {
          for (const [bioText, dbValue] of Object.entries(
            VEHICLE_TYPE_MAPPING
          )) {
            if (driver.bio.includes(`Vehicle Type: ${bioText}`)) {
              vehicleType = dbValue;
              break;
            }
          }
        }

        if (!vehicleType) {
          addLog(
            `⚠️  Could not determine vehicle type for ${driver.username}, setting to pickup_truck`
          );
          vehicleType = 'pickup_truck'; // Default fallback
        }

        // Update the driver's vehicle_type
        const { error: updateError } = await supabase
          .from('profiles')
          .update({ vehicle_type: vehicleType })
          .eq('id', driver.id);

        if (updateError) {
          addLog(
            `❌ Failed to update ${driver.username}: ${updateError.message}`
          );
          skipCount++;
        } else {
          addLog(`✅ Updated ${driver.username}: ${vehicleType}`);
          successCount++;
        }
      }

      addLog(`\n📊 Migration Results:`);
      addLog(`✅ Successfully updated: ${successCount} drivers`);
      addLog(`❌ Failed to update: ${skipCount} drivers`);
      addLog(`📋 Total processed: ${drivers.length} drivers`);

      Alert.alert(
        'Migration Complete',
        `Successfully updated ${successCount} drivers. Check logs for details.`,
        [{ text: 'OK' }]
      );
    } catch (error) {
      addLog(`❌ Migration failed: ${error}`);
      Alert.alert('Error', 'Migration failed. Check logs for details.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Fix Driver Vehicle Types</Text>
        <Text style={styles.subtitle}>
          This will update missing vehicle types for drivers based on their bio
          information
        </Text>
      </View>

      <View style={styles.buttonContainer}>
        <TouchableOpacity
          style={[styles.button, isLoading && styles.buttonDisabled]}
          onPress={fixDriverVehicleTypes}
          disabled={isLoading}
        >
          <Text style={styles.buttonText}>
            {isLoading ? 'Processing...' : 'Fix Vehicle Types'}
          </Text>
        </TouchableOpacity>
      </View>

      <View style={styles.logsContainer}>
        <Text style={styles.logsTitle}>Activity Log:</Text>
        <View style={styles.logsBox}>
          {logs.length === 0 ? (
            <Text style={styles.noLogsText}>
              No activity yet. Click the button to start.
            </Text>
          ) : (
            logs.map((log, index) => (
              <Text key={index} style={styles.logText}>
                {log}
              </Text>
            ))
          )}
        </View>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    backgroundColor: '#007AFF',
    padding: 20,
    paddingTop: 60,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: 'white',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: 'white',
    opacity: 0.9,
  },
  buttonContainer: {
    padding: 20,
  },
  button: {
    backgroundColor: '#34C759',
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
  },
  buttonDisabled: {
    opacity: 0.6,
  },
  buttonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: '600',
  },
  logsContainer: {
    margin: 20,
  },
  logsTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
    marginBottom: 12,
  },
  logsBox: {
    backgroundColor: '#1a1a1a',
    borderRadius: 12,
    padding: 16,
    minHeight: 200,
  },
  noLogsText: {
    color: '#888',
    fontStyle: 'italic',
    textAlign: 'center',
    marginTop: 40,
  },
  logText: {
    color: '#fff',
    fontSize: 14,
    fontFamily: 'monospace',
    marginBottom: 4,
  },
});



================================================
FILE: components/common/index.ts
================================================
export { default as DateTimePicker } from './DateTimePicker';
export { default as FixDriverVehicleTypes } from './FixDriverVehicleTypes';



================================================
FILE: components/forms/AuctionFormShared.tsx
================================================
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  ScrollView,
  Alert,
  ActivityIndicator,
} from 'react-native';
import { Feather } from '@expo/vector-icons';
import { supabase } from '@/lib/supabase';
import { router } from 'expo-router';
import { DateTimePicker } from '@/components/common';

const VEHICLE_TYPES = [
  {
    id: 'three_wheeler',
    title: '3 Wheeler',
    capacity: 'Up to 500kg',
    icon: '🛺',
  },
  {
    id: 'pickup_truck',
    title: 'Pickup Truck',
    capacity: 'Up to 1 ton',
    icon: '🚚',
  },
  {
    id: 'mini_truck',
    title: 'Mini Truck',
    capacity: 'Up to 2 tons',
    icon: '🚛',
  },
  {
    id: 'medium_truck',
    title: 'Medium Truck',
    capacity: 'Up to 5 tons',
    icon: '🚛',
  },
  {
    id: 'large_truck',
    title: 'Large Truck',
    capacity: 'Over 5 tons',
    icon: '🚛',
  },
];

interface AuctionFormData {
  from: string;
  to: string;
  description: string;
  weight: string;
  vehicleType: string | null;
  duration: number;
  customDuration: string;
  isCustomDuration: boolean;
  consignmentDate: Date;
}

interface AuctionFormSharedProps {
  mode: 'create' | 'edit';
  initialData?: Partial<AuctionFormData>;
  auctionId?: string;
  onSuccess?: () => void;
  onCancel?: () => void;
}

export const AuctionFormShared: React.FC<AuctionFormSharedProps> = ({
  mode,
  initialData = {},
  auctionId,
  onSuccess,
  onCancel,
}) => {
  const [from, setFrom] = useState(initialData.from || '');
  const [to, setTo] = useState(initialData.to || '');
  const [description, setDescription] = useState(initialData.description || '');
  const [weight, setWeight] = useState(initialData.weight || '');
  const [vehicleType, setVehicleType] = useState<string | null>(
    initialData.vehicleType || null
  );
  const [duration, setDuration] = useState<number>(initialData.duration || 5);
  const [customDuration, setCustomDuration] = useState(
    initialData.customDuration || ''
  );
  const [isCustomDuration, setIsCustomDuration] = useState(
    initialData.isCustomDuration || false
  );
  const [consignmentDate, setConsignmentDate] = useState<Date>(
    initialData.consignmentDate || new Date()
  );

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [hasBids, setHasBids] = useState(false);
  const [checkingBids, setCheckingBids] = useState(false);

  // Check if auction has bids (for edit mode)
  const checkAuctionHasBids = async (auctionIdToCheck: string) => {
    try {
      setCheckingBids(true);
      const { data: bids, error } = await supabase
        .from('auction_bids')
        .select('id')
        .eq('auction_id', auctionIdToCheck)
        .limit(1);

      if (error) {
        console.error('Error checking bids:', error);
        return false;
      }

      return bids && bids.length > 0;
    } catch (error) {
      console.error('Error checking auction bids:', error);
      return false;
    } finally {
      setCheckingBids(false);
    }
  };

  // Check for bids when in edit mode
  React.useEffect(() => {
    if (mode === 'edit' && auctionId) {
      checkAuctionHasBids(auctionId).then(setHasBids);
    }
  }, [mode, auctionId]);

  // Disable form when auction has bids
  const isFormDisabled = mode === 'edit' && hasBids;
  const [errors, setErrors] = useState<Record<string, string>>({});

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!from.trim()) newErrors.from = 'Pickup location is required';
    if (!to.trim()) newErrors.to = 'Destination is required';
    if (!description.trim()) newErrors.description = 'Description is required';
    if (!weight.trim()) newErrors.weight = 'Weight is required';
    if (!vehicleType) newErrors.vehicleType = 'Vehicle type is required';

    const weightNum = parseFloat(weight);
    if (isNaN(weightNum) || weightNum <= 0) {
      newErrors.weight = 'Please enter a valid weight';
    }

    let finalDuration: number;
    if (isCustomDuration) {
      const parsedDuration = parseInt(customDuration, 10);
      if (isNaN(parsedDuration) || parsedDuration <= 0) {
        newErrors.duration = 'Please enter a valid duration';
      } else {
        finalDuration = parsedDuration;
      }
    } else {
      finalDuration = duration;
    }

    if (finalDuration! < 5) {
      newErrors.duration = 'Duration must be at least 5 minutes';
    }

    if (finalDuration! > 1440) {
      newErrors.duration = 'Duration cannot exceed 24 hours';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async () => {
    if (!validateForm()) return;

    // Prevent editing if auction has bids
    if (mode === 'edit' && auctionId) {
      const auctionHasBids = await checkAuctionHasBids(auctionId);
      if (auctionHasBids) {
        Alert.alert(
          'Cannot Edit Auction',
          'This auction cannot be edited because drivers have already placed bids. Editing would be unfair to the bidders.',
          [{ text: 'OK' }]
        );
        return;
      }
    }

    setIsSubmitting(true);

    try {
      const {
        data: { user },
      } = await supabase.auth.getUser();

      if (!user) {
        Alert.alert('Error', 'Please sign in to continue');
        return;
      }

      const finalDuration = isCustomDuration
        ? parseInt(customDuration, 10)
        : duration;

      const startTime = new Date();
      const endTime = new Date(startTime.getTime() + finalDuration * 60000);

      const auctionData = {
        title: `Delivery from ${from} to ${to}`,
        description: `${description}\nWeight: ${weight} kg\nVehicle Type: ${
          VEHICLE_TYPES.find((v) => v.id === vehicleType)?.title
        }`,
        start_time: startTime.toISOString(),
        end_time: endTime.toISOString(),
        created_by: user.id,
        vehicle_type: vehicleType!,
        consignment_date: consignmentDate.toISOString(),
      };

      if (mode === 'edit' && auctionId) {
        // Update existing auction
        const { error: updateError } = await supabase
          .from('auctions')
          .update({
            title: auctionData.title,
            description: auctionData.description,
            vehicle_type: auctionData.vehicle_type,
          })
          .eq('id', auctionId);

        if (updateError) {
          throw new Error(updateError.message || 'Failed to update auction');
        }

        // Send notifications in background (non-blocking)
        setTimeout(async () => {
          try {
            console.log(
              '🔄 Sending auction updated notification for auction:',
              auctionId
            );
            console.log('📋 Notification data:', {
              from,
              to,
              vehicleType,
              weight,
              weightParsed: parseFloat(weight),
            });

            // Validate data before sending notification
            if (!from || !to || !vehicleType || !weight) {
              console.error('❌ Missing required data for notification:', {
                from: !!from,
                to: !!to,
                vehicleType: !!vehicleType,
                weight: !!weight,
              });
              return;
            }

            const weightNum = parseFloat(weight);
            if (isNaN(weightNum)) {
              console.error('❌ Invalid weight for notification:', weight);
              return;
            }

            const { auctionNotificationService } = await import(
              '@/lib/notifications/auctionNotifications'
            );

            console.log('📞 Calling notifyAuctionUpdated...');
            await auctionNotificationService.notifyAuctionUpdated(
              auctionId,
              `Delivery from ${from} to ${to}`,
              vehicleType,
              weightNum
            );
            console.log('✅ Auction updated notification sent successfully');
          } catch (error) {
            console.error(
              '❌ Error sending auction updated notification:',
              error
            );
            console.error('❌ Full error stack:', error);
          }
        }, 100);

        Alert.alert('Success', 'Auction updated successfully!', [
          {
            text: 'OK',
            onPress: () => {
              if (onSuccess) {
                onSuccess();
              } else {
                router.push(`/auctions/${auctionId}`);
              }
            },
          },
        ]);
      } else {
        // Create new auction
        const { data: createdAuction, error: auctionError } = await supabase
          .from('auctions')
          .insert(auctionData)
          .select()
          .single();

        if (auctionError) {
          throw new Error(auctionError.message || 'Failed to create auction');
        }

        // Send notifications in background (non-blocking)
        setTimeout(async () => {
          try {
            const { auctionNotificationService } = await import(
              '@/lib/notifications/auctionNotifications'
            );
            await auctionNotificationService.notifyNewAuction(
              createdAuction.id,
              `Delivery from ${from} to ${to}`,
              vehicleType!,
              parseFloat(weight)
            );
          } catch {
            // Silently handle notification errors in production
          }
        }, 100);

        Alert.alert(
          'Success',
          `Auction created successfully. It will close in ${finalDuration} ${
            finalDuration === 1 ? 'minute' : 'minutes'
          }.`,
          [
            {
              text: 'OK',
              onPress: () => {
                if (onSuccess) {
                  onSuccess();
                } else {
                  router.push('/auctions');
                }
              },
            },
          ]
        );
      }
    } catch (error: any) {
      console.error('Error submitting auction:', error);
      Alert.alert(
        'Error',
        mode === 'edit'
          ? 'Failed to update auction'
          : 'Failed to create auction'
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleDurationSelect = (value: number) => {
    setDuration(value);
    setIsCustomDuration(false);
    setCustomDuration('');
  };

  const handleCustomDurationPress = () => {
    setIsCustomDuration(true);
  };

  return (
    <ScrollView style={styles.container}>
      <View style={styles.content}>
        <View style={styles.header}>
          <Text style={styles.title}>
            {mode === 'edit' ? 'Edit Auction' : 'Create Auction'}
          </Text>
          <Text style={styles.subtitle}>
            Fill in the details for your delivery request
          </Text>

          {/* Warning message when auction has bids */}
          {mode === 'edit' && checkingBids && (
            <View style={styles.warningContainer}>
              <Feather name="info" size={16} color="#FFA500" />
              <Text style={styles.warningText}>
                Checking if auction has bids...
              </Text>
            </View>
          )}

          {mode === 'edit' && !checkingBids && hasBids && (
            <View style={styles.errorContainer}>
              <Feather name="alert-triangle" size={16} color="#FF6B6B" />
              <Text style={styles.errorWarningText}>
                This auction cannot be edited because drivers have already
                placed bids.
              </Text>
            </View>
          )}
        </View>

        <View style={styles.section}>
          <Text style={styles.label}>Pickup Location</Text>
          <TextInput
            style={[
              styles.input,
              errors.from && styles.inputError,
              isFormDisabled && styles.inputDisabled,
            ]}
            value={from}
            onChangeText={setFrom}
            placeholder="Enter pickup location"
            placeholderTextColor="#6C757D"
            editable={!isFormDisabled}
          />
          {errors.from && <Text style={styles.errorText}>{errors.from}</Text>}
        </View>

        <View style={styles.section}>
          <Text style={styles.label}>Destination</Text>
          <TextInput
            style={[
              styles.input,
              errors.to && styles.inputError,
              isFormDisabled && styles.inputDisabled,
            ]}
            value={to}
            onChangeText={setTo}
            placeholder="Enter destination"
            placeholderTextColor="#6C757D"
            editable={!isFormDisabled}
          />
          {errors.to && <Text style={styles.errorText}>{errors.to}</Text>}
        </View>

        <View style={styles.section}>
          <Text style={styles.label}>Description</Text>
          <TextInput
            style={[
              styles.input,
              styles.textArea,
              errors.description && styles.inputError,
            ]}
            value={description}
            onChangeText={setDescription}
            placeholder="Describe your delivery requirements"
            placeholderTextColor="#6C757D"
            multiline={true}
            numberOfLines={3}
            textAlignVertical="top"
          />
          {errors.description && (
            <Text style={styles.errorText}>{errors.description}</Text>
          )}
        </View>

        <View style={styles.section}>
          <Text style={styles.label}>Weight (kg)</Text>
          <TextInput
            style={[styles.input, errors.weight && styles.inputError]}
            value={weight}
            onChangeText={setWeight}
            placeholder="Enter weight in kg"
            placeholderTextColor="#6C757D"
            keyboardType="numeric"
          />
          {errors.weight && (
            <Text style={styles.errorText}>{errors.weight}</Text>
          )}
        </View>

        <View style={styles.section}>
          <Text style={styles.label}>Vehicle Type</Text>
          {errors.vehicleType && (
            <Text style={styles.errorText}>{errors.vehicleType}</Text>
          )}
          {VEHICLE_TYPES.map((type) => (
            <TouchableOpacity
              key={type.id}
              style={[
                styles.vehicleOption,
                vehicleType === type.id && styles.vehicleOptionSelected,
              ]}
              onPress={() => setVehicleType(type.id)}
            >
              <View style={styles.vehicleInfo}>
                <Text style={styles.vehicleIcon}>{type.icon}</Text>
                <View style={styles.vehicleDetails}>
                  <Text
                    style={[
                      styles.vehicleTitle,
                      vehicleType === type.id && styles.vehicleTitleSelected,
                    ]}
                  >
                    {type.title}
                  </Text>
                  <Text style={styles.vehicleCapacity}>{type.capacity}</Text>
                </View>
              </View>
              {vehicleType === type.id && (
                <Feather name="check-circle" size={24} color="#007AFF" />
              )}
            </TouchableOpacity>
          ))}
        </View>

        <View style={styles.section}>
          <Text style={styles.label}>Consignment Date</Text>
          <DateTimePicker
            value={consignmentDate}
            onChange={setConsignmentDate}
            mode="date"
            minimumDate={new Date()}
          />
        </View>

        <View style={styles.section}>
          <Text style={styles.label}>Auction Duration</Text>
          {errors.duration && (
            <Text style={styles.errorText}>{errors.duration}</Text>
          )}
          <View style={styles.durationOptions}>
            {[5, 10, 15, 30, 60].map((minutes) => (
              <TouchableOpacity
                key={minutes}
                style={[
                  styles.durationOption,
                  duration === minutes &&
                    !isCustomDuration &&
                    styles.durationOptionSelected,
                ]}
                onPress={() => handleDurationSelect(minutes)}
              >
                <Text
                  style={[
                    styles.durationText,
                    duration === minutes &&
                      !isCustomDuration &&
                      styles.durationTextSelected,
                  ]}
                >
                  {minutes}m
                </Text>
              </TouchableOpacity>
            ))}
            <TouchableOpacity
              style={[
                styles.durationOption,
                isCustomDuration && styles.durationOptionSelected,
              ]}
              onPress={handleCustomDurationPress}
            >
              <Text
                style={[
                  styles.durationText,
                  isCustomDuration && styles.durationTextSelected,
                ]}
              >
                Custom
              </Text>
            </TouchableOpacity>
          </View>

          {isCustomDuration && (
            <View style={styles.customDurationContainer}>
              <TextInput
                style={styles.customDurationInput}
                value={customDuration}
                onChangeText={setCustomDuration}
                placeholder="Enter duration in minutes"
                placeholderTextColor="#6C757D"
                keyboardType="numeric"
              />
            </View>
          )}
        </View>

        <View style={styles.buttonContainer}>
          {onCancel && (
            <TouchableOpacity
              style={styles.cancelButton}
              onPress={onCancel}
              disabled={isSubmitting}
            >
              <Text style={styles.cancelButtonText}>Cancel</Text>
            </TouchableOpacity>
          )}
          <TouchableOpacity
            style={[
              styles.submitButton,
              (isSubmitting || isFormDisabled) && styles.submitButtonDisabled,
            ]}
            onPress={handleSubmit}
            disabled={isSubmitting || isFormDisabled}
          >
            {isSubmitting ? (
              <ActivityIndicator color="#fff" />
            ) : (
              <Text style={styles.submitButtonText}>
                {isFormDisabled
                  ? 'Cannot Edit (Has Bids)'
                  : mode === 'edit'
                  ? 'Update Auction'
                  : 'Create Auction'}
              </Text>
            )}
          </TouchableOpacity>
        </View>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  content: {
    paddingHorizontal: 20,
    paddingBottom: 40,
  },
  header: {
    marginTop: 20,
    marginBottom: 30,
  },
  title: {
    fontSize: 24,
    fontFamily: 'Inter_700Bold',
    color: '#1C1C1E',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
  },
  section: {
    marginBottom: 24,
  },
  label: {
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginBottom: 8,
  },
  input: {
    backgroundColor: '#F8F9FA',
    borderWidth: 1,
    borderColor: '#E5E5E5',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
  },
  inputError: {
    borderColor: '#DC3545',
  },
  textArea: {
    height: 80,
    textAlignVertical: 'top',
  },
  errorText: {
    color: '#DC3545',
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    marginTop: 4,
  },
  vehicleOption: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: '#F8F9FA',
    borderWidth: 1,
    borderColor: '#E5E5E5',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
  },
  vehicleOptionSelected: {
    borderColor: '#007AFF',
    backgroundColor: '#E3F2FD',
  },
  vehicleInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  vehicleIcon: {
    fontSize: 24,
    marginRight: 12,
  },
  vehicleDetails: {
    flex: 1,
  },
  vehicleTitle: {
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    marginBottom: 2,
  },
  vehicleTitleSelected: {
    color: '#007AFF',
  },
  vehicleCapacity: {
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
  },
  durationOptions: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 12,
  },
  durationOption: {
    backgroundColor: '#F8F9FA',
    borderWidth: 1,
    borderColor: '#E5E5E5',
    borderRadius: 8,
    paddingHorizontal: 16,
    paddingVertical: 8,
  },
  durationOptionSelected: {
    backgroundColor: '#007AFF',
    borderColor: '#007AFF',
  },
  durationText: {
    fontSize: 14,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
  },
  durationTextSelected: {
    color: '#FFFFFF',
  },
  customDurationContainer: {
    marginTop: 12,
  },
  customDurationInput: {
    backgroundColor: '#F8F9FA',
    borderWidth: 1,
    borderColor: '#E5E5E5',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 8,
    fontSize: 14,
    fontFamily: 'Inter_400Regular',
    color: '#1C1C1E',
  },
  buttonContainer: {
    flexDirection: 'row',
    gap: 12,
    marginTop: 20,
  },
  cancelButton: {
    flex: 1,
    backgroundColor: '#F8F9FA',
    borderWidth: 1,
    borderColor: '#E5E5E5',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
  },
  cancelButtonText: {
    color: '#6C757D',
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
  },
  submitButton: {
    flex: 2,
    backgroundColor: '#007AFF',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
  },
  submitButtonDisabled: {
    opacity: 0.7,
  },
  submitButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
  },
  warningContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFF8E1',
    padding: 12,
    borderRadius: 8,
    marginTop: 12,
    gap: 8,
  },
  warningText: {
    color: '#F57C00',
    fontSize: 14,
    fontFamily: 'Inter_500Medium',
    flex: 1,
  },
  errorContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFEBEE',
    padding: 12,
    borderRadius: 8,
    marginTop: 12,
    gap: 8,
  },
  errorWarningText: {
    color: '#D32F2F',
    fontSize: 14,
    fontFamily: 'Inter_500Medium',
    flex: 1,
  },
  inputDisabled: {
    backgroundColor: '#F5F5F5',
    color: '#9E9E9E',
    opacity: 0.6,
  },
});



================================================
FILE: components/forms/Form.tsx
================================================
import React from 'react';
import { useForm, Controller, FieldValues, Path } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { View, Text, StyleSheet } from 'react-native';
import { z } from 'zod';
import { Input, Button } from '../ui';

interface FormFieldProps<T extends FieldValues> {
  name: Path<T>;
  label?: string;
  placeholder?: string;
  secureTextEntry?: boolean;
  multiline?: boolean;
  required?: boolean;
  control: any;
  errors: any;
}

function FormField<T extends FieldValues>({
  name,
  label,
  placeholder,
  secureTextEntry,
  multiline,
  required,
  control,
  errors,
}: FormFieldProps<T>) {
  const error = errors[name];

  return (
    <View style={styles.fieldContainer}>
      {label && (
        <Text style={styles.label}>
          {label}
          {required && <Text style={styles.required}> *</Text>}
        </Text>
      )}
      <Controller
        name={name}
        control={control}
        render={({ field: { onChange, onBlur, value } }) => (
          <Input
            placeholder={placeholder || label}
            value={value}
            onChangeText={onChange}
            onBlur={onBlur}
            secureTextEntry={secureTextEntry}
            multiline={multiline}
            error={error?.message}
          />
        )}
      />
    </View>
  );
}

interface FormProps<T extends FieldValues> {
  schema: z.ZodSchema<T>;
  onSubmit: (data: T) => void | Promise<void>;
  children: (props: {
    control: any;
    errors: any;
    isValid: boolean;
    isSubmitting: boolean;
    handleSubmit: () => void;
    reset: () => void;
    watch: any;
    FormField: React.ComponentType<FormFieldProps<T>>;
  }) => React.ReactNode;
  defaultValues?: Partial<T>;
}

function Form<T extends FieldValues>({
  schema,
  onSubmit,
  children,
  defaultValues,
}: FormProps<T>) {
  const form = useForm<T>({
    // @ts-ignore - zodResolver type inference issues with generic schemas
    resolver: zodResolver(schema),
    defaultValues: defaultValues as any,
    mode: 'onChange',
  });

  const {
    control,
    handleSubmit,
    formState: { errors, isValid, isSubmitting },
    reset,
    watch,
  } = form;

  const onSubmitHandler = async (data: T) => {
    try {
      await onSubmit(data);
    } catch (error) {
      console.error('Form submission error:', error);
    }
  };

  const BoundFormField = (
    props: Omit<FormFieldProps<T>, 'control' | 'errors'>
  ) => <FormField {...props} control={control} errors={errors} />;

  return (
    <>
      {children({
        control,
        errors,
        isValid,
        isSubmitting,
        handleSubmit: handleSubmit(onSubmitHandler as any),
        reset,
        watch,
        FormField: BoundFormField,
      })}
    </>
  );
}

// Utility component for form actions
interface FormActionsProps {
  onSubmit: () => void;
  onCancel?: () => void;
  submitText?: string;
  cancelText?: string;
  isSubmitting?: boolean;
  isValid?: boolean;
}

const FormActions: React.FC<FormActionsProps> = ({
  onSubmit,
  onCancel,
  submitText = 'Submit',
  cancelText = 'Cancel',
  isSubmitting = false,
  isValid = true,
}) => (
  <View style={styles.actionsContainer}>
    {onCancel && (
      <Button
        title={cancelText}
        variant="outline"
        onPress={onCancel}
        style={styles.cancelButton}
        disabled={isSubmitting}
      />
    )}
    <Button
      title={submitText}
      onPress={onSubmit}
      loading={isSubmitting}
      disabled={!isValid || isSubmitting}
      style={styles.submitButton}
    />
  </View>
);

const styles = StyleSheet.create({
  fieldContainer: {
    marginBottom: 16,
  },
  label: {
    fontSize: 16,
    fontFamily: 'Inter_500Medium',
    color: '#333333',
    marginBottom: 8,
  },
  required: {
    color: '#DC3545',
  },
  inputError: {
    borderColor: '#DC3545',
  },
  actionsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 24,
    gap: 12,
  },
  cancelButton: {
    flex: 1,
  },
  submitButton: {
    flex: 1,
  },
});

export { Form, FormField, FormActions };
export type { FormProps, FormFieldProps, FormActionsProps };



================================================
FILE: components/forms/index.ts
================================================
export { Form, FormField, FormActions } from './Form';
export type { FormProps, FormFieldProps, FormActionsProps } from './Form';
export { default as ProfileForm } from './ProfileForm';
export { AuctionFormShared } from './AuctionFormShared';



================================================
FILE: components/forms/ProfileForm.tsx
================================================
import React from 'react';
import { Controller, useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { View, Text, StyleSheet, ScrollView, Alert } from 'react-native';
import { Button, Input } from '../ui';
import { useAuthStore } from '@/store/auth/authStore';

// Extended user profile interface
interface UserProfile {
  firstName?: string;
  lastName?: string;
  email?: string;
  phone?: string;
  bio?: string;
  location?: string;
}

// Profile form validation schema
const profileSchema = z.object({
  firstName: z
    .string()
    .min(2, 'First name must be at least 2 characters')
    .max(50, 'First name must not exceed 50 characters'),
  lastName: z
    .string()
    .min(2, 'Last name must be at least 2 characters')
    .max(50, 'Last name must not exceed 50 characters'),
  email: z.string().email('Please enter a valid email address'),
  phone: z
    .string()
    .min(10, 'Phone number must be at least 10 digits')
    .max(15, 'Phone number must not exceed 15 digits')
    .regex(/^[+]?[\d\s\-()]+$/, 'Please enter a valid phone number'),
  bio: z.string().max(500, 'Bio must not exceed 500 characters').optional(),
  location: z
    .string()
    .min(3, 'Location must be at least 3 characters')
    .max(100, 'Location must not exceed 100 characters')
    .optional(),
});

type ProfileFormData = z.infer<typeof profileSchema>;

interface ProfileFormProps {
  onSubmit?: (data: ProfileFormData) => void;
  initialValues?: Partial<ProfileFormData>;
}

const ProfileForm: React.FC<ProfileFormProps> = ({
  onSubmit,
  initialValues,
}) => {
  const { user, updateUser } = useAuthStore();

  const {
    control,
    handleSubmit,
    formState: { errors, isValid },
  } = useForm<ProfileFormData>({
    resolver: zodResolver(profileSchema),
    defaultValues: {
      firstName: '',
      lastName: '',
      email: user?.email || '',
      phone: user?.phone || '',
      bio: '',
      location: '',
      ...initialValues,
    },
    mode: 'onChange',
  });

  const handleFormSubmit = async (data: ProfileFormData) => {
    try {
      if (onSubmit) {
        onSubmit(data);
        return;
      }

      // Update user profile
      await updateUser(data);
      Alert.alert('Success', 'Profile updated successfully!');
    } catch (error: any) {
      Alert.alert(
        'Error',
        error.message || 'Failed to update profile. Please try again.'
      );
    }
  };

  return (
    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>
      <View style={styles.form}>
        <Text style={styles.title}>Edit Profile</Text>

        <View style={styles.row}>
          <View style={styles.halfWidth}>
            <Controller
              control={control}
              name="firstName"
              render={({ field: { onChange, onBlur, value } }) => (
                <Input
                  label="First Name"
                  placeholder="Enter first name"
                  value={value}
                  onChangeText={onChange}
                  onBlur={onBlur}
                  error={errors.firstName?.message}
                />
              )}
            />
          </View>

          <View style={styles.halfWidth}>
            <Controller
              control={control}
              name="lastName"
              render={({ field: { onChange, onBlur, value } }) => (
                <Input
                  label="Last Name"
                  placeholder="Enter last name"
                  value={value}
                  onChangeText={onChange}
                  onBlur={onBlur}
                  error={errors.lastName?.message}
                />
              )}
            />
          </View>
        </View>

        <Controller
          control={control}
          name="email"
          render={({ field: { onChange, onBlur, value } }) => (
            <Input
              label="Email"
              placeholder="Enter email address"
              value={value}
              onChangeText={onChange}
              onBlur={onBlur}
              error={errors.email?.message}
              keyboardType="email-address"
              autoCapitalize="none"
            />
          )}
        />

        <Controller
          control={control}
          name="phone"
          render={({ field: { onChange, onBlur, value } }) => (
            <Input
              label="Phone Number"
              placeholder="Enter phone number"
              value={value}
              onChangeText={onChange}
              onBlur={onBlur}
              error={errors.phone?.message}
              keyboardType="phone-pad"
            />
          )}
        />

        <Controller
          control={control}
          name="location"
          render={({ field: { onChange, onBlur, value } }) => (
            <Input
              label="Location"
              placeholder="City, Country (optional)"
              value={value}
              onChangeText={onChange}
              onBlur={onBlur}
              error={errors.location?.message}
            />
          )}
        />

        <Controller
          control={control}
          name="bio"
          render={({ field: { onChange, onBlur, value } }) => (
            <Input
              label="Bio"
              placeholder="Tell us about yourself (optional)"
              value={value}
              onChangeText={onChange}
              onBlur={onBlur}
              error={errors.bio?.message}
              multiline
              numberOfLines={4}
            />
          )}
        />

        <Button
          title={`Update Profile`}
          onPress={handleSubmit(handleFormSubmit)}
          disabled={!isValid}
          style={styles.submitButton}
        />
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  form: {
    padding: 20,
  },
  title: {
    fontSize: 24,
    fontFamily: 'Inter_700Bold',
    color: '#2C3E50',
    marginBottom: 24,
    textAlign: 'center',
  },
  row: {
    flexDirection: 'row',
    gap: 12,
  },
  halfWidth: {
    flex: 1,
  },
  submitButton: {
    marginTop: 32,
    marginBottom: 20,
  },
});

export default ProfileForm;



================================================
FILE: components/map/index.ts
================================================
// Map components will be added here
// For now, export an empty object to avoid import errors
export const MapPlaceholder = {};



================================================
FILE: components/navigation/index.ts
================================================
// Navigation components will be added here
// For now, export an empty object to avoid import errors
export const NavigationPlaceholder = {};



================================================
FILE: components/ui/Button.tsx
================================================
import React from 'react';
import {
  TouchableOpacity,
  Text,
  ActivityIndicator,
  ViewStyle,
  TextStyle,
} from 'react-native';
import { Feather } from '@expo/vector-icons';

interface ButtonProps {
  title?: string;
  children?: React.ReactNode;
  onPress: () => void;
  variant?: 'primary' | 'secondary' | 'outline' | 'danger';
  size?: 'small' | 'medium' | 'large';
  disabled?: boolean;
  loading?: boolean;
  icon?: keyof typeof Feather.glyphMap;
  iconPosition?: 'left' | 'right';
  style?: ViewStyle;
  textStyle?: TextStyle;
  fullWidth?: boolean;
}

const Button: React.FC<ButtonProps> = ({
  title,
  children,
  onPress,
  variant = 'primary',
  size = 'medium',
  disabled = false,
  loading = false,
  icon,
  iconPosition = 'left',
  style,
  textStyle,
  fullWidth = false,
}) => {
  const getVariantStyles = (): ViewStyle => {
    const baseStyles: ViewStyle = {
      borderRadius: 8,
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center',
    };

    switch (variant) {
      case 'primary':
        return {
          ...baseStyles,
          backgroundColor: '#007AFF',
          borderWidth: 1,
          borderColor: '#007AFF',
        };
      case 'secondary':
        return {
          ...baseStyles,
          backgroundColor: '#F2F2F7',
          borderWidth: 1,
          borderColor: '#F2F2F7',
        };
      case 'outline':
        return {
          ...baseStyles,
          backgroundColor: 'transparent',
          borderWidth: 1,
          borderColor: '#007AFF',
        };
      case 'danger':
        return {
          ...baseStyles,
          backgroundColor: '#FF3B30',
          borderWidth: 1,
          borderColor: '#FF3B30',
        };
      default:
        return baseStyles;
    }
  };

  const getSizeStyles = (): ViewStyle => {
    switch (size) {
      case 'small':
        return { paddingHorizontal: 12, paddingVertical: 8 };
      case 'medium':
        return { paddingHorizontal: 16, paddingVertical: 12 };
      case 'large':
        return { paddingHorizontal: 20, paddingVertical: 16 };
      default:
        return { paddingHorizontal: 16, paddingVertical: 12 };
    }
  };

  const getTextStyles = (): TextStyle => {
    const baseTextStyles: TextStyle = {
      fontFamily: 'Inter_600SemiBold',
      textAlign: 'center',
    };

    const sizeTextStyles: TextStyle =
      size === 'small'
        ? { fontSize: 14 }
        : size === 'large'
        ? { fontSize: 18 }
        : { fontSize: 16 };

    const colorTextStyles: TextStyle =
      variant === 'secondary'
        ? { color: '#1C1C1E' }
        : variant === 'outline'
        ? { color: '#007AFF' }
        : { color: '#FFFFFF' };

    return { ...baseTextStyles, ...sizeTextStyles, ...colorTextStyles };
  };

  const getIconColor = (): string => {
    switch (variant) {
      case 'secondary':
        return '#1C1C1E';
      case 'outline':
        return '#007AFF';
      default:
        return '#FFFFFF';
    }
  };

  const renderIcon = () => {
    if (!icon) return null;

    const iconSize = size === 'small' ? 16 : size === 'large' ? 20 : 18;
    const iconColor = getIconColor();

    return (
      <Feather
        name={icon}
        size={iconSize}
        color={iconColor}
        style={{
          marginRight: iconPosition === 'left' ? 8 : 0,
          marginLeft: iconPosition === 'right' ? 8 : 0,
        }}
      />
    );
  };

  const combinedStyles: ViewStyle = {
    ...getVariantStyles(),
    ...getSizeStyles(),
    ...(fullWidth && { width: '100%' }),
    ...(disabled && { opacity: 0.6 }),
    ...style,
  };

  const combinedTextStyles: TextStyle = {
    ...getTextStyles(),
    ...textStyle,
  };

  return (
    <TouchableOpacity
      testID="test-button"
      style={combinedStyles}
      onPress={onPress}
      disabled={disabled || loading}
      activeOpacity={0.7}
    >
      {loading ? (
        <ActivityIndicator
          testID="button-loading"
          size="small"
          color={getIconColor()}
          style={{ marginRight: 8 }}
        />
      ) : (
        iconPosition === 'left' && renderIcon()
      )}

      <Text style={combinedTextStyles}>{children || title}</Text>

      {!loading && iconPosition === 'right' && renderIcon()}
    </TouchableOpacity>
  );
};

export default Button;



================================================
FILE: components/ui/Card.tsx
================================================
import React from 'react';
import { View, ViewStyle, TouchableOpacity, Platform } from 'react-native';

interface CardProps {
  children: React.ReactNode;
  style?: ViewStyle;
  onPress?: () => void;
  variant?: 'default' | 'elevated' | 'outlined';
  padding?: 'none' | 'small' | 'medium' | 'large';
  margin?: 'none' | 'small' | 'medium' | 'large';
  backgroundColor?: string;
  borderRadius?: number;
}

const Card: React.FC<CardProps> = ({
  children,
  style,
  onPress,
  variant = 'default',
  padding = 'medium',
  margin = 'none',
  backgroundColor = '#FFFFFF',
  borderRadius = 12,
}) => {
  const getVariantStyles = (): ViewStyle => {
    const baseStyles: ViewStyle = {
      backgroundColor,
      borderRadius,
    };

    switch (variant) {
      case 'elevated':
        return {
          ...baseStyles,
          ...Platform.select({
            ios: {
              shadowColor: '#000',
              shadowOffset: { width: 0, height: 2 },
              shadowOpacity: 0.1,
              shadowRadius: 4,
            },
            android: {
              elevation: 4,
            },
            web: {
              boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)',
            },
          }),
        };
      case 'outlined':
        return {
          ...baseStyles,
          borderWidth: 1,
          borderColor: '#E5E5EA',
        };
      default:
        return {
          ...baseStyles,
          ...Platform.select({
            ios: {
              shadowColor: '#000',
              shadowOffset: { width: 0, height: 1 },
              shadowOpacity: 0.05,
              shadowRadius: 2,
            },
            android: {
              elevation: 1,
            },
            web: {
              boxShadow: '0 1px 3px rgba(0, 0, 0, 0.05)',
            },
          }),
        };
    }
  };

  const getPaddingStyles = (): ViewStyle => {
    switch (padding) {
      case 'none':
        return {};
      case 'small':
        return { padding: 8 };
      case 'medium':
        return { padding: 16 };
      case 'large':
        return { padding: 24 };
      default:
        return { padding: 16 };
    }
  };

  const getMarginStyles = (): ViewStyle => {
    switch (margin) {
      case 'none':
        return {};
      case 'small':
        return { margin: 8 };
      case 'medium':
        return { margin: 16 };
      case 'large':
        return { margin: 24 };
      default:
        return {};
    }
  };

  const combinedStyles: ViewStyle = {
    ...getVariantStyles(),
    ...getPaddingStyles(),
    ...getMarginStyles(),
    ...style,
  };

  if (onPress) {
    return (
      <TouchableOpacity
        style={combinedStyles}
        onPress={onPress}
        activeOpacity={0.7}
      >
        {children}
      </TouchableOpacity>
    );
  }

  return <View style={combinedStyles}>{children}</View>;
};

export default Card;



================================================
FILE: components/ui/Empty.tsx
================================================
import React from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  ViewStyle,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';

interface EmptyProps {
  icon?: keyof typeof Ionicons.glyphMap;
  title?: string;
  description?: string;
  actionText?: string;
  onAction?: () => void;
  style?: ViewStyle;
  iconSize?: number;
  iconColor?: string;
  variant?: 'default' | 'search' | 'network' | 'cart' | 'notifications';
}

const Empty: React.FC<EmptyProps> = ({
  icon,
  title,
  description,
  actionText,
  onAction,
  style,
  iconSize = 64,
  iconColor = '#BDC3C7',
  variant = 'default',
}) => {
  // Predefined variants
  const variants = {
    default: {
      icon: 'document-outline' as keyof typeof Ionicons.glyphMap,
      title: 'No data found',
      description: 'There is no data to display at the moment.',
    },
    search: {
      icon: 'search-outline' as keyof typeof Ionicons.glyphMap,
      title: 'No results found',
      description: 'Try adjusting your search criteria or check your spelling.',
    },
    network: {
      icon: 'cloud-offline-outline' as keyof typeof Ionicons.glyphMap,
      title: 'Connection error',
      description: 'Please check your internet connection and try again.',
    },
    cart: {
      icon: 'bag-outline' as keyof typeof Ionicons.glyphMap,
      title: 'Your cart is empty',
      description: 'Add some items to your cart to get started.',
    },
    notifications: {
      icon: 'notifications-outline' as keyof typeof Ionicons.glyphMap,
      title: 'No notifications',
      description: "You're all caught up! Check back later for updates.",
    },
  };

  const variantConfig = variants[variant];
  const displayIcon = icon || variantConfig.icon;
  const displayTitle = title || variantConfig.title;
  const displayDescription = description || variantConfig.description;

  return (
    <View style={[styles.container, style]}>
      <View style={styles.content}>
        <Ionicons
          name={displayIcon}
          size={iconSize}
          color={iconColor}
          style={styles.icon}
        />

        <Text style={styles.title}>{displayTitle}</Text>

        <Text style={styles.description}>{displayDescription}</Text>

        {actionText && onAction && (
          <TouchableOpacity
            style={styles.actionButton}
            onPress={onAction}
            activeOpacity={0.7}
          >
            <Text style={styles.actionText}>{actionText}</Text>
          </TouchableOpacity>
        )}
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 32,
    paddingVertical: 48,
  },
  content: {
    alignItems: 'center',
    maxWidth: 300,
  },
  icon: {
    marginBottom: 24,
    opacity: 0.6,
  },
  title: {
    fontSize: 20,
    fontFamily: 'Inter_600SemiBold',
    color: '#2C3E50',
    textAlign: 'center',
    marginBottom: 12,
  },
  description: {
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#7F8C8D',
    textAlign: 'center',
    lineHeight: 24,
    marginBottom: 32,
  },
  actionButton: {
    backgroundColor: '#007AFF',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  actionText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontFamily: 'Inter_600SemiBold',
    textAlign: 'center',
  },
});

export default Empty;



================================================
FILE: components/ui/EmptyState.tsx
================================================
import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ViewStyle,
  TextStyle,
  Image,
  ImageSourcePropType,
} from 'react-native';
import { Feather } from '@expo/vector-icons';

interface EmptyStateProps {
  title?: string;
  description?: string;
  icon?: string;
  image?: ImageSourcePropType;
  buttonText?: string;
  onButtonPress?: () => void;
  style?: ViewStyle;
  titleStyle?: TextStyle;
  descriptionStyle?: TextStyle;
  iconSize?: number;
  iconColor?: string;
}

const EmptyState: React.FC<EmptyStateProps> = ({
  title = 'No data found',
  description = "There's nothing to show here yet.",
  icon = 'inbox',
  image,
  buttonText,
  onButtonPress,
  style,
  titleStyle,
  descriptionStyle,
  iconSize = 64,
  iconColor = '#6C757D',
}) => {
  return (
    <View style={[styles.container, style]}>
      {image ? (
        <Image source={image} style={styles.image} resizeMode="contain" />
      ) : (
        <Feather name={icon as any} size={iconSize} color={iconColor} />
      )}

      <Text style={[styles.title, titleStyle]}>{title}</Text>

      {description && (
        <Text style={[styles.description, descriptionStyle]}>
          {description}
        </Text>
      )}

      {buttonText && onButtonPress && (
        <TouchableOpacity
          style={styles.button}
          onPress={onButtonPress}
          activeOpacity={0.8}
        >
          <Text style={styles.buttonText}>{buttonText}</Text>
        </TouchableOpacity>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 40,
  },
  image: {
    width: 120,
    height: 120,
    marginBottom: 24,
  },
  title: {
    fontSize: 20,
    fontFamily: 'Inter_600SemiBold',
    color: '#333333',
    textAlign: 'center',
    marginTop: 24,
    marginBottom: 8,
  },
  description: {
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
    textAlign: 'center',
    lineHeight: 24,
    marginBottom: 32,
  },
  button: {
    backgroundColor: '#007AFF',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
    marginTop: 16,
  },
  buttonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontFamily: 'Inter_500Medium',
    textAlign: 'center',
  },
});

export default EmptyState;



================================================
FILE: components/ui/index.ts
================================================
export { default as Button } from './Button';
export { default as Input } from './Input';
export { default as Card } from './Card';
export { default as Modal } from './Modal';
export { default as Loading } from './Loading';
export { default as Empty } from './Empty';



================================================
FILE: components/ui/Input.tsx
================================================
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  ViewStyle,
  TextStyle,
  TextInputProps,
} from 'react-native';
import { Feather } from '@expo/vector-icons';

interface InputProps extends Omit<TextInputProps, 'style'> {
  label?: string;
  error?: string;
  icon?: keyof typeof Feather.glyphMap;
  leftIcon?: keyof typeof Feather.glyphMap;
  rightIcon?: keyof typeof Feather.glyphMap;
  onRightIconPress?: () => void;
  containerStyle?: ViewStyle;
  inputStyle?: TextStyle;
  labelStyle?: TextStyle;
  errorStyle?: TextStyle;
  variant?: 'default' | 'filled' | 'outlined';
  size?: 'small' | 'medium' | 'large';
  required?: boolean;
}

const Input: React.FC<InputProps> = ({
  label,
  error,
  icon,
  leftIcon,
  rightIcon,
  onRightIconPress,
  containerStyle,
  inputStyle,
  labelStyle,
  errorStyle,
  variant = 'outlined',
  size = 'medium',
  secureTextEntry,
  required,
  ...textInputProps
}) => {
  const [isPasswordVisible, setIsPasswordVisible] = useState(false);
  const [isFocused, setIsFocused] = useState(false);

  const getContainerStyles = (): ViewStyle => {
    const baseStyles: ViewStyle = {
      marginBottom: 16,
    };

    return { ...baseStyles };
  };

  const getInputContainerStyles = (): ViewStyle => {
    const baseStyles: ViewStyle = {
      flexDirection: 'row',
      alignItems: 'center',
      borderRadius: 8,
    };

    const sizeStyles: ViewStyle =
      size === 'small'
        ? { paddingHorizontal: 12, paddingVertical: 8 }
        : size === 'large'
        ? { paddingHorizontal: 16, paddingVertical: 16 }
        : { paddingHorizontal: 14, paddingVertical: 12 };

    const variantStyles: ViewStyle = (() => {
      switch (variant) {
        case 'filled':
          return {
            backgroundColor: '#F2F2F7',
            borderWidth: 0,
          };
        case 'outlined':
          return {
            backgroundColor: '#FFFFFF',
            borderWidth: 1,
            borderColor: error ? '#FF3B30' : isFocused ? '#007AFF' : '#E5E5EA',
          };
        default:
          return {
            backgroundColor: '#FFFFFF',
            borderBottomWidth: 1,
            borderBottomColor: error
              ? '#FF3B30'
              : isFocused
              ? '#007AFF'
              : '#E5E5EA',
            borderRadius: 0,
          };
      }
    })();

    return { ...baseStyles, ...sizeStyles, ...variantStyles };
  };

  const getInputStyles = (): TextStyle => {
    const baseStyles: TextStyle = {
      flex: 1,
      fontFamily: 'Inter_400Regular',
      fontSize: size === 'small' ? 14 : size === 'large' ? 18 : 16,
      color: '#1C1C1E',
    };

    return baseStyles;
  };

  const getLabelStyles = (): TextStyle => {
    const baseStyles: TextStyle = {
      fontFamily: 'Inter_600SemiBold',
      fontSize: 14,
      color: '#1C1C1E',
      marginBottom: 6,
    };

    return baseStyles;
  };

  const getErrorStyles = (): TextStyle => {
    const baseStyles: TextStyle = {
      fontFamily: 'Inter_400Regular',
      fontSize: 12,
      color: '#FF3B30',
      marginTop: 4,
    };

    return baseStyles;
  };

  const getIconColor = (): string => {
    return error ? '#FF3B30' : isFocused ? '#007AFF' : '#8E8E93';
  };

  const getIconSize = (): number => {
    return size === 'small' ? 16 : size === 'large' ? 22 : 20;
  };

  const handlePasswordToggle = () => {
    setIsPasswordVisible(!isPasswordVisible);
  };

  const actualSecureTextEntry = secureTextEntry ? !isPasswordVisible : false;
  const showPasswordToggle = secureTextEntry;

  return (
    <View style={[getContainerStyles(), containerStyle]}>
      {label && <Text style={[getLabelStyles(), labelStyle]}>{label}</Text>}

      <View style={getInputContainerStyles()}>
        {(icon || leftIcon) && (
          <Feather
            name={icon || leftIcon!}
            size={getIconSize()}
            color={getIconColor()}
            style={{ marginRight: 10 }}
          />
        )}

        <TextInput
          style={[getInputStyles(), inputStyle]}
          secureTextEntry={actualSecureTextEntry}
          placeholderTextColor="#8E8E93"
          onFocus={() => setIsFocused(true)}
          onBlur={() => setIsFocused(false)}
          {...textInputProps}
        />

        {showPasswordToggle && (
          <TouchableOpacity
            onPress={handlePasswordToggle}
            style={{ marginLeft: 10 }}
          >
            <Feather
              name={isPasswordVisible ? 'eye-off' : 'eye'}
              size={getIconSize()}
              color={getIconColor()}
            />
          </TouchableOpacity>
        )}

        {rightIcon && !showPasswordToggle && (
          <TouchableOpacity
            onPress={onRightIconPress}
            style={{ marginLeft: 10 }}
          >
            <Feather
              name={rightIcon}
              size={getIconSize()}
              color={getIconColor()}
            />
          </TouchableOpacity>
        )}
      </View>

      {error && <Text style={[getErrorStyles(), errorStyle]}>{error}</Text>}
    </View>
  );
};

export default Input;



================================================
FILE: components/ui/Loading.tsx
================================================
import React from 'react';
import {
  View,
  Text,
  ActivityIndicator,
  StyleSheet,
  ViewStyle,
  TextStyle,
} from 'react-native';

interface LoadingProps {
  size?: 'small' | 'large';
  color?: string;
  text?: string;
  overlay?: boolean;
  style?: ViewStyle;
  textStyle?: TextStyle;
}

const Loading: React.FC<LoadingProps> = ({
  size = 'large',
  color = '#007AFF',
  text = 'Loading...',
  overlay = false,
  style,
  textStyle,
}) => {
  const containerStyle = overlay ? styles.overlay : styles.inline;

  return (
    <View style={[containerStyle, style]}>
      <ActivityIndicator size={size} color={color} />
      {text && <Text style={[styles.text, textStyle]}>{text}</Text>}
    </View>
  );
};

const styles = StyleSheet.create({
  overlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1000,
  },
  inline: {
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  text: {
    marginTop: 12,
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
    color: '#6C757D',
    textAlign: 'center',
  },
});

export default Loading;



================================================
FILE: components/ui/Modal.tsx
================================================
import React from 'react';
import {
  View,
  Text,
  Modal as RNModal,
  TouchableOpacity,
  StyleSheet,
  Platform,
  ViewStyle,
  TextStyle,
} from 'react-native';
import { Feather } from '@expo/vector-icons';

interface ModalProps {
  visible: boolean;
  onClose: () => void;
  title?: string;
  children: React.ReactNode;
  size?: 'small' | 'medium' | 'large' | 'fullscreen';
  showCloseButton?: boolean;
  closeOnBackdrop?: boolean;
  animationType?: 'slide' | 'fade' | 'none';
  style?: ViewStyle;
  contentStyle?: ViewStyle;
  titleStyle?: TextStyle;
}

const Modal: React.FC<ModalProps> = ({
  visible,
  onClose,
  title,
  children,
  size = 'medium',
  showCloseButton = true,
  closeOnBackdrop = true,
  animationType = 'slide',
  style,
  contentStyle,
  titleStyle,
}) => {
  const getModalSize = (): ViewStyle => {
    switch (size) {
      case 'small':
        return {
          width: '80%',
          maxHeight: '40%',
        };
      case 'medium':
        return {
          width: '90%',
          maxHeight: '70%',
        };
      case 'large':
        return {
          width: '95%',
          maxHeight: '85%',
        };
      case 'fullscreen':
        return {
          width: '100%',
          height: '100%',
          margin: 0,
          borderRadius: 0,
        };
      default:
        return {
          width: '90%',
          maxHeight: '70%',
        };
    }
  };

  const handleBackdropPress = () => {
    if (closeOnBackdrop) {
      onClose();
    }
  };

  return (
    <RNModal
      visible={visible}
      transparent
      animationType={animationType}
      onRequestClose={onClose}
    >
      <View style={styles.backdrop}>
        <TouchableOpacity
          style={styles.backdropTouchable}
          activeOpacity={1}
          onPress={handleBackdropPress}
        >
          <View style={[styles.modal, getModalSize(), style]}>
            <TouchableOpacity activeOpacity={1} onPress={() => {}}>
              {/* Header */}
              {(title || showCloseButton) && (
                <View style={styles.header}>
                  {title && (
                    <Text style={[styles.title, titleStyle]}>{title}</Text>
                  )}
                  {showCloseButton && (
                    <TouchableOpacity
                      style={styles.closeButton}
                      onPress={onClose}
                      hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
                    >
                      <Feather name="x" size={24} color="#8E8E93" />
                    </TouchableOpacity>
                  )}
                </View>
              )}

              {/* Content */}
              <View style={[styles.content, contentStyle]}>{children}</View>
            </TouchableOpacity>
          </View>
        </TouchableOpacity>
      </View>
    </RNModal>
  );
};

const styles = StyleSheet.create({
  backdrop: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  backdropTouchable: {
    flex: 1,
    width: '100%',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modal: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    margin: 20,
    ...Platform.select({
      ios: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 10 },
        shadowOpacity: 0.25,
        shadowRadius: 20,
      },
      android: {
        elevation: 8,
      },
      web: {
        boxShadow: '0 10px 40px rgba(0, 0, 0, 0.25)',
      },
    }),
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingTop: 20,
    paddingBottom: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#F2F2F7',
  },
  title: {
    flex: 1,
    fontSize: 20,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
  },
  closeButton: {
    marginLeft: 16,
  },
  content: {
    padding: 20,
  },
});

export default Modal;



================================================
FILE: config/env.ts
================================================
/**
 * Environment configuration
 * This file manages environment variables and provides defaults
 */

import Constants from 'expo-constants';

// Get environment variables with fallbacks
const getEnvVar = (name: string, fallback?: string): string => {
  const value = Constants.expoConfig?.extra?.[name] || process.env[name] || fallback;
  if (!value) {
    throw new Error(`Environment variable ${name} is required but not set`);
  }
  return value;
};

// Environment configuration
export const ENV = {
  // App Environment
  NODE_ENV: process.env.NODE_ENV || 'development',
  isDevelopment: process.env.NODE_ENV === 'development',
  isProduction: process.env.NODE_ENV === 'production',

  // Supabase Configuration
  SUPABASE_URL: getEnvVar('EXPO_PUBLIC_SUPABASE_URL'),
  SUPABASE_ANON_KEY: getEnvVar('EXPO_PUBLIC_SUPABASE_ANON_KEY'),

  // API Configuration
  API_URL: getEnvVar('EXPO_PUBLIC_API_URL', 'https://api.airavatl.com'),

  // App Configuration
  APP_NAME: 'AiravatL',
  APP_VERSION: Constants.expoConfig?.version || '1.0.0',

  // Feature Flags
  ENABLE_ANALYTICS: getEnvVar('EXPO_PUBLIC_ENABLE_ANALYTICS', 'false') === 'true',
  ENABLE_CRASH_REPORTING: getEnvVar('EXPO_PUBLIC_ENABLE_CRASH_REPORTING', 'false') === 'true',
  ENABLE_PUSH_NOTIFICATIONS: getEnvVar('EXPO_PUBLIC_ENABLE_PUSH_NOTIFICATIONS', 'true') === 'true',
} as const;

// Validate required environment variables
export function validateEnvironment(): void {
  const requiredVars = [
    'EXPO_PUBLIC_SUPABASE_URL',
    'EXPO_PUBLIC_SUPABASE_ANON_KEY',
  ];

  const missingVars = requiredVars.filter(varName => {
    try {
      getEnvVar(varName);
      return false;
    } catch {
      return true;
    }
  });

  if (missingVars.length > 0) {
    throw new Error(
      `Missing required environment variables: ${missingVars.join(', ')}\n` +
      'Please check your .env.local file and ensure all required variables are set.'
    );
  }
}



================================================
FILE: config/index.ts
================================================
export * from './env';
// export * from './api';
// export * from './storage';
// export * from './app';



================================================
FILE: constants/api.ts
================================================
// API endpoints configuration
export const API_ENDPOINTS = {
  AUTH: {
    LOGIN: '/auth/login',
    LOGOUT: '/auth/logout',
    REGISTER: '/auth/register',
    REFRESH: '/auth/refresh',
  },
  AUCTIONS: {
    LIST: '/auctions',
    CREATE: '/auctions/create',
    UPDATE: (id: string) => `/auctions/${id}`,
    DELETE: (id: string) => `/auctions/${id}`,
    BID: (id: string) => `/auctions/${id}/bid`,
  },
  USERS: {
    PROFILE: '/users/profile',
    UPDATE: '/users/update',
    VEHICLES: '/users/vehicles',
  },
  NOTIFICATIONS: {
    LIST: '/notifications',
    MARK_READ: (id: string) => `/notifications/${id}/read`,
    PREFERENCES: '/notifications/preferences',
  },
} as const;

// API Configuration
export const API_CONFIG = {
  TIMEOUT: 10000,
  RETRY_ATTEMPTS: 3,
  RETRY_DELAY: 1000,
} as const;



================================================
FILE: constants/colors.ts
================================================
// Color palette for the application
export const COLORS = {
  // Primary colors
  primary: {
    50: '#eff6ff',
    100: '#dbeafe',
    200: '#bfdbfe',
    300: '#93c5fd',
    400: '#60a5fa',
    500: '#3b82f6',
    600: '#2563eb',
    700: '#1d4ed8',
    800: '#1e40af',
    900: '#1e3a8a',
  },

  // Secondary colors
  secondary: {
    50: '#f8fafc',
    100: '#f1f5f9',
    200: '#e2e8f0',
    300: '#cbd5e1',
    400: '#94a3b8',
    500: '#64748b',
    600: '#475569',
    700: '#334155',
    800: '#1e293b',
    900: '#0f172a',
  },

  // Status colors
  success: {
    50: '#f0fdf4',
    500: '#22c55e',
    700: '#15803d',
  },

  warning: {
    50: '#fffbeb',
    500: '#f59e0b',
    700: '#a16207',
  },

  error: {
    50: '#fef2f2',
    500: '#ef4444',
    700: '#b91c1c',
  },

  // Neutral colors
  white: '#ffffff',
  black: '#000000',
  transparent: 'transparent',

  // Text colors
  text: {
    primary: '#1e293b',
    secondary: '#64748b',
    disabled: '#94a3b8',
    inverse: '#ffffff',
  },

  // Background colors
  background: {
    primary: '#ffffff',
    secondary: '#f8fafc',
    tertiary: '#f1f5f9',
  },

  // Border colors
  border: {
    light: '#e2e8f0',
    medium: '#cbd5e1',
    dark: '#94a3b8',
  },
} as const;



================================================
FILE: constants/dimensions.ts
================================================
import { Dimensions } from 'react-native';

// Get device dimensions
const { width: screenWidth, height: screenHeight } = Dimensions.get('window');

// Screen dimensions
export const DIMENSIONS = {
  screen: {
    width: screenWidth,
    height: screenHeight,
  },

  // Breakpoints for responsive design
  breakpoints: {
    sm: 640,
    md: 768,
    lg: 1024,
    xl: 1280,
  },

  // Common spacing values
  spacing: {
    xs: 4,
    sm: 8,
    md: 16,
    lg: 24,
    xl: 32,
    '2xl': 48,
    '3xl': 64,
  },

  // Border radius values
  borderRadius: {
    none: 0,
    sm: 4,
    md: 8,
    lg: 12,
    xl: 16,
    '2xl': 24,
    full: 9999,
  },

  // Header heights
  header: {
    default: 56,
    large: 96,
  },

  // Tab bar height
  tabBar: {
    height: 60,
  },

  // Common component sizes
  button: {
    small: {
      height: 32,
      paddingHorizontal: 12,
    },
    medium: {
      height: 40,
      paddingHorizontal: 16,
    },
    large: {
      height: 48,
      paddingHorizontal: 24,
    },
  },

  input: {
    height: 48,
    paddingHorizontal: 16,
  },
} as const;

// Helper functions
export const isSmallScreen = screenWidth < 375;
export const isMediumScreen = screenWidth >= 375 && screenWidth < 414;
export const isLargeScreen = screenWidth >= 414;



================================================
FILE: constants/fonts.ts
================================================
// Font configuration
export const FONTS = {
  // Font families
  families: {
    'jakarta-regular': 'PlusJakartaSans-Regular',
    'jakarta-medium': 'PlusJakartaSans-Medium',
    'jakarta-semibold': 'PlusJakartaSans-SemiBold',
    'jakarta-bold': 'PlusJakartaSans-Bold',
    'inter': 'Inter',
  },

  // Font sizes
  sizes: {
    xs: 12,
    sm: 14,
    base: 16,
    lg: 18,
    xl: 20,
    '2xl': 24,
    '3xl': 30,
    '4xl': 36,
    '5xl': 48,
  },

  // Font weights
  weights: {
    light: '300',
    normal: '400',
    medium: '500',
    semibold: '600',
    bold: '700',
    extrabold: '800',
  },

  // Line heights
  lineHeights: {
    none: 1,
    tight: 1.25,
    snug: 1.375,
    normal: 1.5,
    relaxed: 1.625,
    loose: 2,
  },
} as const;



================================================
FILE: constants/index.ts
================================================
// Main exports for constants
export * from './api';
export * from './colors';
export * from './fonts';
export * from './routes';
export * from './storage-keys';
export * from './dimensions';



================================================
FILE: constants/routes.ts
================================================
// Route names and navigation paths
export const ROUTES = {
  // Authentication routes
  AUTH: {
    SIGN_IN: '/(auth)/sign-in',
    SIGN_UP: '/(auth)/sign-up',
  },

  // Main tab routes
  TABS: {
    HOME: '/(tabs)/',
    AUCTIONS: '/(tabs)/auctions',
    CREATE_AUCTION: '/(tabs)/create-auction',
    PROFILE: '/(tabs)/profile',
  },

  // Auction related routes
  AUCTION: {
    LIST: '/(tabs)/auctions',
    DETAIL: '/(tabs)/auctions/[id]',
    CREATE: '/(tabs)/auctions/create',
    PAYMENT_INFO: '/(tabs)/auctions/payment-info',
  },

  // Info pages
  INFO: {
    ABOUT: '/(tabs)/info/about',
    CONTACT: '/(tabs)/info/contact',
    PRIVACY: '/(tabs)/info/privacy',
  },

  // Other routes
  NOT_FOUND: '/+not-found',
} as const;

// Route parameters
export const ROUTE_PARAMS = {
  AUCTION_ID: 'id',
  USER_ID: 'userId',
} as const;



================================================
FILE: constants/storage-keys.ts
================================================
// Storage keys for AsyncStorage and SecureStore
export const STORAGE_KEYS = {
  // Authentication
  AUTH_TOKEN: 'auth_token',
  REFRESH_TOKEN: 'refresh_token',
  USER_SESSION: 'user_session',
  USER_CREDENTIALS: 'user_credentials',

  // User preferences
  USER_PREFERENCES: 'user_preferences',
  NOTIFICATION_SETTINGS: 'notification_settings',
  THEME_PREFERENCE: 'theme_preference',
  LANGUAGE_PREFERENCE: 'language_preference',

  // App state
  ONBOARDING_COMPLETED: 'onboarding_completed',
  FIRST_TIME_USER: 'first_time_user',
  APP_VERSION: 'app_version',

  // Push notifications
  PUSH_TOKEN: 'push_token',
  NOTIFICATION_PERMISSIONS: 'notification_permissions',

  // Auction specific
  DRAFT_AUCTION: 'draft_auction',
  FAVORITE_AUCTIONS: 'favorite_auctions',
  RECENT_SEARCHES: 'recent_searches',
} as const;



================================================
FILE: hooks/index.ts
================================================
// Export all hooks
export { useAuth } from './useAuth';
export { useFrameworkReady } from './useFrameworkReady';
export { usePushNotifications } from './usePushNotifications';
export { useKeyboard } from './useKeyboard';
export { useAppState } from './useAppState';
export { useNetwork } from './useNetwork';



================================================
FILE: hooks/useAppState.ts
================================================
import { useState, useEffect, useRef } from 'react';
import { AppState, AppStateStatus } from 'react-native';

interface UseAppStateReturn {
  appState: AppStateStatus;
  isActive: boolean;
  isBackground: boolean;
  isInactive: boolean;
}

export const useAppState = (): UseAppStateReturn => {
  const appState = useRef(AppState.currentState);
  const [appStateVisible, setAppStateVisible] = useState(appState.current);

  useEffect(() => {
    const subscription = AppState.addEventListener('change', (nextAppState) => {
      appState.current = nextAppState;
      setAppStateVisible(nextAppState);
    });

    return () => subscription?.remove();
  }, []);

  return {
    appState: appStateVisible,
    isActive: appStateVisible === 'active',
    isBackground: appStateVisible === 'background',
    isInactive: appStateVisible === 'inactive',
  };
};



================================================
FILE: hooks/useAuth.ts
================================================
import { useEffect, useState, useRef } from 'react';
import { Session } from '@supabase/supabase-js';
import { supabase } from '@/lib/supabase';
import { authStorage } from '@/lib/storage';

export function useAuth() {
  const [session, setSession] = useState<Session | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isInitialized, setIsInitialized] = useState(false);
  const isInitializing = useRef(false);

  useEffect(() => {
    // Prevent multiple initializations
    if (isInitializing.current) return;
    isInitializing.current = true;

    let mounted = true;

    async function initializeAuth() {
      try {
        
        // First, check current session from Supabase
        const { data: { session: currentSession }, error } = await supabase.auth.getSession();
        
        if (currentSession && !error) {
          if (mounted) {
            setSession(currentSession);
            await authStorage.saveSession(currentSession);
          }
        } else {
          // Try to get stored session as fallback
          const storedSession = await authStorage.getSession();
          
          if (storedSession && await authStorage.isSessionValid(storedSession)) {
            if (__DEV__) {
              console.log('✅ Valid stored session found');
            }
            if (mounted) {
              setSession(storedSession);
            }
          } else {
            await authStorage.clearAll();
            if (mounted) {
              setSession(null);
            }
          }
        }
      } catch {
        // Don't crash the app due to auth errors - just clear storage and continue
        try {
          await authStorage.clearAll();
        } catch {
          // Silently handle storage errors
        }
        if (mounted) {
          setSession(null);
        }
      } finally {
        if (mounted) {
          setIsLoading(false);
          setIsInitialized(true);
        }
      }
    }

    // Initialize auth state
    initializeAuth();

    // Set up auth state change listener
    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, currentSession) => {
      if (!mounted) return;

      if (__DEV__) {
        console.log('🔄 Auth state change:', event, {
          sessionExists: !!currentSession,
          userId: currentSession?.user?.id || 'None'
        });
      }

      try {
        if (event === 'SIGNED_OUT') {
          await authStorage.clearAll();
          setSession(null);
          setIsLoading(false);
          setIsInitialized(true);
        } else if (event === 'SIGNED_IN' && currentSession?.user?.id) {
          await authStorage.saveSession(currentSession);
          setSession(currentSession);
          setIsLoading(false);
          setIsInitialized(true);
          if (__DEV__) {
            console.log('✅ Auth state updated for SIGNED_IN, user:', currentSession.user.id);
          }
        } else if (event === 'TOKEN_REFRESHED' && currentSession) {
          await authStorage.saveSession(currentSession);
          setSession(currentSession);
          setIsLoading(false);
          setIsInitialized(true);
        }
      } catch (error) {
        if (__DEV__) {
          console.error('❌ Auth state change error:', error);
        }
      }
    });

    // Cleanup function
    return () => {
      mounted = false;
      subscription.unsubscribe();
    };
  }, []);

  return {
    session,
    isLoading,
    isInitialized,
  };
}


================================================
FILE: hooks/useAuthEnhanced.ts
================================================
import { useEffect } from 'react';
import { supabase } from '@/lib/supabase';
import { authStorage } from '@/lib/storage/storage';
import { useAuthStore } from '@/store/auth';

/**
 * Enhanced useAuth hook that integrates with Zustand store
 * This provides a centralized authentication state management
 */
export function useAuthWithStore() {
  const {
    session,
    isLoading,
    isInitialized,
    setSession,
    setLoading,
    setInitialized,
    logout,
  } = useAuthStore();

  useEffect(() => {
    let mounted = true;

    async function initializeAuth() {
      try {
        setLoading(true);

        // Try to get session from storage first
        try {
          const storedSession = await authStorage.getSession();
          if (storedSession && mounted) {
            setSession(storedSession);
          }
        } catch {
          // Silently handle storage errors
        }

        // Get current session from Supabase
        const { data: { session: currentSession } } = await supabase.auth.getSession();

        if (mounted) {
          if (currentSession) {
            await authStorage.saveSession(currentSession);
            setSession(currentSession);
          } else {
            setSession(null);
          }
        }
      } catch {
        if (mounted) {
          setSession(null);
        }
      } finally {
        if (mounted) {
          setLoading(false);
          setInitialized(true);
        }
      }
    }

    // Initialize auth state
    initializeAuth();

    // Set up auth state change listener
    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, currentSession) => {
      if (!mounted) return;

      try {
        if (event === 'SIGNED_OUT') {
          await authStorage.clearAll();
          setSession(null);
          setLoading(false);
          setInitialized(true);
        } else if (event === 'SIGNED_IN' && currentSession?.user?.id) {
          await authStorage.saveSession(currentSession);
          setSession(currentSession);
          setLoading(false);
          setInitialized(true);
        } else if (event === 'TOKEN_REFRESHED' && currentSession) {
          await authStorage.saveSession(currentSession);
          setSession(currentSession);
          setLoading(false);
          setInitialized(true);
        }
      } catch {
        // Silently handle auth state change errors
      }
    });

    // Cleanup function
    return () => {
      mounted = false;
      subscription.unsubscribe();
    };
  }, [setSession, setLoading, setInitialized]);

  return {
    session,
    user: session?.user || null,
    isLoading,
    isInitialized,
    isAuthenticated: !!session?.user,
    logout,
  };
}

// Re-export the original hook for backward compatibility
// export { useAuth } from './useAuth.original';



================================================
FILE: hooks/useAuthSimplified.ts
================================================
// Simplified and optimized auth hook - removes duplicate storage conflicts
import { useEffect, useState } from 'react';
import { Session } from '@supabase/supabase-js';
import { supabase } from '@/lib/supabase';

/**
 * Simplified useAuth hook focused on performance
 * Removes duplicate storage management that was causing conflicts
 */
export function useAuthSimplified() {
  const [session, setSession] = useState<Session | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isInitialized, setIsInitialized] = useState(false);

  useEffect(() => {
    let mounted = true;

    async function initializeAuth() {
      try {
        // Only use Supabase's built-in session management
        const { data: { session: currentSession } } = await supabase.auth.getSession();
        
        if (mounted) {
          setSession(currentSession);
          setIsLoading(false);
          setIsInitialized(true);
        }
      } catch (error) {
        console.error('Auth initialization error:', error);
        if (mounted) {
          setSession(null);
          setIsLoading(false);
          setIsInitialized(true);
        }
      }
    }

    // Initialize auth state
    initializeAuth();

    // Set up auth state change listener with minimal overhead
    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, currentSession) => {
      if (!mounted) return;

      // Only update state, don't duplicate storage operations
      setSession(currentSession);
      setIsLoading(false);
      setIsInitialized(true);
    });

    // Cleanup function
    return () => {
      mounted = false;
      subscription.unsubscribe();
    };
  }, []);

  return {
    session,
    user: session?.user || null,
    isLoading,
    isInitialized,
    isAuthenticated: !!session?.user,
  };
}



================================================
FILE: hooks/useFrameworkReady.ts
================================================
import { useEffect } from 'react';

declare global {
  interface Window {
    frameworkReady?: () => void;
  }
}

export function useFrameworkReady() {
  useEffect(() => {
    try {
      // Only call frameworkReady if it exists and we're in a web environment
      if (typeof window !== 'undefined' && window.frameworkReady) {
        window.frameworkReady();
      }
    } catch (error) {
      console.warn('Framework ready hook error:', error);
    }
  }, []);
}



================================================
FILE: hooks/useKeyboard.ts
================================================
import { useState, useEffect } from 'react';
import { Keyboard } from 'react-native';

interface UseKeyboardReturn {
  keyboardVisible: boolean;
  keyboardHeight: number;
}

export const useKeyboard = (): UseKeyboardReturn => {
  const [keyboardVisible, setKeyboardVisible] = useState(false);
  const [keyboardHeight, setKeyboardHeight] = useState(0);

  useEffect(() => {
    const keyboardDidShowListener = Keyboard.addListener(
      'keyboardDidShow',
      (e) => {
        setKeyboardVisible(true);
        setKeyboardHeight(e.endCoordinates.height);
      }
    );

    const keyboardDidHideListener = Keyboard.addListener(
      'keyboardDidHide',
      () => {
        setKeyboardVisible(false);
        setKeyboardHeight(0);
      }
    );

    return () => {
      keyboardDidShowListener?.remove();
      keyboardDidHideListener?.remove();
    };
  }, []);

  return {
    keyboardVisible,
    keyboardHeight,
  };
};



================================================
FILE: hooks/useNetwork.ts
================================================
import { useState, useEffect } from 'react';

interface UseNetworkReturn {
  isConnected: boolean | null;
  isInternetReachable: boolean | null;
  type: string | null;
}

export const useNetwork = (): UseNetworkReturn => {
  const [isConnected, setIsConnected] = useState<boolean | null>(null);
  const [isInternetReachable, setIsInternetReachable] = useState<boolean | null>(null);
  const [type, setType] = useState<string | null>(null);

  useEffect(() => {
    // This is a simplified version - you would need to install @react-native-community/netinfo
    // For now, we'll assume connection is available
    setIsConnected(true);
    setIsInternetReachable(true);
    setType('wifi');
  }, []);

  return {
    isConnected,
    isInternetReachable,
    type,
  };
};



================================================
FILE: hooks/usePushNotifications.ts
================================================
// hooks/usePushNotifications.ts
import { useState, useEffect, useRef } from 'react';
import * as Notifications from 'expo-notifications';
import Constants from 'expo-constants';
import { pushNotificationService, handleNotificationResponse } from '@/lib/notifications/pushNotifications';
import { supabase } from '@/lib/supabase';

export interface UsePushNotificationsReturn {
  expoPushToken: string | undefined;
  notification: Notifications.Notification | undefined;
  error: string | null;
  isLoading: boolean;
  registerForPushNotifications: () => Promise<void>;
}

export const usePushNotifications = (): UsePushNotificationsReturn => {
  const [expoPushToken, setExpoPushToken] = useState<string | undefined>();
  const [notification, setNotification] = useState<Notifications.Notification | undefined>();
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const notificationListener = useRef<Notifications.Subscription | null>(null);
  const responseListener = useRef<Notifications.Subscription | null>(null);

  const registerForPushNotifications = async () => {
    setIsLoading(true);
    setError(null);

    try {
      const token = await pushNotificationService.registerForPushNotificationsAsync();

      if (token) {
        setExpoPushToken(token);

        // Save token to database if user is authenticated
        const { data: { user }, error: userError } = await supabase.auth.getUser();

        if (userError) {
          setError('Failed to get user session. Push notifications may not work properly.');
          return;
        }

        if (user) {
          try {
            await pushNotificationService.savePushTokenToDatabase(token, user.id);
            if (__DEV__) {
              console.log('✅ Push token saved successfully');
            }
          } catch (saveError) {
            const errorMessage = saveError instanceof Error ? saveError.message : 'Unknown error';
            console.error('❌ Failed to save push token:', errorMessage);
            setError(`Push token generated but failed to save: ${errorMessage}`);
          }
        } else {
          setError('No user session found. Please sign in to enable push notifications.');
        }
      } else {
        // Handle cases where token generation returns undefined
        if (Constants.appOwnership === 'expo') {
          setError('Push notifications have limitations in Expo Go. Build a development build for full functionality.');
        } else {
          setError('Failed to register for push notifications. Please check your device settings and try again.');
        }
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to register for push notifications';
      setError(errorMessage);

      // Don't show technical errors to users in production
      if (Constants.appOwnership !== 'expo') {
        setError('Failed to set up push notifications. Please try again or contact support if the problem persists.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    // Register notification listeners
    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {
      setNotification(notification);
    });

    responseListener.current = Notifications.addNotificationResponseReceivedListener(handleNotificationResponse);

    // Cleanup listeners on unmount
    return () => {
      if (notificationListener.current) {
        Notifications.removeNotificationSubscription(notificationListener.current);
      }
      if (responseListener.current) {
        Notifications.removeNotificationSubscription(responseListener.current);
      }
    };
  }, []);

  return {
    expoPushToken,
    notification,
    error,
    isLoading,
    registerForPushNotifications,
  };
};



================================================
FILE: lib/supabase.ts
================================================
// lib/supabase.ts
import 'whatwg-fetch';
import 'react-native-url-polyfill/auto';

import AsyncStorage from '@react-native-async-storage/async-storage';
import { createClient } from '@supabase/supabase-js';
import { Database } from '@/types/supabase';

// Get Supabase configuration from environment variables with fallbacks
const supabaseUrl =
  process.env.EXPO_PUBLIC_SUPABASE_URL || process.env.VITE_SUPABASE_URL;
const supabaseAnonKey =
  process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY || process.env.VITE_SUPABASE_ANON_KEY;

// Validate environment variables
if (!supabaseUrl || !supabaseAnonKey) {
  console.error('Environment check:');
  console.error('EXPO_PUBLIC_SUPABASE_URL:', supabaseUrl);
  console.error('EXPO_PUBLIC_SUPABASE_ANON_KEY:', supabaseAnonKey ? 'Present' : 'Missing');
  throw new Error(
    'Missing Supabase environment variables. Please check your .env file and ensure EXPO_PUBLIC_SUPABASE_URL and EXPO_PUBLIC_SUPABASE_ANON_KEY are set.'
  );
}

// Additional validation to ensure we don't have placeholder values
if (supabaseUrl.includes('$') || supabaseUrl === 'your_supabase_url_here') {
  console.error('Invalid Supabase URL detected:', supabaseUrl);
  throw new Error('Supabase URL contains placeholder values. Please check your environment configuration.');
}

if (supabaseAnonKey.includes('$') || supabaseAnonKey === 'your_supabase_anon_key_here') {
  throw new Error('Supabase Anon Key contains placeholder values. Please check your environment configuration.');
}

// Create a single Supabase client
export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage: AsyncStorage,      // persist tokens on device
    persistSession: true,       // keep session between app launches
    autoRefreshToken: true,     // refresh when tokens expire
    detectSessionInUrl: false,  // not needed in RN
    debug: __DEV__,             // helpful logs in dev
  },
});



================================================
FILE: lib/api/auctions.ts
================================================
import { supabase } from '../supabase';
import type { Auction, Bid } from '../../store/auction';

export interface CreateAuctionData {
  title: string;
  description: string;
  starting_price: number;
  end_time: string;
  vehicle_type: string;
  route_from: string;
  route_to: string;
  estimated_distance: number;
  load_type: string;
}

export interface CreateBidData {
  auction_id: string;
  amount: number;
}

export const auctionsApi = {
  // Get all auctions with optional filters
  getAll: async (filters?: {
    status?: string;
    vehicle_type?: string;
    limit?: number;
    offset?: number;
  }): Promise<Auction[]> => {
    let query = supabase
      .from('auctions')
      .select(`
        *,
        profiles:consigner_id (
          id,
          username,
          role
        ),
        bids (
          id,
          amount,
          status,
          driver_id,
          created_at
        )
      `)
      .order('created_at', { ascending: false });

    if (filters?.status && filters.status !== 'all') {
      query = query.eq('status', filters.status);
    }

    if (filters?.vehicle_type && filters.vehicle_type !== 'all') {
      query = query.eq('vehicle_type', filters.vehicle_type);
    }

    if (filters?.limit) {
      query = query.limit(filters.limit);
    }

    if (filters?.offset) {
      query = query.range(filters.offset, filters.offset + (filters.limit || 10) - 1);
    }

    const { data, error } = await query;

    if (error) {
      throw new Error(`Failed to fetch auctions: ${error.message}`);
    }

    if (error) {
      console.error('Failed to fetch auctions:', error);
      return [];
    }

    // @ts-ignore - Temporary type assertion for production assessment
    return (data as any[]) || [];
  },

  // Get single auction by ID
  getById: async (id: string): Promise<Auction | null> => {
    const { data, error } = await supabase
      .from('auctions')
      .select(`
        *,
        profiles:consigner_id (
          id,
          username,
          role
        ),
        bids (
          id,
          amount,
          status,
          driver_id,
          created_at,
          profiles:driver_id (
            id,
            username
          )
        )
      `)
      .eq('id', id)
      .single();

    if (error) {
      console.error('Failed to fetch auction:', error);
      return null;
    }

    if (!data) return null;

    return {
      id: data.id,
      title: data.title,
      description: data.description,
      starting_price: data.starting_price,
      current_bid: data.current_highest_bid,
      end_time: data.end_time,
      status: data.status,
      vehicle_type: data.vehicle_type,
      route_from: data.pickup_location || data.route_from || '',
      route_to: data.destination || data.route_to || '',
      estimated_distance: data.estimated_distance || 0,
      load_type: data.load_type || data.vehicle_type || '',
      consigner_id: data.consigner_id,
      winning_bid_id: data.winner_id,
      created_at: data.created_at,
      updated_at: data.updated_at
    };
  },

  // Create new auction
  create: async (auctionData: CreateAuctionData): Promise<Auction> => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      throw new Error('User not authenticated');
    }

    const { data, error } = await supabase
      .from('auctions')
      .insert({
        ...auctionData,
        consigner_id: user.id,
        status: 'active',
      })
      .select()
      .single();

    if (error) {
      console.error('Failed to create auction:', error);
      throw new Error('Failed to create auction');
    }

    // Transform database response to match Auction interface
    return {
      id: data.id,
      title: data.title || '',
      description: data.description || '',
      starting_price: data.starting_price || 0,
      current_bid: data.current_highest_bid || 0,
      end_time: data.end_time || '',
      status: data.status || 'active',
      vehicle_type: data.vehicle_type || '',
      route_from: data.pickup_location || '',
      route_to: data.destination || '',
      estimated_distance: data.estimated_distance || 0,
      load_type: data.load_type || '',
      consigner_id: data.consigner_id || '',
      winning_bid_id: data.winner_id,
      created_at: data.created_at || '',
      updated_at: data.updated_at || ''
    } as Auction;
  },

  // Update auction
  update: async (id: string, updates: Partial<Auction>): Promise<Auction> => {
    const { data, error } = await supabase
      .from('auctions')
      .update(updates)
      .eq('id', id)
      .select()
      .single();

    if (error) {
      console.error('Failed to update auction:', error);
      throw new Error('Failed to update auction');
    }

    return data as Auction;
  },

  // Delete auction
  delete: async (id: string): Promise<void> => {
    const { error } = await supabase
      .from('auctions')
      .delete()
      .eq('id', id);

    if (error) {
      throw new Error(`Failed to delete auction: ${error.message}`);
    }
  },

  // Get auctions by consigner
  getByConsigner: async (consignerId: string): Promise<Auction[]> => {
    const { data, error } = await supabase
      .from('auctions')
      .select(`
        *,
        bids (
          id,
          amount,
          status,
          driver_id,
          created_at
        )
      `)
      .eq('consigner_id', consignerId)
      .order('created_at', { ascending: false });

    if (error) {
      throw new Error(`Failed to fetch consigner auctions: ${error.message}`);
    }

    return data || [];
  },
};

export const bidsApi = {
  // Create new bid
  create: async (bidData: CreateBidData): Promise<Bid> => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      throw new Error('User not authenticated');
    }

    const { data, error } = await supabase
      .from('bids')
      .insert({
        ...bidData,
        driver_id: user.id,
        status: 'active',
      })
      .select()
      .single();

    if (error) {
      throw new Error(`Failed to create bid: ${error.message}`);
    }

    return data;
  },

  // Get bids by driver
  getByDriver: async (driverId: string): Promise<Bid[]> => {
    const { data, error } = await supabase
      .from('bids')
      .select(`
        *,
        auctions (
          id,
          title,
          status,
          end_time
        )
      `)
      .eq('driver_id', driverId)
      .order('created_at', { ascending: false });

    if (error) {
      throw new Error(`Failed to fetch driver bids: ${error.message}`);
    }

    return data || [];
  },

  // Update bid
  update: async (id: string, updates: Partial<Bid>): Promise<Bid> => {
    const { data, error } = await supabase
      .from('bids')
      .update(updates)
      .eq('id', id)
      .select()
      .single();

    if (error) {
      throw new Error(`Failed to update bid: ${error.message}`);
    }

    return data;
  },

  // Withdraw bid
  withdraw: async (id: string): Promise<Bid> => {
    return bidsApi.update(id, { status: 'withdrawn' });
  },
};



================================================
FILE: lib/api/client.ts
================================================
import { supabase } from '../supabase';

export class ApiError extends Error {
  constructor(
    message: string,
    public statusCode?: number,
    public code?: string
  ) {
    super(message);
    this.name = 'ApiError';
  }
}

export class ApiClient {
  private baseURL: string;

  constructor() {
    this.baseURL = process.env.EXPO_PUBLIC_API_URL || '';
  }

  async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<T> {
    try {
      const session = await supabase.auth.getSession();
      const token = session.data.session?.access_token;

      const url = `${this.baseURL}${endpoint}`;
      const response = await fetch(url, {
        headers: {
          'Content-Type': 'application/json',
          ...(token && { Authorization: `Bearer ${token}` }),
          ...options.headers,
        },
        ...options,
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new ApiError(
          `API Error: ${response.statusText}`,
          response.status,
          errorText
        );
      }

      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
        return response.json();
      }

      return response.text() as unknown as T;
    } catch (error) {
      if (error instanceof ApiError) {
        throw error;
      }
      throw new ApiError(`Network error: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  async get<T>(endpoint: string): Promise<T> {
    return this.request<T>(endpoint, { method: 'GET' });
  }

  async post<T>(endpoint: string, data?: unknown): Promise<T> {
    return this.request<T>(endpoint, {
      method: 'POST',
      body: data ? JSON.stringify(data) : undefined,
    });
  }

  async put<T>(endpoint: string, data?: unknown): Promise<T> {
    return this.request<T>(endpoint, {
      method: 'PUT',
      body: data ? JSON.stringify(data) : undefined,
    });
  }

  async delete<T>(endpoint: string): Promise<T> {
    return this.request<T>(endpoint, { method: 'DELETE' });
  }
}

export const apiClient = new ApiClient();



================================================
FILE: lib/api/index.ts
================================================
export * from './client';
export * from './auctions';
// export * from './auth';
// export * from './users';
// export * from './notifications';



================================================
FILE: lib/notifications/auctionNotifications.ts
================================================
// lib/auctionNotifications.ts
import { supabase } from '../supabase';
import { pushNotificationService } from './pushNotifications';

export interface AuctionNotificationData {
  auctionId: string;
  auctionTitle: string;
  type: 'auction_created' | 'auction_updated' | 'bid_placed' | 'outbid' | 'auction_won' | 'auction_lost' | 'auction_cancelled' | 'bid_cancelled';
  userId?: string;
  amount?: number;
}

class AuctionNotificationService {
  // Helper method to get user role
  private async getUserRole(userId: string): Promise<'consigner' | 'driver' | null> {
    try {
      // Use database function to bypass RLS
      const { data: roleResult, error } = await supabase
        .rpc('get_user_role', { user_id_param: userId }) as {
          data: string | null;
          error: any;
        };

      if (error || !roleResult) {
        console.log(`⚠️ Could not get role for user ${userId}:`, error);
        return null;
      }

      console.log(`👤 Retrieved role for user ${userId}: ${roleResult}`);
      return roleResult as 'consigner' | 'driver';
    } catch (error) {
      console.error(`❌ Error in getUserRole:`, error);
      return null;
    }
  }

  // Test function to send a notification directly - REMOVED FOR PRODUCTION

  // Send notification to a specific user with role validation
  async sendNotificationToUser(
    userId: string,
    title: string,
    body: string,
    data: AuctionNotificationData,
    targetRole?: 'consigner' | 'driver' // Optional role filtering
  ) {
    try {
      console.log(`📤 sendNotificationToUser called for user ${userId}, title: ${title}, type: ${data.type}`);
      
      // If role filtering is specified, check user's role first
      if (targetRole) {
        const userRole = await this.getUserRole(userId);
        console.log(`👤 User role: ${userRole}, target role: ${targetRole}`);
        if (userRole !== targetRole) {
          console.log(`⚠️ Skipping notification - role mismatch`);
          return;
        }
      }

      // Always save to auction_notifications table first
      console.log(`💾 Saving notification to database...`);
      const { error: dbError } = await supabase.from('auction_notifications').insert({
        user_id: userId,
        auction_id: data.auctionId,
        type: data.type,
        message: `${title}: ${body}`,
      });

      if (dbError) {
        console.error(`❌ Database error:`, dbError);
        return;
      }

      console.log(`✅ Database notification saved successfully`);

      // Get user's push token from database using a query that respects RLS
      console.log(`🔍 Getting user's push token...`);
      
      // For drivers, use our drivers function directly to avoid RLS issues
      if (targetRole === 'driver') {
        console.log(`🚗 Getting driver token via notification function...`);
        const { data: driversData, error: driversError } = await supabase
          .rpc('get_drivers_for_notification', { vehicle_type_param: 'all' }) as {
            data: {
              id: string;
              username: string;
              push_token: string;
              vehicle_type: string;
            }[] | null;
            error: any;
          };
        
        if (!driversError && driversData) {
          const driver = driversData.find(d => d.id === userId);
          if (driver?.push_token) {
            console.log(`📱 Found driver push token`);
            await pushNotificationService.sendPushNotification(
              driver.push_token,
              title,
              body,
              data
            );
            console.log(`✅ Push notification sent successfully to driver ${userId}`);
            return;
          }
        }
        
        console.log(`⚠️ Could not find driver ${userId} in notification function results`);
        return;
      }
      
      // For consigners, try direct query (should work due to RLS allowing own profile access)
      const { data: profile, error } = await supabase
        .from('profiles')
        .select('push_token, role')
        .eq('id', userId)
        .single();

      if (error) {
        console.error(`❌ Error getting consigner profile:`, error);
        return;
      }
      
      if (!profile?.push_token) {
        console.log(`⚠️ No push token found for user ${userId}`);
        return;
      }

      console.log(`📱 Push token found, sending push notification...`);
      // Send push notification
      await pushNotificationService.sendPushNotification(
        profile.push_token,
        title,
        body,
        data
      );

      console.log(`✅ Push notification sent successfully to user ${userId}`);
    } catch (error) {
      console.error(`❌ Error in sendNotificationToUser:`, error);
    }
  }

  // Send notification when someone wins an auction (to driver only)
  async notifyAuctionWinner(auctionId: string, winnerId: string, auctionTitle: string) {
    const data: AuctionNotificationData = {
      auctionId,
      auctionTitle,
      type: 'auction_won',
      userId: winnerId,
    };

    await this.sendNotificationToUser(
      winnerId,
      '🎉 Congratulations! You won an auction!',
      `You are the winner of "${auctionTitle}". Check your profile for details.`,
      data,
      'driver' // Only drivers can win auctions
    );
  }

  // Send notification when auction ends (to drivers who bid)
  async notifyAuctionEnded(auctionId: string, auctionTitle: string) {
    try {
      // Get all bidders for this auction
      const { data: bidders, error } = await supabase
        .from('auction_bids')
        .select('user_id')
        .eq('auction_id', auctionId);

      if (error || !bidders) {
        return;
      }

      // Get unique bidders
      const uniqueBidders = [...new Set(bidders.map(bid => bid.user_id))];

        const data: AuctionNotificationData = {
          auctionId,
          auctionTitle,
          type: 'auction_lost',
        };      // Send notification to all bidders (drivers only)
      for (const bidderId of uniqueBidders) {
        await this.sendNotificationToUser(
          bidderId,
          '🏁 Auction Ended',
          `The auction "${auctionTitle}" has ended. Check the results!`,
          data,
          'driver' // Only drivers place bids
        );
      }
    } catch {
      // Silently handle errors in production
    }
  }

  // Send notification when someone is outbid (to driver only)
  async notifyOutbid(auctionId: string, outbidUserId: string, auctionTitle: string, newBidAmount: number) {
    const data: AuctionNotificationData = {
      auctionId,
      auctionTitle,
      type: 'outbid',
      amount: newBidAmount,
    };

    await this.sendNotificationToUser(
      outbidUserId,
      '📢 You\'ve been outbid!',
      `Someone placed a lower bid (₹${newBidAmount.toFixed(2)}) on "${auctionTitle}". Place a new bid to stay in the race!`,
      data,
      'driver' // Only drivers place bids
    );
  }

  // Send notification for new bid (to consigner only)
  async notifyNewBid(auctionId: string, creatorId: string, auctionTitle: string, bidAmount: number) {
    const data: AuctionNotificationData = {
      auctionId,
      auctionTitle,
      type: 'bid_placed',
      amount: bidAmount,
    };

    await this.sendNotificationToUser(
      creatorId,
      '💰 New Bid Received!',
      `Someone placed a bid of ₹${bidAmount.toFixed(2)} on your auction "${auctionTitle}".`,
      data,
      'consigner' // Only consigners create auctions
    );
  }

  // Send notification when auction is cancelled (to drivers who bid)
  async notifyAuctionCancelled(auctionId: string, auctionTitle: string) {
    try {
      // Get all bidders for this auction
      const { data: bidders, error } = await supabase
        .from('auction_bids')
        .select('user_id')
        .eq('auction_id', auctionId);

      if (error || !bidders) {
        return;
      }

      // Get unique bidders
      const uniqueBidders = [...new Set(bidders.map(bid => bid.user_id))];

      const data: AuctionNotificationData = {
        auctionId,
        auctionTitle,
        type: 'auction_cancelled',
      };

      // Send notification to all bidders (drivers only)
      for (const bidderId of uniqueBidders) {
        await this.sendNotificationToUser(
          bidderId,
          '❌ Auction Cancelled',
          `The auction "${auctionTitle}" has been cancelled by the consigner.`,
          data,
          'driver' // Only drivers place bids
        );
      }
    } catch {
      // Silently handle errors in production
    }
  }

  // Send notification for upcoming auction (24 hours before) - to drivers only
  async notifyUpcomingAuction(auctionId: string, auctionTitle: string, startTime: string) {
    try {
      // Get all users who might be interested (you can customize this logic)
      // For now, we'll get users who have participated in auctions before
      const { data: interestedUsers, error } = await supabase
        .from('auction_bids')
        .select('user_id')
        .limit(100); // Limit to avoid spam

      if (error || !interestedUsers) {
        return;
      }

      // Get unique users
      const uniqueUsers = [...new Set(interestedUsers.map(bid => bid.user_id))];

        const data: AuctionNotificationData = {
          auctionId,
          auctionTitle,
          type: 'auction_cancelled', // Using proper type for upcoming auction
        };      // Send notification to interested users (drivers only)
      for (const userId of uniqueUsers) {
        await this.sendNotificationToUser(
          userId,
          '🚚 New Auction Starting Soon!',
          `"${auctionTitle}" will start at ${new Date(startTime).toLocaleString()}. Don't miss out!`,
          data,
          'driver' // Only drivers bid on auctions
        );
      }
    } catch {
      // Silently handle errors in production
    }
  }

  // Send notification to drivers about new auction opportunity (vehicle-specific)
  async notifyNewAuction(auctionId: string, auctionTitle: string, vehicleType: string, weight: number) {
    try {
      // Get drivers with matching vehicle type OR null vehicle type (for backward compatibility)
      const { data: drivers, error } = await supabase
        .from('profiles')
        .select('id, username, push_token, vehicle_type')
        .eq('role', 'driver')
        .or(`vehicle_type.eq.${vehicleType},vehicle_type.is.null`);

      if (error || !drivers) {
        return;
      }

      // Filter drivers by vehicle type and push token availability
      const validDrivers = drivers.filter(d => d.push_token);

      const data: AuctionNotificationData = {
        auctionId,
        auctionTitle,
        type: 'auction_created', // Match database constraint for new auction notifications
      };

      // Vehicle type display name
      const vehicleDisplayName = vehicleType.split('_').map(word =>
        word.charAt(0).toUpperCase() + word.slice(1)
      ).join(' ');

      // Send notification to drivers (drivers only)
      for (const driver of validDrivers) {
        try {
          await this.sendNotificationToUser(
            driver.id,
            '🚚 New Job Available!',
            `${auctionTitle} • ${vehicleDisplayName} • ${weight}kg`,
            data,
            'driver' // Only drivers should get new auction notifications
          );
        } catch {
          // Log error but continue with other drivers
        }
      }
    } catch {
      // Silently handle errors in production
    }
  }

  // Send notification to drivers about auction update (vehicle-specific)
  async notifyAuctionUpdated(auctionId: string, auctionTitle: string, vehicleType: string, weight: number) {
    try {
      console.log('🔄 Starting notifyAuctionUpdated for auction:', auctionId, 'vehicleType:', vehicleType);
      
      // Use database function to get drivers (bypasses RLS)
      const { data: driversResult, error } = await supabase
        .rpc('get_drivers_for_notification', { vehicle_type_param: vehicleType }) as {
          data: {
            id: string;
            username: string;
            push_token: string;
            vehicle_type: string;
          }[] | null;
          error: any;
        };

      console.log('🔍 Function query results:', {
        driversFound: driversResult?.length || 0,
        error
      });

      if (error) {
        console.error('❌ Error calling notification function:', error);
        return;
      }

      const drivers = driversResult || [];
      if (drivers.length === 0) {
        console.log('⚠️ No drivers found for notifications');
        return;
      }

      console.log('👥 Found drivers:', drivers.length);
      console.log('👥 Raw driver data:', JSON.stringify(drivers, null, 2));

      // All returned drivers already have push tokens (filtered in function)
      const validDrivers = drivers;
      console.log('📱 Valid drivers with push tokens:', validDrivers.length);
      console.log('📱 Valid driver details:', validDrivers.map(d => ({ 
        username: d.username, 
        vehicle_type: d.vehicle_type, 
        push_token: d.push_token ? 'HAS_TOKEN' : 'NO_TOKEN'
      })));

      if (validDrivers.length === 0) {
        console.log('⚠️ No drivers with push tokens found');
        return;
      }
      console.log('📱 Valid driver details:', validDrivers.map(d => ({ 
        username: d.username, 
        vehicle_type: d.vehicle_type, 
        push_token: d.push_token ? 'HAS_TOKEN' : 'NO_TOKEN'
      })));

      if (validDrivers.length === 0) {
        console.log('⚠️ No drivers with push tokens found');
        return;
      }

      const data: AuctionNotificationData = {
        auctionId,
        auctionTitle,
        type: 'auction_updated', // New type for auction updates
      };

      // Vehicle type display name
      const vehicleDisplayName = vehicleType.split('_').map(word =>
        word.charAt(0).toUpperCase() + word.slice(1)
      ).join(' ');

      // Send notification to drivers (drivers only)
      for (const driver of validDrivers) {
        try {
          console.log(`📢 Sending notification to driver ${driver.username} (${driver.id})`);
          await this.sendNotificationToUser(
            driver.id,
            '🔄 Auction Updated!',
            `${auctionTitle} • ${vehicleDisplayName} • ${weight}kg has been updated`,
            data,
            'driver' // Only drivers should get auction update notifications
          );
          console.log(`✅ Notification sent to driver ${driver.username}`);
        } catch (error) {
          console.error(`❌ Error sending notification to driver ${driver.username}:`, error);
        }
      }
      
      console.log('✅ notifyAuctionUpdated completed');
    } catch (error) {
      console.error('❌ Error in notifyAuctionUpdated:', error);
    }
  }
}

export const auctionNotificationService = new AuctionNotificationService();



================================================
FILE: lib/notifications/notificationHelpers.ts
================================================
// lib/notificationHelpers.ts
import { router } from 'expo-router';
import * as Notifications from 'expo-notifications';

export interface NotificationData {
  type: string;
  auctionId?: string;
  userId?: string;
  bidAmount?: number;
  [key: string]: any;
}

/**
 * Enhanced notification response handler with deep linking
 */
export const handleNotificationResponse = (response: Notifications.NotificationResponse) => {
  const data = response.notification.request.content.data as NotificationData;
  
  try {
    switch (data.type) {
      case 'auction_won':
      case 'auction_ended':
      case 'new_bid':
      case 'outbid':
        if (data.auctionId) {
          router.push(`/(tabs)/auctions/${data.auctionId}`);
        }
        break;
        
      case 'auction_completed':
        if (data.auctionId) {
          router.push(`/(tabs)/auctions/${data.auctionId}`);
        } else {
          router.push('/(tabs)/profile');
        }
        break;
        
      default:
        // Default to main auction screen
        router.push('/(tabs)/auctions');
        break;
    }
  } catch {
    // Fallback to main screen
    router.push('/(tabs)');
  }
};

/**
 * Clear all notifications
 */
export const clearAllNotifications = async () => {
  try {
    await Notifications.dismissAllNotificationsAsync();
  } catch {
    // Silently handle errors
  }
};

/**
 * Get notification badge count
 */
export const getBadgeCount = async (): Promise<number> => {
  try {
    return await Notifications.getBadgeCountAsync();
  } catch {
    return 0;
  }
};

/**
 * Set notification badge count
 */
export const setBadgeCount = async (count: number) => {
  try {
    await Notifications.setBadgeCountAsync(count);
  } catch {
    // Silently handle errors
  }
};

/**
 * Clear notification badge
 */
export const clearBadge = async () => {
  await setBadgeCount(0);
};

/**
 * Check if notification permissions are granted
 */
export const hasNotificationPermissions = async (): Promise<boolean> => {
  const { status } = await Notifications.getPermissionsAsync();
  return status === 'granted';
};

/**
 * Format notification for display
 */
export const formatNotificationText = (type: string, data: NotificationData): { title: string, body: string } => {
  switch (type) {
    case 'auction_won':
      return {
        title: '🎉 Congratulations!',
        body: `You won the auction${data.auctionId ? ` with bid ₹${data.bidAmount}` : ''}!`
      };
      
    case 'auction_ended':
      return {
        title: '🏁 Auction Ended',
        body: 'An auction you were interested in has ended. Check the results!'
      };
      
    case 'new_bid':
      return {
        title: '💰 New Bid Received',
        body: `Someone placed a bid${data.bidAmount ? ` of ₹${data.bidAmount}` : ''} on your auction`
      };
      
    case 'outbid':
      return {
        title: '📢 You\'ve been outbid!',
        body: `Someone placed a lower bid${data.bidAmount ? ` (₹${data.bidAmount})` : ''}. Time to bid again!`
      };
      
    case 'auction_cancelled':
      return {
        title: '❌ Auction Cancelled',
        body: 'An auction you were participating in has been cancelled'
      };
      
    default:
      return {
        title: '📱 AiravatL Notification',
        body: 'You have a new notification from AiravatL'
      };
  }
};



================================================
FILE: lib/notifications/pushNotifications.ts
================================================
// lib/pushNotifications.ts
import * as Notifications from 'expo-notifications';
import * as Device from 'expo-device';
import { Platform } from 'react-native';
import Constants from 'expo-constants';
import { supabase } from '../supabase';

// Configure notification handler
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: true,
    shouldShowBanner: true,
    shouldShowList: true,
  }),
});

export interface PushNotificationService {
  registerForPushNotificationsAsync: () => Promise<string | undefined>;
  savePushTokenToDatabase: (token: string, userId: string) => Promise<void>;
  sendPushNotification: (expoPushToken: string, title: string, body: string, data?: any) => Promise<void>;
  schedulePushNotification: (title: string, body: string, seconds: number, data?: any) => Promise<string>;
  cancelScheduledNotification: (notificationId: string) => Promise<void>;
}

class PushNotificationServiceImpl implements PushNotificationService {
  private saveTokenDebounceMap = new Map<string, ReturnType<typeof setTimeout>>();

  async registerForPushNotificationsAsync(): Promise<string | undefined> {
    try {
      // Push notifications require a physical device
      if (!Device.isDevice) {
        return undefined;
      }

      // Set up Android notification channel
      if (Platform.OS === 'android') {
        await Notifications.setNotificationChannelAsync('default', {
          name: 'default',
          importance: Notifications.AndroidImportance.MAX,
          vibrationPattern: [0, 250, 250, 250],
          lightColor: '#FF231F7C',
          sound: 'default',
          enableVibrate: true,
        });
      }

      // Check and request permissions
      const { status: existingStatus } = await Notifications.getPermissionsAsync();
      let finalStatus = existingStatus;

      if (existingStatus !== 'granted') {
        const { status } = await Notifications.requestPermissionsAsync({
          ios: {
            allowAlert: true,
            allowBadge: true,
            allowSound: true,
          },
          android: {
            allowAlert: true,
            allowBadge: true,
            allowSound: true,
          },
        });
        finalStatus = status;
      }

      if (finalStatus !== 'granted') {
        return undefined;
      }

      // Get the push token with better error handling
      try {
        // Use EAS project ID from environment, with secure fallback
        const projectId = Constants.expoConfig?.extra?.eas?.projectId ??
                         Constants.easConfig?.projectId ??
                         process.env.EAS_PROJECT_ID;

        if (!projectId) {
          throw new Error('Project ID not found in app configuration. Please ensure EAS_PROJECT_ID is set in build environment.');
        }

        const tokenData = await Notifications.getExpoPushTokenAsync({
          projectId: projectId,
        });

        if (!tokenData.data) {
          throw new Error('Failed to generate push token - no token data returned');
        }

        return tokenData.data;
      } catch (tokenError) {
        // In Expo Go, token generation often fails - this is expected
        if (Constants.appOwnership === 'expo') {
          return undefined;
        }

        // In production builds, this indicates a configuration issue
        throw new Error(`Push token generation failed: ${tokenError instanceof Error ? tokenError.message : 'Unknown error'}. Please check Firebase/FCM configuration.`);
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error in push notification setup';

      // In production builds, we need to surface configuration errors
      if (Constants.appOwnership !== 'expo') {
        throw new Error(`Push notification setup failed: ${errorMessage}`);
      }

      return undefined;
    }
  }

  async savePushTokenToDatabase(token: string, userId: string): Promise<void> {
    // Debounce multiple rapid calls for the same user
    const debounceKey = `${userId}-${token}`;
    
    if (this.saveTokenDebounceMap.has(debounceKey)) {
      clearTimeout(this.saveTokenDebounceMap.get(debounceKey)!);
    }

    return new Promise((resolve, reject) => {
      const timeoutId = setTimeout(async () => {
        try {
          // Validate inputs
          if (!token || !userId) {
            throw new Error('Invalid token or userId provided');
          }

          // Try to check if token is already saved to avoid unnecessary updates
          // If this fails (e.g., during initial app setup), we'll proceed with the update
          try {
            const { data: currentProfile, error: fetchError } = await supabase
              .from('profiles')
              .select('push_token')
              .eq('id', userId)
              .single();

            // If fetch succeeded and token is the same, skip update
            if (!fetchError && currentProfile?.push_token === token) {
              this.saveTokenDebounceMap.delete(debounceKey);
              resolve();
              return;
            }

            // If fetch failed, log but continue with update
            if (fetchError) {
              console.log('Could not fetch current push token (proceeding with update):', fetchError.message);
            }
          } catch {
            // If profile fetch fails, proceed with update anyway
            console.log('Profile fetch failed during token check, proceeding with update');
          }

          // Proceed with token update
          const { error } = await supabase
            .from('profiles')
            .update({ push_token: token })
            .eq('id', userId);

          if (error) {
            // Check if this is a profile not found error
            if (error.code === 'PGRST116') {
              throw new Error('User profile not found. Please wait for profile setup to complete.');
            }
            
            console.error('Error saving push token:', {
              error,
              userId,
              tokenLength: token.length,
              errorCode: error.code,
              errorMessage: error.message
            });
            throw new Error(`Database error: ${error.message} (Code: ${error.code})`);
          }

          // Success - optionally log in development
          if (__DEV__) {
            console.log('Push token saved successfully for user:', userId);
          }
          
          this.saveTokenDebounceMap.delete(debounceKey);
          resolve();
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : 'Unknown error';
          console.error('Failed to save push token:', {
            error: errorMessage,
            userId,
            tokenLength: token?.length || 0
          });
          this.saveTokenDebounceMap.delete(debounceKey);
          reject(new Error(`Push token save failed: ${errorMessage}`));
        }
      }, 5000); // 5000ms debounce

      this.saveTokenDebounceMap.set(debounceKey, timeoutId);
    });
  }

  async sendPushNotification(
    expoPushToken: string,
    title: string,
    body: string,
    data: any = {}
  ): Promise<void> {
    const message = {
      to: expoPushToken,
      sound: 'default',
      title,
      body,
      data,
    };

    try {
      const response = await fetch('https://exp.host/--/api/v2/push/send', {
        method: 'POST',
        headers: {
          Accept: 'application/json',
          'Accept-encoding': 'gzip, deflate',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(message),
      });

      const result = await response.json();

      if (result.errors) {
        throw new Error(result.errors[0]?.message || 'Failed to send push notification');
      }
    } catch (error) {
      throw error;
    }
  }

  async schedulePushNotification(
    title: string,
    body: string,
    seconds: number,
    data: any = {}
  ): Promise<string> {
    const notificationId = await Notifications.scheduleNotificationAsync({
      content: {
        title,
        body,
        data,
        sound: 'default',
      },
      trigger: {
        type: Notifications.SchedulableTriggerInputTypes.TIME_INTERVAL,
        seconds
      },
    });

    return notificationId;
  }

  async cancelScheduledNotification(notificationId: string): Promise<void> {
    await Notifications.cancelScheduledNotificationAsync(notificationId);
  }
}

export const pushNotificationService = new PushNotificationServiceImpl();

// Export the enhanced notification response handler
export { handleNotificationResponse } from './notificationHelpers';

// Helper function to get notification permissions status
export const getNotificationPermissions = async () => {
  return await Notifications.getPermissionsAsync();
};

// Helper function to check if device supports push notifications
export const canUsePushNotifications = () => {
  return Device.isDevice;
};



================================================
FILE: lib/services/dataService.ts
================================================
[Empty file]


================================================
FILE: lib/services/index.ts
================================================
export * from './dataService';



================================================
FILE: lib/storage/index.ts
================================================
export { authStorage } from './storage';



================================================
FILE: lib/storage/storage.ts
================================================
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Platform } from 'react-native';

const STORAGE_KEYS = {
  AUTH_SESSION: 'auth_session',
  USER_PROFILE: 'user_profile',
} as const;

// Web fallback for AsyncStorage
const webStorage = {
  async getItem(key: string): Promise<string | null> {
    try {
      return localStorage.getItem(key);
    } catch {
      return null;
    }
  },
  async setItem(key: string, value: string): Promise<void> {
    try {
      localStorage.setItem(key, value);
    } catch {
      // Silently fail
    }
  },
  async removeItem(key: string): Promise<void> {
    try {
      localStorage.removeItem(key);
    } catch {
      // Silently fail
    }
  },
  async clear(): Promise<void> {
    try {
      localStorage.clear();
    } catch {
      // Silently fail
    }
  },
};

const storage = Platform.OS === 'web' ? webStorage : AsyncStorage;

export const authStorage = {
  async saveSession(session: any): Promise<void> {
    try {
      await storage.setItem(STORAGE_KEYS.AUTH_SESSION, JSON.stringify(session));
    } catch (error) {
      console.error('Error saving session:', error);
    }
  },

  async getSession(): Promise<any | null> {
    try {
      const sessionData = await storage.getItem(STORAGE_KEYS.AUTH_SESSION);
      return sessionData ? JSON.parse(sessionData) : null;
    } catch (error) {
      console.error('Error getting session:', error);
      return null;
    }
  },

  async saveUserProfile(profile: any): Promise<void> {
    try {
      await storage.setItem(STORAGE_KEYS.USER_PROFILE, JSON.stringify(profile));
    } catch (error) {
      console.error('Error saving user profile:', error);
    }
  },

  async getUserProfile(): Promise<any | null> {
    try {
      const profileData = await storage.getItem(STORAGE_KEYS.USER_PROFILE);
      return profileData ? JSON.parse(profileData) : null;
    } catch (error) {
      console.error('Error getting user profile:', error);
      return null;
    }
  },

  async clearAll(): Promise<void> {
    try {
      await storage.removeItem(STORAGE_KEYS.AUTH_SESSION);
      await storage.removeItem(STORAGE_KEYS.USER_PROFILE);
    } catch (error) {
      console.error('Error clearing storage:', error);
    }
  },

  async isSessionValid(session: any): Promise<boolean> {
    if (!session || !session.access_token || !session.expires_at) {
      return false;
    }

    // Check if session is expired (with 5 minute buffer)
    const expiresAt = new Date(session.expires_at * 1000);
    const now = new Date();
    const bufferTime = 5 * 60 * 1000; // 5 minutes in milliseconds

    return expiresAt.getTime() > now.getTime() + bufferTime;
  },
};


================================================
FILE: lib/utils/format.ts
================================================
import { format, formatDistanceToNow, isAfter, isBefore, parseISO } from 'date-fns';

/**
 * Format a date string or Date object to a readable format
 */
export function formatDate(date: string | Date, formatString = 'MMM dd, yyyy'): string {
  const dateObj = typeof date === 'string' ? parseISO(date) : date;
  return format(dateObj, formatString);
}

/**
 * Format a date to show time remaining or time elapsed
 */
export function formatTimeDistance(date: string | Date, addSuffix = true): string {
  const dateObj = typeof date === 'string' ? parseISO(date) : date;
  return formatDistanceToNow(dateObj, { addSuffix });
}

/**
 * Format currency amount
 */
export function formatCurrency(
  amount: number,
  currency = '₹',
  locale = 'en-IN'
): string {
  return new Intl.NumberFormat(locale, {
    style: 'currency',
    currency: 'INR',
    currencyDisplay: 'symbol',
  }).format(amount).replace('₹', currency);
}

/**
 * Format large numbers with abbreviated units (K, M, B)
 */
export function formatNumber(num: number): string {
  if (num >= 1000000000) {
    return (num / 1000000000).toFixed(1) + 'B';
  }
  if (num >= 1000000) {
    return (num / 1000000).toFixed(1) + 'M';
  }
  if (num >= 1000) {
    return (num / 1000).toFixed(1) + 'K';
  }
  return num.toString();
}

/**
 * Format distance
 */
export function formatDistance(distance: number, unit: 'km' | 'm' = 'km'): string {
  if (unit === 'km') {
    return `${distance.toFixed(1)} km`;
  }
  return `${distance.toFixed(0)} m`;
}

/**
 * Check if auction is active
 */
export function isAuctionActive(endTime: string | Date): boolean {
  const endDate = typeof endTime === 'string' ? parseISO(endTime) : endTime;
  return isAfter(endDate, new Date());
}

/**
 * Check if auction has ended
 */
export function isAuctionEnded(endTime: string | Date): boolean {
  const endDate = typeof endTime === 'string' ? parseISO(endTime) : endTime;
  return isBefore(endDate, new Date());
}

/**
 * Format phone number for Indian format
 */
export function formatPhoneNumber(phone: string): string {
  // Remove all non-numeric characters
  const cleaned = phone.replace(/\D/g, '');

  // Check if it's a valid Indian mobile number
  if (cleaned.length === 10) {
    return `+91 ${cleaned.slice(0, 5)} ${cleaned.slice(5)}`;
  }

  if (cleaned.length === 12 && cleaned.startsWith('91')) {
    const number = cleaned.slice(2);
    return `+91 ${number.slice(0, 5)} ${number.slice(5)}`;
  }

  return phone; // Return original if not recognized format
}

/**
 * Truncate text with ellipsis
 */
export function truncateText(text: string, maxLength: number): string {
  if (text.length <= maxLength) return text;
  return text.slice(0, maxLength - 3) + '...';
}

/**
 * Capitalize first letter of each word
 */
export function titleCase(str: string): string {
  return str.replace(/\w\S*/g, (txt) =>
    txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()
  );
}

/**
 * Generate initials from name
 */
export function getInitials(name: string): string {
  return name
    .split(' ')
    .map(word => word.charAt(0).toUpperCase())
    .slice(0, 2)
    .join('');
}



================================================
FILE: lib/utils/index.ts
================================================
export * from './format';
export * from './validation';
// export * from './helpers';
// export * from './constants';



================================================
FILE: lib/utils/validation.ts
================================================
import { z } from 'zod';

// Common validation schemas

export const emailSchema = z
  .string()
  .email('Please enter a valid email address')
  .min(1, 'Email is required');

export const passwordSchema = z
  .string()
  .min(8, 'Password must be at least 8 characters')
  .regex(/[A-Z]/, 'Password must contain at least one uppercase letter')
  .regex(/[a-z]/, 'Password must contain at least one lowercase letter')
  .regex(/\d/, 'Password must contain at least one number');

export const phoneSchema = z
  .string()
  .regex(/^[6-9]\d{9}$/, 'Please enter a valid 10-digit mobile number');

export const usernameSchema = z
  .string()
  .min(3, 'Username must be at least 3 characters')
  .max(20, 'Username must be less than 20 characters')
  .regex(/^[a-zA-Z0-9_]+$/, 'Username can only contain letters, numbers, and underscores');

// Auth schemas
export const signInSchema = z.object({
  email: emailSchema,
  password: z.string().min(1, 'Password is required'),
});

export const signUpSchema = z.object({
  email: emailSchema,
  password: passwordSchema,
  username: usernameSchema,
  role: z.enum(['consigner', 'driver']).refine((val) => !!val, {
    message: 'Please select a role',
  }),
});

// Auction schemas
export const auctionSchema = z.object({
  title: z
    .string()
    .min(1, 'Title is required')
    .max(100, 'Title must be less than 100 characters'),
  description: z
    .string()
    .min(10, 'Description must be at least 10 characters')
    .max(500, 'Description must be less than 500 characters'),
  starting_price: z
    .number()
    .min(1, 'Starting price must be greater than 0')
    .max(1000000, 'Starting price must be less than ₹10,00,000'),
  end_time: z.string().min(1, 'End time is required'),
  vehicle_type: z.enum([
    'three_wheeler',
    'pickup_truck',
    'mini_truck',
    'medium_truck',
    'large_truck',
  ]).refine((val) => !!val, {
    message: 'Please select a vehicle type',
  }),
  route_from: z
    .string()
    .min(1, 'Pick-up location is required')
    .max(100, 'Pick-up location must be less than 100 characters'),
  route_to: z
    .string()
    .min(1, 'Drop-off location is required')
    .max(100, 'Drop-off location must be less than 100 characters'),
  estimated_distance: z
    .number()
    .min(1, 'Distance must be greater than 0')
    .max(5000, 'Distance must be less than 5000 km'),
  load_type: z
    .string()
    .min(1, 'Load type is required')
    .max(50, 'Load type must be less than 50 characters'),
});

export const bidSchema = z.object({
  amount: z
    .number()
    .min(1, 'Bid amount must be greater than 0')
    .max(1000000, 'Bid amount must be less than ₹10,00,000'),
});

// Profile schemas
export const profileSchema = z.object({
  username: usernameSchema,
  bio: z
    .string()
    .max(200, 'Bio must be less than 200 characters')
    .optional(),
  phone: phoneSchema.optional(),
  vehicle_type: z.enum([
    'three_wheeler',
    'pickup_truck',
    'mini_truck',
    'medium_truck',
    'large_truck',
  ]).optional(),
});

// Type exports for use in components
export type SignInFormData = z.infer<typeof signInSchema>;
export type SignUpFormData = z.infer<typeof signUpSchema>;
export type AuctionFormData = z.infer<typeof auctionSchema>;
export type BidFormData = z.infer<typeof bidSchema>;
export type ProfileFormData = z.infer<typeof profileSchema>;

// Validation helper functions
export function validateEmail(email: string): boolean {
  try {
    emailSchema.parse(email);
    return true;
  } catch {
    return false;
  }
}

export function validatePassword(password: string): boolean {
  try {
    passwordSchema.parse(password);
    return true;
  } catch {
    return false;
  }
}

export function validatePhone(phone: string): boolean {
  try {
    phoneSchema.parse(phone);
    return true;
  } catch {
    return false;
  }
}



================================================
FILE: store/index.ts
================================================
// Main store exports
export * from './auth';
export * from './auction';
export * from './user';
export * from './notification';



================================================
FILE: store/auction/auctionStore.ts
================================================
import { create } from 'zustand';
import { subscribeWithSelector } from 'zustand/middleware';

// Types for auction data
export interface Auction {
  id: string;
  title: string;
  description: string;
  starting_price: number;
  current_bid?: number;
  end_time: string;
  status: 'active' | 'completed' | 'cancelled';
  vehicle_type: string;
  route_from: string;
  route_to: string;
  estimated_distance: number;
  load_type: string;
  consigner_id: string;
  winning_bid_id?: string;
  created_at: string;
  updated_at: string;
}

export interface Bid {
  id: string;
  auction_id: string;
  driver_id: string;
  amount: number;
  status: 'active' | 'withdrawn' | 'accepted' | 'rejected';
  created_at: string;
  updated_at: string;
}

export interface AuctionFilters {
  vehicleType: string;
  priceRange: [number, number];
  status: 'all' | 'active' | 'completed';
  sortBy: 'end_time' | 'starting_price' | 'created_at';
  sortOrder: 'asc' | 'desc';
}

export interface CreateAuctionData {
  title: string;
  description: string;
  startingBid: number;
  reservePrice?: number;
  duration: number;
  category: string;
  location: string;
  condition: 'new' | 'like-new' | 'good' | 'fair' | 'poor';
  images: string[];
}

export interface AuctionState {
  // Data
  auctions: Auction[];
  userBids: Bid[];
  selectedAuction: Auction | null;

  // UI State
  isLoading: boolean;
  isRefreshing: boolean;
  error: string | null;
  filters: AuctionFilters;

  // Actions
  setAuctions: (auctions: Auction[]) => void;
  addAuction: (auction: Auction) => void;
  createAuction: (data: CreateAuctionData) => Promise<void>;
  updateAuction: (id: string, updates: Partial<Auction>) => void;
  removeAuction: (id: string) => void;
  setSelectedAuction: (auction: Auction | null) => void;

  setUserBids: (bids: Bid[]) => void;
  addBid: (bid: Bid) => void;
  updateBid: (id: string, updates: Partial<Bid>) => void;

  setLoading: (loading: boolean) => void;
  setRefreshing: (refreshing: boolean) => void;
  setError: (error: string | null) => void;
  setFilters: (filters: Partial<AuctionFilters>) => void;
  resetFilters: () => void;

  clearAll: () => void;
}

const defaultFilters: AuctionFilters = {
  vehicleType: 'all',
  priceRange: [0, 100000],
  status: 'active',
  sortBy: 'end_time',
  sortOrder: 'asc',
};

export const useAuctionStore = create<AuctionState>()(
  subscribeWithSelector((set, get) => ({
    // Initial state
    auctions: [],
    userBids: [],
    selectedAuction: null,
    isLoading: false,
    isRefreshing: false,
    error: null,
    filters: defaultFilters,

    // Auction actions
    setAuctions: (auctions) => set({ auctions, error: null }),

    addAuction: (auction) => set((state) => ({
      auctions: [auction, ...state.auctions]
    })),

    createAuction: async (data) => {
      set({ isLoading: true, error: null });
      try {
        // Create auction with proper format
        const auction: Auction = {
          id: Date.now().toString(), // Temporary ID - should be generated by backend
          title: data.title,
          description: data.description,
          starting_price: data.startingBid,
          current_bid: undefined,
          end_time: new Date(Date.now() + data.duration * 24 * 60 * 60 * 1000).toISOString(),
          status: 'active',
          vehicle_type: data.category, // Using category as vehicle_type for now
          route_from: data.location,
          route_to: data.location,
          estimated_distance: 0,
          load_type: data.condition,
          consigner_id: 'current-user-id', // Should be actual user ID
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        };

        set((state) => ({
          auctions: [auction, ...state.auctions],
          isLoading: false
        }));
      } catch (error: any) {
        set({ error: error.message || 'Failed to create auction', isLoading: false });
        throw error;
      }
    },

    updateAuction: (id, updates) => set((state) => ({
      auctions: state.auctions.map(auction =>
        auction.id === id ? { ...auction, ...updates } : auction
      ),
      selectedAuction: state.selectedAuction?.id === id
        ? { ...state.selectedAuction, ...updates }
        : state.selectedAuction
    })),

    removeAuction: (id) => set((state) => ({
      auctions: state.auctions.filter(auction => auction.id !== id),
      selectedAuction: state.selectedAuction?.id === id ? null : state.selectedAuction
    })),

    setSelectedAuction: (auction) => set({ selectedAuction: auction }),

    // Bid actions
    setUserBids: (bids) => set({ userBids: bids }),

    addBid: (bid) => set((state) => ({
      userBids: [bid, ...state.userBids]
    })),

    updateBid: (id, updates) => set((state) => ({
      userBids: state.userBids.map(bid =>
        bid.id === id ? { ...bid, ...updates } : bid
      )
    })),

    // UI actions
    setLoading: (isLoading) => set({ isLoading }),
    setRefreshing: (isRefreshing) => set({ isRefreshing }),
    setError: (error) => set({ error }),

    setFilters: (newFilters) => set((state) => ({
      filters: { ...state.filters, ...newFilters }
    })),

    resetFilters: () => set({ filters: defaultFilters }),

    clearAll: () => set({
      auctions: [],
      userBids: [],
      selectedAuction: null,
      isLoading: false,
      isRefreshing: false,
      error: null,
      filters: defaultFilters,
    }),
  }))
);



================================================
FILE: store/auction/index.ts
================================================
export { useAuctionStore } from './auctionStore';
export type { AuctionState, Auction, Bid, AuctionFilters } from './auctionStore';



================================================
FILE: store/auth/authStore.ts
================================================
import { create } from 'zustand';
// import { persist, createJSONStorage } from 'zustand/middleware';
// import AsyncStorage from '@react-native-async-storage/async-storage';
import type { Session, User } from '@supabase/supabase-js';

export interface AuthState {
  user: User | null;
  session: Session | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  isInitialized: boolean;
  setSession: (session: Session | null) => void;
  setUser: (user: User | null) => void;
  setLoading: (loading: boolean) => void;
  setInitialized: (initialized: boolean) => void;
  logout: () => void;
  updateUser: (userData: Partial<User>) => void;
}

export const useAuthStore = create<AuthState>()(
  // Temporarily disabled persistence to fix performance issues
  // persist(
    (set, get) => ({
      user: null,
      session: null,
      isAuthenticated: false,
      isLoading: true,
      isInitialized: false,

      setSession: (session) => {
        set({
          session,
          user: session?.user || null,
          isAuthenticated: !!session?.user,
        });
      },

      setUser: (user) => {
        set({ user, isAuthenticated: !!user });
      },

      setLoading: (isLoading) => {
        set({ isLoading });
      },

      setInitialized: (isInitialized) => {
        set({ isInitialized });
      },

      logout: () => {
        set({
          user: null,
          session: null,
          isAuthenticated: false,
          isLoading: false
        });
      },

      updateUser: (userData) => {
        const currentUser = get().user;
        if (currentUser) {
          set({ user: { ...currentUser, ...userData } });
        }
      },
    })
    // {
    //   name: 'auth-storage',
    //   storage: createJSONStorage(() => AsyncStorage),
    //   partialize: (state) => ({
    //     user: state.user,
    //     session: state.session,
    //     isAuthenticated: state.isAuthenticated,
    //   }),
    // }
  // )
);



================================================
FILE: store/auth/index.ts
================================================
export { useAuthStore } from './authStore';
export type { AuthState } from './authStore';



================================================
FILE: store/notification/index.ts
================================================
export { useNotificationStore } from './notificationStore';
export type { Notification, NotificationSettings } from './notificationStore';



================================================
FILE: store/notification/notificationStore.ts
================================================
import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';
import AsyncStorage from '@react-native-async-storage/async-storage';

export interface Notification {
  id: string;
  title: string;
  body: string;
  type: 'auction' | 'bid' | 'payment' | 'system' | 'general';
  data?: Record<string, any>;
  isRead: boolean;
  isPush: boolean;
  createdAt: string;
  expiresAt?: string;
}

export interface NotificationSettings {
  enabled: boolean;
  sound: boolean;
  vibration: boolean;
  badge: boolean;
  types: {
    auction: boolean;
    bid: boolean;
    payment: boolean;
    system: boolean;
    general: boolean;
  };
  quietHours: {
    enabled: boolean;
    startTime: string; // HH:mm format
    endTime: string; // HH:mm format
  };
}

interface NotificationState {
  notifications: Notification[];
  settings: NotificationSettings;
  unreadCount: number;
  isLoading: boolean;
  error: string | null;
  lastFetch: string | null;

  // Actions
  addNotification: (notification: Omit<Notification, 'id' | 'createdAt'>) => void;
  markAsRead: (id: string) => void;
  markAllAsRead: () => void;
  removeNotification: (id: string) => void;
  clearNotifications: () => void;
  updateSettings: (settings: Partial<NotificationSettings>) => void;
  setNotifications: (notifications: Notification[]) => void;
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;
  getUnreadCount: () => number;
  getNotificationsByType: (type: Notification['type']) => Notification[];
}

const defaultSettings: NotificationSettings = {
  enabled: true,
  sound: true,
  vibration: true,
  badge: true,
  types: {
    auction: true,
    bid: true,
    payment: true,
    system: true,
    general: true,
  },
  quietHours: {
    enabled: false,
    startTime: '22:00',
    endTime: '08:00',
  },
};

export const useNotificationStore = create<NotificationState>()(
  persist(
    (set, get) => ({
      notifications: [],
      settings: defaultSettings,
      unreadCount: 0,
      isLoading: false,
      error: null,
      lastFetch: null,

      addNotification: (notificationData) => {
        const notification: Notification = {
          ...notificationData,
          id: `notification_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
          createdAt: new Date().toISOString(),
        };

        const notifications = [notification, ...get().notifications];
        const unreadCount = notifications.filter(n => !n.isRead).length;

        set({
          notifications,
          unreadCount,
          error: null
        });
      },

      markAsRead: (id) => {
        const notifications = get().notifications.map(notification =>
          notification.id === id
            ? { ...notification, isRead: true }
            : notification
        );
        const unreadCount = notifications.filter(n => !n.isRead).length;

        set({ notifications, unreadCount });
      },

      markAllAsRead: () => {
        const notifications = get().notifications.map(notification => ({
          ...notification,
          isRead: true,
        }));

        set({ notifications, unreadCount: 0 });
      },

      removeNotification: (id) => {
        const notifications = get().notifications.filter(n => n.id !== id);
        const unreadCount = notifications.filter(n => !n.isRead).length;

        set({ notifications, unreadCount });
      },

      clearNotifications: () => {
        set({
          notifications: [],
          unreadCount: 0,
          error: null
        });
      },

      updateSettings: (newSettings) => {
        const settings = { ...get().settings, ...newSettings };

        if (newSettings.types) {
          settings.types = { ...get().settings.types, ...newSettings.types };
        }

        if (newSettings.quietHours) {
          settings.quietHours = { ...get().settings.quietHours, ...newSettings.quietHours };
        }

        set({ settings });
      },

      setNotifications: (notifications) => {
        const unreadCount = notifications.filter(n => !n.isRead).length;
        set({
          notifications,
          unreadCount,
          lastFetch: new Date().toISOString(),
          error: null
        });
      },

      setLoading: (loading) => set({ isLoading: loading }),

      setError: (error) => set({ error }),

      getUnreadCount: () => {
        return get().notifications.filter(n => !n.isRead).length;
      },

      getNotificationsByType: (type) => {
        return get().notifications.filter(n => n.type === type);
      },
    }),
    {
      name: 'notification-storage',
      storage: createJSONStorage(() => AsyncStorage),
      partialize: (state) => ({
        notifications: state.notifications,
        settings: state.settings,
        unreadCount: state.unreadCount,
      }),
    }
  )
);



================================================
FILE: store/user/index.ts
================================================
export { useUserStore } from './userStore';
export type { User, UserPreferences } from './userStore';



================================================
FILE: store/user/userStore.ts
================================================
import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';
import AsyncStorage from '@react-native-async-storage/async-storage';

export interface User {
  id: string;
  email: string;
  name?: string;
  phone?: string;
  avatar?: string;
  isVerified: boolean;
  preferences: UserPreferences;
  createdAt: string;
  updatedAt: string;
}

export interface UserPreferences {
  notifications: {
    push: boolean;
    email: boolean;
    sms: boolean;
    auctionUpdates: boolean;
    bidAlerts: boolean;
    paymentReminders: boolean;
  };
  language: string;
  currency: string;
  theme: 'light' | 'dark' | 'system';
  location: {
    lat?: number;
    lng?: number;
    city?: string;
    state?: string;
  };
}

interface UserState {
  user: User | null;
  preferences: UserPreferences;
  isLoading: boolean;
  error: string | null;

  // Actions
  setUser: (user: User) => void;
  updateUser: (updates: Partial<User>) => void;
  updatePreferences: (preferences: Partial<UserPreferences>) => void;
  clearUser: () => void;
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;
}

const defaultPreferences: UserPreferences = {
  notifications: {
    push: true,
    email: true,
    sms: false,
    auctionUpdates: true,
    bidAlerts: true,
    paymentReminders: true,
  },
  language: 'en',
  currency: 'INR',
  theme: 'system',
  location: {},
};

export const useUserStore = create<UserState>()(
  persist(
    (set, get) => ({
      user: null,
      preferences: defaultPreferences,
      isLoading: false,
      error: null,

      setUser: (user) => {
        set({
          user: {
            ...user,
            preferences: { ...defaultPreferences, ...user.preferences }
          },
          error: null
        });
      },

      updateUser: (updates) => {
        const currentUser = get().user;
        if (currentUser) {
          set({
            user: { ...currentUser, ...updates },
            error: null
          });
        }
      },

      updatePreferences: (newPreferences) => {
        const currentUser = get().user;
        const currentPreferences = get().preferences;

        const updatedPreferences = {
          ...currentPreferences,
          ...newPreferences,
          notifications: {
            ...currentPreferences.notifications,
            ...(newPreferences.notifications || {}),
          },
          location: {
            ...currentPreferences.location,
            ...(newPreferences.location || {}),
          },
        };

        set({ preferences: updatedPreferences });

        if (currentUser) {
          set({
            user: {
              ...currentUser,
              preferences: updatedPreferences,
            },
          });
        }
      },

      clearUser: () => {
        set({
          user: null,
          preferences: defaultPreferences,
          error: null
        });
      },

      setLoading: (loading) => set({ isLoading: loading }),

      setError: (error) => set({ error }),
    }),
    {
      name: 'user-storage',
      storage: createJSONStorage(() => AsyncStorage),
      partialize: (state) => ({
        user: state.user,
        preferences: state.preferences,
      }),
    }
  )
);



================================================
FILE: supabase/README.md
================================================
# Airavatl Auction Platform - Database Documentation

## Overview

This directory contains the complete database schema and migrations for the Airavatl auction platform. The database is built on Supabase (PostgreSQL) with Row Level Security (RLS), real-time subscriptions, and comprehensive audit logging.

## Current Database Schema (Updated: August 7, 2025)

### Core Tables

#### 1. profiles

User management table supporting two roles: `consigner` and `driver`.

**Key Features:**

- References `auth.users` for authentication
- Support for 5 vehicle types
- UPI payment integration
- Push notification tokens
- Phone number validation

**Vehicle Types Supported:**

- `three_wheeler`
- `pickup_truck`
- `mini_truck`
- `medium_truck`
- `large_truck`

#### 2. auctions

Core auction management with enhanced vehicle type support.

**Key Features:**

- Flexible auction duration (5 minutes to 7 days)
- Three status types: `active`, `completed`, `cancelled`
- Winner tracking with bid references
- Consignment date scheduling

#### 3. auction_bids

Bidding system with unique constraints and winner tracking.

**Key Features:**

- Lowest bid wins (reverse auction model)
- Unique constraint per user/auction/amount
- Winning bid tracking
- Positive amount validation

#### 4. auction_notifications

Enhanced notification system with 7 notification types.

**Notification Types:**

- `auction_created` - New auction posted
- `bid_placed` - Bid placed on auction
- `outbid` - User has been outbid
- `auction_won` - User won auction
- `auction_lost` - User lost auction
- `auction_cancelled` - Auction cancelled
- `bid_cancelled` - Bid cancelled

#### 5. auction_audit_logs

Comprehensive audit trail for compliance and debugging.

**Features:**

- JSON details for flexible logging
- User and auction tracking
- Action-based categorization

### Performance Views

#### active_auctions_summary

Optimized view for auction listings with:

- Creator information
- Bidding statistics
- Real-time bid counts
- Current highest bid

#### user_notifications_summary

User notification analytics with:

- Total notification counts
- Unread message counts
- Auction win statistics
- Recent activity tracking

### Database Functions

#### Core Business Functions

- `create_auction_optimized()` - Validated auction creation
- `create_bid_optimized()` - Bidding with business rules
- `close_auction_optimized()` - Auction completion
- `check_and_close_expired_auctions()` - Automated cleanup

#### Enhanced Functions

- `create_auction_fast()` - High-performance auction creation
- `place_bid_fast()` - Optimized bidding
- `get_auction_details_fast()` - Quick auction retrieval
- `get_auctions_paginated()` - Efficient pagination

#### Notification System

- `send_push_notification()` - Push notification delivery
- `create_notification_with_push()` - Combined notification creation
- `test_user_notification()` - Testing utilities

#### Maintenance Functions

- `run_auction_maintenance()` - Database maintenance
- `get_notification_system_status()` - System health checks

### Security & Performance

#### Row Level Security (RLS)

All tables have comprehensive RLS policies:

**Profiles:**

- Users can view all profiles
- Users can only edit their own profile

**Auctions:**

- Drivers see active auctions and won auctions
- Consigners see only their own auctions
- Role-based creation permissions

**Bids:**

- Users see bids for accessible auctions
- Drivers can only bid on active auctions
- Validation against own auctions

**Notifications:**

- Users see only their own notifications
- System can create notifications

#### Performance Optimizations

- 15+ strategic indexes
- Conditional indexes for better performance
- Materialized views for complex queries
- Function-based access patterns

### Migration Files

#### Current Migration Structure

```
supabase/migrations/
├── 00_init_database.sql              # Initial schema
├── 01_core_functions.sql             # Core business functions
├── 02_automation_and_notifications.sql # Notification system
├── 04_complete_database_schema.sql   # Legacy complete schema
├── 10_current_database_complete_schema.sql # Current reference schema
└── [timestamped migrations]          # Production migrations
```

#### Key Migration Files

- **00_init_database.sql** - Core table structure
- **01_core_functions.sql** - Business logic functions
- **02_automation_and_notifications.sql** - Notification system
- **10_current_database_complete_schema.sql** - Current complete reference

### Development Workflow

#### Database Updates

1. **Local Development**: Test changes locally
2. **Migration Creation**: Create timestamped migration
3. **Production Deployment**: Apply via Supabase CLI
4. **Reference Update**: Update reference schema file

### Environment Configuration

#### Required Environment Variables

```env
EXPO_PUBLIC_SUPABASE_URL=your_supabase_url
EXPO_PUBLIC_SUPABASE_ANON_KEY=your_anon_key
```

### Monitoring & Maintenance

#### Health Checks

- Use `get_notification_system_status()` for system health
- Monitor `auction_audit_logs` for unusual activity
- Check `user_notifications_summary` for notification delivery

#### Regular Maintenance

- Run `run_auction_maintenance()` for database cleanup
- Monitor expired auctions with `check_and_close_expired_auctions()`
- Archive old audit logs periodically

### Future Enhancements

#### Planned Features

- Real-time bidding notifications
- Advanced auction scheduling
- Payment integration enhancements
- Mobile app push notification improvements

#### Database Optimizations

- Partitioning for large tables
- Advanced caching strategies
- Real-time sync optimizations

## Support & Documentation

For technical support or questions about the database schema:

1. Check the migration files for implementation details
2. Review the function definitions in `01_core_functions.sql`
3. Refer to Supabase documentation for platform-specific features
4. Use the MCP tools for database operations and queries

## Database Statistics (Current)

- **Tables**: 5 core tables
- **Views**: 2 performance views
- **Functions**: 20+ business functions
- **Indexes**: 15+ performance indexes
- **Policies**: 10+ RLS security policies
- **Vehicle Types**: 5 supported types
- **Notification Types**: 7 notification categories



================================================
FILE: supabase/docs/api-functions.md
================================================
# API Functions Documentation

## Database Functions Reference

This document provides comprehensive documentation for all database functions available in the Airavatl auction platform.

## Core Business Functions

### 1. Auction Management

#### `create_auction_optimized()`

Creates a new auction with comprehensive validation.

```sql
create_auction_optimized(
    p_title text,
    p_description text,
    p_vehicle_type text,
    p_start_time timestamptz,
    p_end_time timestamptz,
    p_consignment_date timestamptz,
    p_created_by uuid
) RETURNS uuid
```

**Parameters:**

- `p_title`: Auction title (required)
- `p_description`: Detailed description (required)
- `p_vehicle_type`: Must be valid vehicle type
- `p_start_time`: Auction start timestamp
- `p_end_time`: Auction end timestamp
- `p_consignment_date`: Pickup/delivery date
- `p_created_by`: Creator's user ID

**Validation:**

- User must be a consigner
- End time must be after start time
- Duration between 5 minutes and 7 days
- Valid vehicle type required

**Returns:** New auction ID (uuid)

#### `close_auction_optimized()`

Closes an auction and determines the winner.

```sql
close_auction_optimized(p_auction_id uuid) RETURNS jsonb
```

**Parameters:**

- `p_auction_id`: ID of auction to close

**Business Logic:**

- Finds lowest bid (reverse auction)
- Updates auction status to 'completed'
- Sets winner and winning bid
- Creates notifications for all participants
- Logs activity for audit trail

**Returns:** JSON response with success status and message

### 2. Bidding System

#### `create_bid_optimized()`

Places a bid with comprehensive validation.

```sql
create_bid_optimized(
    p_auction_id uuid,
    p_user_id uuid,
    p_amount numeric
) RETURNS jsonb
```

**Parameters:**

- `p_auction_id`: Target auction ID
- `p_user_id`: Bidder's user ID
- `p_amount`: Bid amount (must be positive)

**Validation:**

- Auction must be active and not expired
- User must be a driver
- User cannot bid on own auction
- Amount must be positive

**Business Logic:**

- Upserts bid (updates if same amount exists)
- Updates winning bid status
- Creates notifications for outbid users
- Logs bid activity

**Returns:** JSON response with success status

#### `place_bid_fast()`

High-performance bidding function for mobile apps.

```sql
place_bid_fast(
    p_auction_id uuid,
    p_bid_amount numeric
) RETURNS jsonb
```

**Features:**

- Uses current authenticated user
- Optimized for mobile performance
- Reduced validation overhead
- Fast response times

### 3. Enhanced Functions

#### `create_auction_fast()`

High-performance auction creation.

```sql
create_auction_fast(auction_data jsonb) RETURNS jsonb
```

**Parameters:**

- `auction_data`: JSON object with auction details

**Benefits:**

- Single JSON parameter for mobile apps
- Bulk validation
- Optimized performance
- Standardized response format

#### `get_auction_details_fast()`

Optimized auction detail retrieval.

```sql
get_auction_details_fast(p_auction_id uuid) RETURNS jsonb
```

**Returns:**

- Complete auction information
- Creator details
- Current bidding statistics
- Formatted for mobile consumption

#### `get_auctions_paginated()`

Efficient auction listing with filters.

```sql
get_auctions_paginated(
    p_status text DEFAULT 'active',
    p_vehicle_type text DEFAULT NULL,
    p_limit integer DEFAULT 20,
    p_offset integer DEFAULT 0,
    p_user_role text DEFAULT NULL
) RETURNS jsonb
```

**Features:**

- Pagination support
- Multiple filter options
- Role-based filtering
- Performance optimized

## User Management Functions

### `get_user_auctions_optimized()`

Retrieves user's auctions with pagination.

```sql
get_user_auctions_optimized(
    p_user_id uuid,
    p_limit integer DEFAULT 20,
    p_offset integer DEFAULT 0
) RETURNS jsonb
```

**Returns:**

- User's created auctions (if consigner)
- User's bid auctions (if driver)
- Won auctions
- Pagination metadata

## Notification System

### `create_notification_with_push()`

Creates notification and sends push notification.

```sql
create_notification_with_push(
    p_user_id uuid,
    p_auction_id uuid,
    p_type text,
    p_message text,
    p_data jsonb DEFAULT '{}'
) RETURNS uuid
```

**Features:**

- Database notification creation
- Push notification delivery
- Error handling
- Audit logging

### `send_push_notification()`

Sends push notification via HTTP.

```sql
send_push_notification(
    p_user_id uuid,
    p_title text,
    p_body text,
    p_data jsonb DEFAULT '{}'
) RETURNS boolean
```

**Implementation:**

- Uses HTTP extension
- Expo Push Notification service
- Token validation
- Delivery confirmation

### `test_user_notification()`

Testing utility for notifications.

```sql
test_user_notification(
    p_user_id uuid,
    p_test_message text DEFAULT 'Test notification'
) RETURNS jsonb
```

## Maintenance Functions

### `run_auction_maintenance()`

Comprehensive database maintenance.

```sql
run_auction_maintenance() RETURNS jsonb
```

**Operations:**

- Closes expired auctions
- Updates winning bids
- Sends pending notifications
- Cleans up old data
- Performance statistics

### `check_and_close_expired_auctions()`

Automated auction expiration handling.

```sql
check_and_close_expired_auctions() RETURNS integer
```

**Returns:** Number of auctions closed

### `get_notification_system_status()`

System health check for notifications.

```sql
get_notification_system_status() RETURNS jsonb
```

**Returns:**

- Notification delivery statistics
- System performance metrics
- Error counts and rates
- Health status indicators

## Cancellation Functions

### `cancel_auction_by_consigner()`

Allows consigner to cancel their auction.

```sql
cancel_auction_by_consigner(
    p_auction_id uuid,
    p_user_id uuid
) RETURNS jsonb
```

**Validation:**

- User must be auction creator
- Auction must be active
- No bids placed (optional business rule)

### `cancel_bid_by_driver()`

Allows driver to cancel their bid.

```sql
cancel_bid_by_driver(
    p_bid_id uuid,
    p_user_id uuid
) RETURNS jsonb
```

**Business Logic:**

- Validates bid ownership
- Updates winning bid if necessary
- Creates notifications
- Logs activity

## Utility Functions

### `log_auction_activity()`

Creates audit log entries.

```sql
log_auction_activity(
    p_auction_id uuid,
    p_user_id uuid,
    p_action text,
    p_details jsonb DEFAULT '{}'
) RETURNS uuid
```

**Usage:**

- Automatic logging in business functions
- Manual logging for special events
- Compliance and debugging

### `create_auction_notification()`

Basic notification creation.

```sql
create_auction_notification(
    p_user_id uuid,
    p_auction_id uuid,
    p_type text,
    p_message text,
    p_data jsonb DEFAULT '{}'
) RETURNS uuid
```

## Function Usage Examples

### TypeScript Integration

```typescript
// Create auction
const { data, error } = await supabase.rpc('create_auction_fast', {
  auction_data: {
    title: 'Truck Transport',
    description: 'Heavy machinery transport',
    vehicle_type: 'large_truck',
    start_time: new Date().toISOString(),
    end_time: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
    consignment_date: new Date(
      Date.now() + 7 * 24 * 60 * 60 * 1000
    ).toISOString(),
  },
});

// Place bid
const { data: bidResult } = await supabase.rpc('place_bid_fast', {
  p_auction_id: 'auction-uuid',
  p_bid_amount: 5000,
});

// Get paginated auctions
const { data: auctions } = await supabase.rpc('get_auctions_paginated', {
  p_status: 'active',
  p_vehicle_type: 'three_wheeler',
  p_limit: 10,
  p_offset: 0,
});
```

### Error Handling

```typescript
const handleAuctionCreate = async (auctionData: any) => {
  try {
    const { data, error } = await supabase.rpc('create_auction_fast', {
      auction_data: auctionData,
    });

    if (error) {
      console.error('Database error:', error);
      return { success: false, error: error.message };
    }

    if (!data.success) {
      console.error('Business logic error:', data.error);
      return { success: false, error: data.error };
    }

    return { success: true, auction_id: data.auction_id };
  } catch (err) {
    console.error('Unexpected error:', err);
    return { success: false, error: 'Unexpected error occurred' };
  }
};
```

## Performance Considerations

### Function Optimization

- Use `SECURITY DEFINER` for elevated privileges
- Set `search_path = public` to prevent hijacking
- Minimize database roundtrips
- Use bulk operations where possible

### Caching Strategy

- Cache frequently accessed auction data
- Use views for complex queries
- Implement client-side caching
- Consider Redis for real-time data

### Monitoring

- Track function execution times
- Monitor error rates
- Log performance metrics
- Set up alerts for anomalies

## Best Practices

### Function Development

1. **Input Validation**: Always validate parameters
2. **Error Handling**: Return consistent error formats
3. **Security**: Use RLS and function security
4. **Performance**: Optimize queries and indexes
5. **Logging**: Include audit trails

### API Integration

1. **Type Safety**: Use TypeScript types
2. **Error Handling**: Handle all error cases
3. **Retry Logic**: Implement for transient failures
4. **Caching**: Cache appropriate responses
5. **Testing**: Unit test all function calls

### Maintenance

1. **Monitoring**: Track function performance
2. **Updates**: Test thoroughly before deployment
3. **Documentation**: Keep this guide updated
4. **Backup**: Ensure function definitions are backed up
5. **Security**: Regular security reviews



================================================
FILE: supabase/docs/schema-diagram.md
================================================
# Database Schema Diagram

## Entity Relationship Diagram

```mermaid
erDiagram
    profiles ||--o{ auctions : creates
    profiles ||--o{ auction_bids : places
    profiles ||--o{ auction_notifications : receives
    profiles ||--o{ auction_audit_logs : "triggers"

    auctions ||--o{ auction_bids : "receives"
    auctions ||--o{ auction_notifications : "generates"
    auctions ||--o{ auction_audit_logs : "logs"
    auctions }o--|| profiles : "won_by"
    auctions }o--|| auction_bids : "winning_bid"

    auction_bids ||--o{ auction_notifications : "triggers"
    auction_bids ||--o{ auction_audit_logs : "logs"

    profiles {
        uuid id PK
        text username UK
        text role "consigner|driver"
        text phone_number
        text address
        text bio
        text upi_id
        text vehicle_type
        text push_token
        text avatar_url
        timestamptz created_at
        timestamptz updated_at
    }

    auctions {
        uuid id PK
        text title
        text description
        text vehicle_type
        timestamptz start_time
        timestamptz end_time
        timestamptz consignment_date
        text status "active|completed|cancelled"
        uuid created_by FK
        uuid winner_id FK
        uuid winning_bid_id FK
        timestamptz created_at
        timestamptz updated_at
    }

    auction_bids {
        uuid id PK
        uuid auction_id FK
        uuid user_id FK
        numeric amount
        boolean is_winning_bid
        timestamptz created_at
    }

    auction_notifications {
        uuid id PK
        uuid user_id FK
        uuid auction_id FK
        text type
        text message
        boolean is_read
        jsonb data
        timestamptz created_at
    }

    auction_audit_logs {
        uuid id PK
        uuid auction_id FK
        uuid user_id FK
        text action
        jsonb details
        timestamptz created_at
    }
```

## Database Views

### active_auctions_summary

```sql
SELECT
    auctions.*,
    profiles.username as creator_username,
    profiles.phone_number as creator_phone,
    COUNT(auction_bids.id) as total_bids,
    MIN(auction_bids.amount) as current_highest_bid
FROM auctions
LEFT JOIN profiles ON auctions.created_by = profiles.id
LEFT JOIN auction_bids ON auctions.id = auction_bids.auction_id
WHERE auctions.status = 'active' AND auctions.end_time > now()
GROUP BY auctions.id, profiles.id
```

### user_notifications_summary

```sql
SELECT
    user_id,
    COUNT(*) as total_notifications,
    COUNT(*) FILTER (WHERE is_read = false) as unread_count,
    COUNT(*) FILTER (WHERE type = 'auction_won') as auctions_won,
    COUNT(*) FILTER (WHERE type = 'outbid') as times_outbid,
    MAX(created_at) as latest_notification
FROM auction_notifications
GROUP BY user_id
```

## Key Relationships

### 1. User Management

- `auth.users` (Supabase Auth) → `profiles` (Application Data)
- One-to-one relationship with CASCADE delete
- Profiles extend auth users with business logic

### 2. Auction Lifecycle

- `profiles` (consigner) → `auctions` (creates)
- `auctions` → `auction_bids` (receives)
- `auction_bids` → `auctions` (winning_bid_id)
- `profiles` (driver) → `auctions` (winner_id)

### 3. Notification Flow

- `auctions` → `auction_notifications` (auction events)
- `auction_bids` → `auction_notifications` (bidding events)
- `profiles` → `auction_notifications` (user-specific)

### 4. Audit Trail

- All major actions → `auction_audit_logs`
- Complete historical tracking
- JSON details for flexibility

## Data Flow Patterns

### Auction Creation Flow

```
Consigner → create_auction_optimized() → auctions table → log_auction_activity() → notifications
```

### Bidding Flow

```
Driver → create_bid_optimized() → auction_bids table → update winning_bid → notifications → audit_logs
```

### Auction Completion Flow

```
System/Manual → close_auction_optimized() → update auction status → determine winner → notifications
```

## Indexes & Performance

### Critical Indexes

- `idx_auctions_status` - Auction filtering
- `idx_auctions_end_time` - Expiration checks
- `idx_auction_bids_auction_id` - Bid queries
- `idx_auction_notifications_user_id` - User notifications
- `idx_profiles_role` - Role-based queries

### Query Optimization

- Views for complex joins
- Conditional indexes for filtered queries
- Function-based data access
- RLS policies for security

## Security Model

### Row Level Security (RLS)

```
profiles: Users see all, edit own
auctions: Role-based visibility (consigner/driver)
auction_bids: Based on auction accessibility
notifications: User-specific only
audit_logs: Limited to relevant records
```

### Access Patterns

- **Consigners**: Create auctions, view own auctions, receive notifications
- **Drivers**: View active auctions, place bids, receive notifications
- **System**: Create notifications, log activities, run maintenance

## Data Types & Constraints

### Vehicle Types

```sql
CHECK (vehicle_type IN (
    'three_wheeler',
    'pickup_truck',
    'mini_truck',
    'medium_truck',
    'large_truck'
))
```

### Notification Types

```sql
CHECK (type IN (
    'auction_created',
    'bid_placed',
    'outbid',
    'auction_won',
    'auction_lost',
    'auction_cancelled',
    'bid_cancelled'
))
```

### Status Types

```sql
CHECK (status IN (
    'active',
    'completed',
    'cancelled'
))
```

### Business Rules

- Auction duration: 5 minutes to 7 days
- Positive bid amounts only
- Unique bids per user per auction per amount
- Phone numbers: 10 digits
- UPI IDs: Valid format validation



================================================
FILE: supabase/docs/security-recommendations.md
================================================
[Binary file]


================================================
FILE: supabase/migrations/00_init_database.sql
================================================
/*
# Airavatl Auction Platform - Clean Database Architecture
# Version: 2.0
# Date: August 2, 2025

This is a complete rewrite of the database architecture with:
- Clean, normalized schema
- Optimized indexes for performance
- Secure RLS policies
- Efficient functions and triggers
- Audit logging and notifications
*/

-- ============================================================================
-- ENABLE EXTENSIONS
-- ============================================================================

-- Enable UUID extension for primary keys
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Enable RLS by default
ALTER DEFAULT PRIVILEGES REVOKE EXECUTE ON FUNCTIONS FROM PUBLIC;

-- ============================================================================
-- CORE TABLES
-- ============================================================================

-- Profiles table for user information
CREATE TABLE profiles (
    id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    username text NOT NULL UNIQUE,
    role text NOT NULL CHECK (role IN ('consigner', 'driver')),

-- Contact information
phone_number text CHECK (phone_number ~ '^[0-9]{10}$'),
address text,
bio text,

-- Payment info
upi_id text CHECK ( upi_id ~ '^[a-zA-Z0-9._-]+@[a-zA-Z0-9]+$' ),

-- Driver-specific fields
vehicle_type text CHECK (
    vehicle_type IN (
        'three_wheeler',
        'pickup_truck',
        'mini_truck',
        'medium_truck',
        'large_truck'
    )
),

-- Push notifications
push_token text,

-- Avatar
avatar_url text,

-- Timestamps
created_at timestamptz DEFAULT now() NOT NULL,
    updated_at timestamptz DEFAULT now() NOT NULL
);

-- Auctions table
CREATE TABLE auctions (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    title text NOT NULL,
    description text NOT NULL,

-- Vehicle information
vehicle_type text NOT NULL CHECK (
    vehicle_type IN (
        'three_wheeler',
        'pickup_truck',
        'mini_truck',
        'medium_truck',
        'large_truck'
    )
),

-- Timing
start_time timestamptz NOT NULL,
end_time timestamptz NOT NULL CHECK (end_time > start_time),
consignment_date timestamptz NOT NULL,

-- Status
status text NOT NULL DEFAULT 'active' CHECK (
    status IN (
        'active',
        'completed',
        'cancelled'
    )
),

-- Ownership and winners
created_by uuid NOT NULL REFERENCES profiles (id) ON DELETE CASCADE,
winner_id uuid REFERENCES profiles (id),
winning_bid_id uuid, -- Will be set up as FK after auction_bids table

-- Timestamps
created_at timestamptz DEFAULT now() NOT NULL,
updated_at timestamptz DEFAULT now() NOT NULL,

-- Constraints
CONSTRAINT valid_auction_duration CHECK (
        end_time - start_time >= interval '5 minutes' AND
        end_time - start_time <= interval '7 days'
    )
);

-- Auction bids table
CREATE TABLE auction_bids (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    auction_id uuid NOT NULL REFERENCES auctions(id) ON DELETE CASCADE,
    user_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
    amount numeric(10,2) NOT NULL CHECK (amount > 0),
    is_winning_bid boolean DEFAULT false,

-- Timestamps
created_at timestamptz DEFAULT now() NOT NULL,

-- Ensure unique bids per user per auction
UNIQUE(auction_id, user_id, amount) );

-- Add foreign key for winning bid (after auction_bids table exists)
ALTER TABLE auctions
ADD CONSTRAINT auctions_winning_bid_id_fkey FOREIGN KEY (winning_bid_id) REFERENCES auction_bids (id);

-- Auction notifications table

CREATE TABLE auction_notifications (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
    auction_id uuid REFERENCES auctions(id) ON DELETE CASCADE,
    
    type text NOT NULL CHECK (
        type IN (
            'auction_created',
            'bid_placed', 
            'outbid',
            'auction_won',
            'auction_lost',
            'auction_cancelled',
            'bid_cancelled'
        )
    ),
    
    message text NOT NULL,
    is_read boolean DEFAULT false,

-- Additional data (JSON for flexibility)
data jsonb DEFAULT '{}',

-- Timestamps
created_at timestamptz DEFAULT now() NOT NULL );

-- Audit logs for compliance and debugging

CREATE TABLE auction_audit_logs (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    auction_id uuid REFERENCES auctions(id) ON DELETE CASCADE,
    user_id uuid REFERENCES profiles(id) ON DELETE SET NULL,
    
    action text NOT NULL,
    details jsonb,

-- Timestamps
created_at timestamptz DEFAULT now() NOT NULL );

-- ============================================================================
-- INDEXES FOR PERFORMANCE
-- ============================================================================

-- Profiles indexes
CREATE INDEX idx_profiles_role ON profiles (role);

CREATE INDEX idx_profiles_vehicle_type ON profiles (vehicle_type)
WHERE
    vehicle_type IS NOT NULL;

CREATE INDEX idx_profiles_push_token ON profiles (push_token)
WHERE
    push_token IS NOT NULL;

-- Auctions indexes
CREATE INDEX idx_auctions_status ON auctions (status);

CREATE INDEX idx_auctions_created_by ON auctions (created_by);

CREATE INDEX idx_auctions_winner_id ON auctions (winner_id)
WHERE
    winner_id IS NOT NULL;

CREATE INDEX idx_auctions_winning_bid_id ON auctions (winning_bid_id)
WHERE
    winning_bid_id IS NOT NULL;

CREATE INDEX idx_auctions_vehicle_type ON auctions (vehicle_type);

CREATE INDEX idx_auctions_end_time ON auctions (end_time);

CREATE INDEX idx_auctions_active_end_time ON auctions (end_time)
WHERE
    status = 'active';

-- Auction bids indexes
CREATE INDEX idx_auction_bids_auction_id ON auction_bids (auction_id);

CREATE INDEX idx_auction_bids_user_id ON auction_bids (user_id);

CREATE INDEX idx_auction_bids_amount ON auction_bids (auction_id, amount);

CREATE INDEX idx_auction_bids_winning ON auction_bids (auction_id)
WHERE
    is_winning_bid = true;

-- Notifications indexes
CREATE INDEX idx_auction_notifications_user_id ON auction_notifications (user_id);

CREATE INDEX idx_auction_notifications_auction_id ON auction_notifications (auction_id);

CREATE INDEX idx_auction_notifications_unread ON auction_notifications (user_id, created_at)
WHERE
    is_read = false;

-- Audit logs indexes
CREATE INDEX idx_auction_audit_logs_auction_id ON auction_audit_logs (auction_id);

CREATE INDEX idx_auction_audit_logs_user_id ON auction_audit_logs (user_id);

CREATE INDEX idx_auction_audit_logs_created_at ON auction_audit_logs (created_at);

-- ============================================================================
-- ROW LEVEL SECURITY (RLS) POLICIES
-- ============================================================================

-- Enable RLS on all tables
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

ALTER TABLE auctions ENABLE ROW LEVEL SECURITY;

ALTER TABLE auction_bids ENABLE ROW LEVEL SECURITY;

ALTER TABLE auction_notifications ENABLE ROW LEVEL SECURITY;

ALTER TABLE auction_audit_logs ENABLE ROW LEVEL SECURITY;

-- Profiles policies
CREATE POLICY "Users can view all profiles" ON profiles FOR
SELECT TO authenticated USING (true);

CREATE POLICY "Users can update own profile" ON profiles FOR
UPDATE TO authenticated USING (auth.uid () = id)
WITH
    CHECK (auth.uid () = id);

CREATE POLICY "Users can insert own profile" ON profiles FOR
INSERT
    TO authenticated
WITH
    CHECK (auth.uid () = id);

-- Auctions policies
CREATE POLICY "Consigners view own auctions" ON auctions FOR
SELECT TO authenticated USING (
        EXISTS (
            SELECT 1
            FROM profiles
            WHERE
                profiles.id = auth.uid ()
                AND profiles.role = 'consigner'
                AND auctions.created_by = auth.uid ()
        )
    );

CREATE POLICY "Drivers view active auctions" ON auctions FOR
SELECT TO authenticated USING (
        EXISTS (
            SELECT 1
            FROM profiles
            WHERE
                profiles.id = auth.uid ()
                AND profiles.role = 'driver'
                AND (
                    auctions.status = 'active'
                    OR auctions.winner_id = auth.uid ()
                )
        )
    );

CREATE POLICY "Consigners create auctions" ON auctions FOR
INSERT
    TO authenticated
WITH
    CHECK (
        EXISTS (
            SELECT 1
            FROM profiles
            WHERE
                profiles.id = auth.uid ()
                AND profiles.role = 'consigner'
        )
        AND auth.uid () = created_by
    );

-- Auction bids policies
CREATE POLICY "View bids for visible auctions" ON auction_bids FOR
SELECT TO authenticated USING (
        EXISTS (
            SELECT 1
            FROM auctions
            WHERE
                auctions.id = auction_bids.auction_id
                -- Auction must be visible to user (handled by auction RLS)
        )
    );

CREATE POLICY "Drivers create bids" ON auction_bids FOR
INSERT
    TO authenticated
WITH
    CHECK (
        EXISTS (
            SELECT 1
            FROM profiles
            WHERE
                profiles.id = auth.uid ()
                AND profiles.role = 'driver'
        )
        AND auth.uid () = user_id
        AND EXISTS (
            SELECT 1
            FROM auctions
            WHERE
                auctions.id = auction_id
                AND auctions.status = 'active'
                AND auctions.end_time > now()
        )
    );

-- Notifications policies
CREATE POLICY "Users view own notifications" ON auction_notifications FOR
SELECT TO authenticated USING (auth.uid () = user_id);

CREATE POLICY "Users update own notifications" ON auction_notifications FOR
UPDATE TO authenticated USING (auth.uid () = user_id)
WITH
    CHECK (auth.uid () = user_id);

CREATE POLICY "System creates notifications" ON auction_notifications FOR
INSERT
    TO authenticated
WITH
    CHECK (true);
-- Allows system functions to create notifications

-- Audit logs policies (read-only for users)
CREATE POLICY "Users view relevant audit logs" ON auction_audit_logs FOR
SELECT TO authenticated USING (
        auth.uid () = user_id
        OR EXISTS (
            SELECT 1
            FROM auctions
            WHERE
                auctions.id = auction_audit_logs.auction_id
                AND (
                    auctions.created_by = auth.uid ()
                    OR auctions.winner_id = auth.uid ()
                )
        )
    );

CREATE POLICY "System creates audit logs" ON auction_audit_logs FOR
INSERT
    TO authenticated
WITH
    CHECK (true);
-- Allows system functions to create logs

-- ============================================================================
-- TRIGGERS FOR AUTOMATION
-- ============================================================================

-- Update timestamps trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS trigger AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply updated_at triggers
CREATE TRIGGER update_profiles_updated_at 
    BEFORE UPDATE ON profiles
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_auctions_updated_at
    BEFORE UPDATE ON auctions  
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- ============================================================================
-- SUMMARY
-- ============================================================================

-- This completes the core database structure:
-- ✅ 5 optimized tables with proper relationships
-- ✅ 15 performance indexes
-- ✅ 12 secure RLS policies
-- ✅ 2 automation triggers
-- ✅ Full audit trail and notification system
-- ✅ Type safety with constraints
-- ✅ Role-based access control


================================================
FILE: supabase/migrations/01_core_functions.sql
================================================
/*
# Core Business Functions - Clean Implementation
# Version: 2.0
# Date: August 2, 2025

Optimized functions for auction operations:
- Auction lifecycle management
- Bid processing
- Winner determination
- Cancellation handling
- Background processing
*/

-- ============================================================================
-- AUCTION LIFECYCLE FUNCTIONS
-- ============================================================================

-- Function to create an auction with validation
CREATE OR REPLACE FUNCTION create_auction_optimized(
    p_title text,
    p_description text,
    p_vehicle_type text,
    p_start_time timestamptz,
    p_end_time timestamptz,
    p_consignment_date timestamptz,
    p_created_by uuid
)
RETURNS uuid
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    new_auction_id uuid;
BEGIN
    -- Validate user is a consigner
    IF NOT EXISTS (
        SELECT 1 FROM profiles 
        WHERE id = p_created_by AND role = 'consigner'
    ) THEN
        RAISE EXCEPTION 'Only consigners can create auctions';
    END IF;
    
    -- Insert auction
    INSERT INTO auctions (
        title, description, vehicle_type, start_time, 
        end_time, consignment_date, created_by
    ) VALUES (
        p_title, p_description, p_vehicle_type, p_start_time,
        p_end_time, p_consignment_date, p_created_by
    ) RETURNING id INTO new_auction_id;
    
    -- Log auction creation
    PERFORM log_auction_activity(
        new_auction_id,
        p_created_by,
        'auction_created',
        jsonb_build_object(
            'title', p_title,
            'vehicle_type', p_vehicle_type,
            'end_time', p_end_time
        )
    );
    
    RETURN new_auction_id;
END;
$$;

-- Function to place a bid with validation
CREATE OR REPLACE FUNCTION create_bid_optimized(
    p_auction_id uuid,
    p_user_id uuid,
    p_amount numeric
)
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    auction_info record;
    new_bid_id uuid;
    result jsonb;
BEGIN
    -- Get auction info and validate
    SELECT id, status, end_time, created_by, title
    INTO auction_info
    FROM auctions
    WHERE id = p_auction_id;
    
    IF NOT FOUND THEN
        RETURN jsonb_build_object('success', false, 'error', 'Auction not found');
    END IF;
    
    -- Validate auction is active
    IF auction_info.status != 'active' OR auction_info.end_time <= now() THEN
        RETURN jsonb_build_object('success', false, 'error', 'Auction is not active');
    END IF;
    
    -- Validate user is a driver
    IF NOT EXISTS (
        SELECT 1 FROM profiles 
        WHERE id = p_user_id AND role = 'driver'
    ) THEN
        RETURN jsonb_build_object('success', false, 'error', 'Only drivers can place bids');
    END IF;
    
    -- Validate user is not the auction creator
    IF auction_info.created_by = p_user_id THEN
        RETURN jsonb_build_object('success', false, 'error', 'Cannot bid on your own auction');
    END IF;
    
    -- Insert or update bid (upsert)
    INSERT INTO auction_bids (auction_id, user_id, amount)
    VALUES (p_auction_id, p_user_id, p_amount)
    ON CONFLICT (auction_id, user_id, amount) 
    DO UPDATE SET created_at = now()
    RETURNING id INTO new_bid_id;
    
    -- Update winning bid status
    UPDATE auction_bids 
    SET is_winning_bid = false 
    WHERE auction_id = p_auction_id;
    
    UPDATE auction_bids 
    SET is_winning_bid = true
    WHERE id = (
        SELECT id FROM auction_bids
        WHERE auction_id = p_auction_id
        ORDER BY amount ASC, created_at ASC
        LIMIT 1
    );
    
    -- Log bid activity
    PERFORM log_auction_activity(
        p_auction_id,
        p_user_id,
        'bid_placed',
        jsonb_build_object(
            'amount', p_amount,
            'bid_id', new_bid_id
        )
    );
    
    RETURN jsonb_build_object(
        'success', true, 
        'bid_id', new_bid_id,
        'message', 'Bid placed successfully'
    );
END;
$$;

-- Function to close auction and determine winner
CREATE OR REPLACE FUNCTION close_auction_optimized(p_auction_id uuid)
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    auction_info record;
    winning_bid record;
    result jsonb;
BEGIN
    -- Get auction info
    SELECT id, status, title, created_by, end_time
    INTO auction_info
    FROM auctions
    WHERE id = p_auction_id;
    
    IF NOT FOUND THEN
        RETURN jsonb_build_object('success', false, 'error', 'Auction not found');
    END IF;
    
    -- Only close active auctions that have ended
    IF auction_info.status != 'active' THEN
        RETURN jsonb_build_object('success', false, 'error', 'Auction is not active');
    END IF;
    
    -- Find winning bid (lowest amount, earliest timestamp)
    SELECT id, user_id, amount
    INTO winning_bid
    FROM auction_bids
    WHERE auction_id = p_auction_id
    ORDER BY amount ASC, created_at ASC
    LIMIT 1;
    
    -- Update auction status
    UPDATE auctions
    SET 
        status = 'completed',
        winner_id = winning_bid.user_id,
        winning_bid_id = winning_bid.id,
        updated_at = now()
    WHERE id = p_auction_id;
    
    -- Update winning bid flag
    IF winning_bid.id IS NOT NULL THEN
        UPDATE auction_bids 
        SET is_winning_bid = false 
        WHERE auction_id = p_auction_id;
        
        UPDATE auction_bids 
        SET is_winning_bid = true 
        WHERE id = winning_bid.id;
    END IF;
    
    -- Log auction completion
    PERFORM log_auction_activity(
        p_auction_id,
        winning_bid.user_id,
        'auction_completed',
        jsonb_build_object(
            'winner_id', winning_bid.user_id,
            'winning_amount', winning_bid.amount,
            'winning_bid_id', winning_bid.id
        )
    );
    
    -- Create notifications (handled by separate function)
    IF winning_bid.user_id IS NOT NULL THEN
        PERFORM create_auction_notification(
            winning_bid.user_id,
            p_auction_id,
            'auction_won',
            format('Congratulations! You won the auction "%s" with a bid of ₹%s', 
                   auction_info.title, winning_bid.amount)
        );
        
        PERFORM create_auction_notification(
            auction_info.created_by,
            p_auction_id,
            'auction_completed',
            format('Your auction "%s" has been completed with a winning bid of ₹%s', 
                   auction_info.title, winning_bid.amount)
        );
    ELSE
        PERFORM create_auction_notification(
            auction_info.created_by,
            p_auction_id,
            'auction_completed',
            format('Your auction "%s" has completed with no bids', 
                   auction_info.title)
        );
    END IF;
    
    RETURN jsonb_build_object(
        'success', true,
        'winner_id', winning_bid.user_id,
        'winning_amount', winning_bid.amount,
        'message', 'Auction closed successfully'
    );
END;
$$;

-- Automated function to check and close expired auctions
CREATE OR REPLACE FUNCTION check_and_close_expired_auctions()
RETURNS int
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    expired_auction record;
    closed_count int := 0;
BEGIN
    -- Find and close expired auctions
    FOR expired_auction IN
        SELECT id FROM auctions
        WHERE status = 'active' 
        AND end_time <= now()
        ORDER BY end_time ASC
    LOOP
        PERFORM close_auction_optimized(expired_auction.id);
        closed_count := closed_count + 1;
    END LOOP;
    
    RETURN closed_count;
END;
$$;

-- ============================================================================
-- CANCELLATION FUNCTIONS
-- ============================================================================

-- Function to cancel auction by consigner
CREATE OR REPLACE FUNCTION cancel_auction_by_consigner(
    p_auction_id uuid,
    p_user_id uuid
)
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    auction_info record;
    result jsonb;
BEGIN
    -- Get and validate auction
    SELECT id, status, created_by, title
    INTO auction_info
    FROM auctions
    WHERE id = p_auction_id;
    
    IF NOT FOUND THEN
        RETURN jsonb_build_object('success', false, 'error', 'Auction not found');
    END IF;
    
    -- Validate user is the auction creator
    IF auction_info.created_by != p_user_id THEN
        RETURN jsonb_build_object('success', false, 'error', 'Unauthorized');
    END IF;
    
    -- Validate auction can be cancelled
    IF auction_info.status != 'active' THEN
        RETURN jsonb_build_object('success', false, 'error', 'Auction cannot be cancelled');
    END IF;
    
    -- Cancel auction
    UPDATE auctions 
    SET status = 'cancelled', updated_at = now()
    WHERE id = p_auction_id;
    
    -- Notify all bidders
    INSERT INTO auction_notifications (user_id, auction_id, type, message)
    SELECT 
        DISTINCT user_id,
        p_auction_id,
        'auction_cancelled',
        format('The auction "%s" has been cancelled by the consigner', auction_info.title)
    FROM auction_bids
    WHERE auction_id = p_auction_id;
    
    -- Log cancellation
    PERFORM log_auction_activity(
        p_auction_id,
        p_user_id,
        'auction_cancelled',
        jsonb_build_object('cancelled_by', 'consigner')
    );
    
    RETURN jsonb_build_object(
        'success', true,
        'message', 'Auction cancelled successfully'
    );
END;
$$;

-- Function to cancel bid by driver
CREATE OR REPLACE FUNCTION cancel_bid_by_driver(
    p_bid_id uuid,
    p_user_id uuid
)
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    bid_info record;
    auction_info record;
    result jsonb;
BEGIN
    -- Get bid info
    SELECT id, auction_id, user_id, amount, is_winning_bid
    INTO bid_info
    FROM auction_bids
    WHERE id = p_bid_id;
    
    IF NOT FOUND THEN
        RETURN jsonb_build_object('success', false, 'error', 'Bid not found');
    END IF;
    
    -- Validate user owns the bid
    IF bid_info.user_id != p_user_id THEN
        RETURN jsonb_build_object('success', false, 'error', 'Unauthorized');
    END IF;
    
    -- Get auction info
    SELECT status, title, created_by
    INTO auction_info
    FROM auctions
    WHERE id = bid_info.auction_id;
    
    -- Validate auction is still active
    IF auction_info.status != 'active' THEN
        RETURN jsonb_build_object('success', false, 'error', 'Cannot cancel bid on inactive auction');
    END IF;
    
    -- Don't allow cancelling winning bid
    IF bid_info.is_winning_bid THEN
        RETURN jsonb_build_object('success', false, 'error', 'Cannot cancel winning bid');
    END IF;
    
    -- Delete the bid
    DELETE FROM auction_bids WHERE id = p_bid_id;
    
    -- Notify auction creator
    PERFORM create_auction_notification(
        auction_info.created_by,
        bid_info.auction_id,
        'bid_cancelled',
        format('A bid of ₹%s was cancelled on your auction "%s"', 
               bid_info.amount, auction_info.title)
    );
    
    -- Log cancellation
    PERFORM log_auction_activity(
        bid_info.auction_id,
        p_user_id,
        'bid_cancelled',
        jsonb_build_object(
            'bid_id', p_bid_id,
            'amount', bid_info.amount
        )
    );
    
    RETURN jsonb_build_object(
        'success', true,
        'message', 'Bid cancelled successfully'
    );
END;
$$;

-- ============================================================================
-- UTILITY FUNCTIONS
-- ============================================================================

-- Function to create notifications
CREATE OR REPLACE FUNCTION create_auction_notification(
    p_user_id uuid,
    p_auction_id uuid,
    p_type text,
    p_message text,
    p_data jsonb DEFAULT '{}'
)
RETURNS uuid
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    notification_id uuid;
BEGIN
    INSERT INTO auction_notifications (user_id, auction_id, type, message, data)
    VALUES (p_user_id, p_auction_id, p_type, p_message, p_data)
    RETURNING id INTO notification_id;
    
    RETURN notification_id;
END;
$$;

-- Function to log auction activities
CREATE OR REPLACE FUNCTION log_auction_activity(
    p_auction_id uuid,
    p_user_id uuid,
    p_action text,
    p_details jsonb DEFAULT '{}'
)
RETURNS uuid
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    log_id uuid;
BEGIN
    INSERT INTO auction_audit_logs (auction_id, user_id, action, details)
    VALUES (p_auction_id, p_user_id, p_action, p_details)
    RETURNING id INTO log_id;
    
    RETURN log_id;
END;
$$;

-- Function to get optimized auction details for mobile app
CREATE OR REPLACE FUNCTION get_auction_details_optimized(p_auction_id uuid)
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    auction_data jsonb;
    bids_data jsonb;
    result jsonb;
BEGIN
    -- Get auction details with creator info
    SELECT jsonb_build_object(
        'id', a.id,
        'title', a.title,
        'description', a.description,
        'vehicle_type', a.vehicle_type,
        'start_time', a.start_time,
        'end_time', a.end_time,
        'consignment_date', a.consignment_date,
        'status', a.status,
        'created_by', a.created_by,
        'winner_id', a.winner_id,
        'winning_bid_id', a.winning_bid_id,
        'creator_username', p.username,
        'winner_username', w.username
    ) INTO auction_data
    FROM auctions a
    LEFT JOIN profiles p ON a.created_by = p.id
    LEFT JOIN profiles w ON a.winner_id = w.id
    WHERE a.id = p_auction_id;
    
    -- Get bids with bidder info
    SELECT jsonb_agg(
        jsonb_build_object(
            'id', b.id,
            'amount', b.amount,
            'created_at', b.created_at,
            'is_winning_bid', b.is_winning_bid,
            'bidder_username', p.username
        ) ORDER BY b.amount ASC, b.created_at ASC
    ) INTO bids_data
    FROM auction_bids b
    LEFT JOIN profiles p ON b.user_id = p.id
    WHERE b.auction_id = p_auction_id;
    
    -- Combine results
    result := jsonb_build_object(
        'auction', auction_data,
        'bids', COALESCE(bids_data, '[]'::jsonb)
    );
    
    RETURN result;
END;
$$;

-- ============================================================================
-- GRANT PERMISSIONS
-- ============================================================================

-- Grant execute permissions to authenticated users
GRANT EXECUTE ON FUNCTION create_auction_optimized TO authenticated;

GRANT EXECUTE ON FUNCTION create_bid_optimized TO authenticated;

GRANT EXECUTE ON FUNCTION close_auction_optimized TO authenticated;

GRANT
EXECUTE ON FUNCTION check_and_close_expired_auctions TO authenticated;

GRANT
EXECUTE ON FUNCTION cancel_auction_by_consigner TO authenticated;

GRANT EXECUTE ON FUNCTION cancel_bid_by_driver TO authenticated;

GRANT
EXECUTE ON FUNCTION create_auction_notification TO authenticated;

GRANT EXECUTE ON FUNCTION log_auction_activity TO authenticated;

GRANT
EXECUTE ON FUNCTION get_auction_details_optimized TO authenticated;


================================================
FILE: supabase/migrations/02_automation_and_notifications.sql
================================================
/*
# Background Automation and Push Notifications
# Version: 2.0  
# Date: August 2, 2025

Automated tasks and push notification system:
- Background auction closure
- Push notification integration
- Automated cleanup tasks
- Performance monitoring
*/

-- ============================================================================
-- PUSH NOTIFICATION FUNCTIONS
-- ============================================================================

-- Function to send push notifications via HTTP request
CREATE OR REPLACE FUNCTION send_push_notification(
    p_user_id uuid,
    p_title text,
    p_body text,
    p_data jsonb DEFAULT '{}'
)
RETURNS boolean
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    user_push_token text;
    notification_payload jsonb;
    http_response record;
BEGIN
    -- Get user's push token
    SELECT push_token INTO user_push_token
    FROM profiles
    WHERE id = p_user_id;
    
    -- Skip if no push token
    IF user_push_token IS NULL THEN
        RETURN false;
    END IF;
    
    -- Build notification payload for Expo
    notification_payload := jsonb_build_object(
        'to', user_push_token,
        'title', p_title,
        'body', p_body,
        'data', p_data,
        'sound', 'default',
        'priority', 'high'
    );
    
    -- Send HTTP request to Expo Push API
    -- Note: This requires the http extension and proper configuration
    -- For now, we'll just log the notification
    PERFORM log_auction_activity(
        NULL, -- No specific auction
        p_user_id,
        'push_notification_sent',
        jsonb_build_object(
            'title', p_title,
            'body', p_body,
            'data', p_data
        )
    );
    
    RETURN true;
EXCEPTION
    WHEN OTHERS THEN
        -- Log error but don't fail the main operation
        PERFORM log_auction_activity(
            NULL,
            p_user_id,
            'push_notification_failed',
            jsonb_build_object(
                'title', p_title,
                'error', SQLERRM
            )
        );
        RETURN false;
END;
$$;

-- Enhanced notification function with push notifications
CREATE OR REPLACE FUNCTION create_notification_with_push(
    p_user_id uuid,
    p_auction_id uuid,
    p_type text,
    p_message text,
    p_data jsonb DEFAULT '{}'
)
RETURNS uuid
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    notification_id uuid;
    push_title text;
    auction_title text;
BEGIN
    -- Create database notification
    notification_id := create_auction_notification(
        p_user_id, p_auction_id, p_type, p_message, p_data
    );
    
    -- Get auction title for push notification
    SELECT title INTO auction_title
    FROM auctions
    WHERE id = p_auction_id;
    
    -- Determine push notification title
    push_title := CASE p_type
        WHEN 'auction_won' THEN 'Auction Won! 🎉'
        WHEN 'outbid' THEN 'You''ve been outbid 📢'
        WHEN 'bid_placed' THEN 'New bid placed 💰'
        WHEN 'auction_created' THEN 'New auction available! 🚚'
        WHEN 'auction_updated' THEN 'Auction updated! 🔄'
        WHEN 'auction_cancelled' THEN 'Auction cancelled ❌'
        WHEN 'auction_completed' THEN 'Auction completed ✅'
        ELSE 'Airavatl Notification'
    END;
    
    -- Send push notification (non-blocking)
    PERFORM send_push_notification(
        p_user_id,
        push_title,
        p_message,
        jsonb_build_object(
            'auction_id', p_auction_id,
            'type', p_type,
            'notification_id', notification_id
        )
    );
    
    RETURN notification_id;
END;
$$;

-- ============================================================================
-- BACKGROUND AUTOMATION
-- ============================================================================

-- Function to run periodic auction maintenance
CREATE OR REPLACE FUNCTION run_auction_maintenance()
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    closed_count int := 0;
    cleaned_count int := 0;
    result jsonb;
BEGIN
    -- Close expired auctions
    closed_count := check_and_close_expired_auctions();
    
    -- Clean up old notifications (older than 30 days)
    DELETE FROM auction_notifications
    WHERE created_at < now() - interval '30 days'
    AND is_read = true;
    
    GET DIAGNOSTICS cleaned_count = ROW_COUNT;
    
    -- Clean up old audit logs (older than 90 days, except important actions)
    DELETE FROM auction_audit_logs
    WHERE created_at < now() - interval '90 days'
    AND action NOT IN ('auction_created', 'auction_completed', 'auction_cancelled');
    
    -- Update statistics
    result := jsonb_build_object(
        'auctions_closed', closed_count,
        'notifications_cleaned', cleaned_count,
        'maintenance_completed_at', now()
    );
    
    -- Log maintenance activity
    PERFORM log_auction_activity(
        NULL,
        NULL,
        'system_maintenance',
        result
    );
    
    RETURN result;
END;
$$;

-- ============================================================================
-- ENHANCED AUCTION CLOSURE WITH NOTIFICATIONS
-- ============================================================================

-- Enhanced auction closure with comprehensive notifications
CREATE OR REPLACE FUNCTION close_auction_with_notifications(p_auction_id uuid)
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    auction_info record;
    winning_bid record;
    losing_bidders record;
    result jsonb;
BEGIN
    -- Close auction using optimized function
    result := close_auction_optimized(p_auction_id);
    
    -- If closure failed, return early
    IF (result->>'success')::boolean = false THEN
        RETURN result;
    END IF;
    
    -- Get auction and winner details
    SELECT a.id, a.title, a.created_by, a.winner_id, 
           b.amount as winning_amount, p.username as winner_username
    INTO auction_info
    FROM auctions a
    LEFT JOIN auction_bids b ON a.winning_bid_id = b.id
    LEFT JOIN profiles p ON a.winner_id = p.id
    WHERE a.id = p_auction_id;
    
    -- Send enhanced notifications
    IF auction_info.winner_id IS NOT NULL THEN
        -- Notify winner with push
        PERFORM create_notification_with_push(
            auction_info.winner_id,
            p_auction_id,
            'auction_won',
            format('Congratulations! You won "%s" with a bid of ₹%s. Contact details will be shared shortly.',
                   auction_info.title, auction_info.winning_amount)
        );
        
        -- Notify consigner with push
        PERFORM create_notification_with_push(
            auction_info.created_by,
            p_auction_id,
            'auction_completed',
            format('Your auction "%s" was won by %s for ₹%s. Contact details will be shared shortly.',
                   auction_info.title, auction_info.winner_username, auction_info.winning_amount)
        );
        
        -- Notify losing bidders
        FOR losing_bidders IN
            SELECT DISTINCT user_id
            FROM auction_bids
            WHERE auction_id = p_auction_id
            AND user_id != auction_info.winner_id
        LOOP
            PERFORM create_notification_with_push(
                losing_bidders.user_id,
                p_auction_id,
                'auction_lost',
                format('The auction "%s" has ended. Unfortunately, you did not win this time.',
                       auction_info.title)
            );
        END LOOP;
    ELSE
        -- No winner - notify consigner
        PERFORM create_notification_with_push(
            auction_info.created_by,
            p_auction_id,
            'auction_completed',
            format('Your auction "%s" has ended with no bids. You may create a new auction.',
                   auction_info.title)
        );
    END IF;
    
    RETURN result;
END;
$$;

-- ============================================================================
-- VIEWS FOR OPTIMIZED QUERIES
-- ============================================================================

-- View for active auctions with bid counts
CREATE OR REPLACE VIEW active_auctions_summary AS
SELECT
    a.id,
    a.title,
    a.description,
    a.vehicle_type,
    a.start_time,
    a.end_time,
    a.consignment_date,
    a.created_by,
    p.username as creator_username,
    COALESCE(bid_stats.bid_count, 0) as bid_count,
    COALESCE(bid_stats.lowest_bid, 0) as current_lowest_bid,
    CASE
        WHEN a.end_time <= now() THEN 'expired'
        WHEN a.start_time > now() THEN 'upcoming'
        ELSE 'active'
    END as calculated_status
FROM
    auctions a
    LEFT JOIN profiles p ON a.created_by = p.id
    LEFT JOIN (
        SELECT
            auction_id,
            COUNT(*) as bid_count,
            MIN(amount) as lowest_bid
        FROM auction_bids
        GROUP BY
            auction_id
    ) bid_stats ON a.id = bid_stats.auction_id
WHERE
    a.status = 'active';

-- View for user notifications summary
CREATE OR REPLACE VIEW user_notifications_summary AS
SELECT
    user_id,
    COUNT(*) as total_notifications,
    COUNT(*) FILTER (
        WHERE
            is_read = false
    ) as unread_count,
    COUNT(*) FILTER (
        WHERE
            type = 'auction_won'
    ) as auctions_won,
    COUNT(*) FILTER (
        WHERE
            type = 'outbid'
    ) as times_outbid,
    MAX(created_at) as latest_notification
FROM auction_notifications
GROUP BY
    user_id;

-- ============================================================================
-- PERFORMANCE OPTIMIZATION FUNCTIONS
-- ============================================================================

-- Function to get user's relevant auctions (optimized for mobile)
CREATE OR REPLACE FUNCTION get_user_auctions_optimized(
    p_user_id uuid,
    p_limit int DEFAULT 20,
    p_offset int DEFAULT 0
)
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    user_role text;
    auctions_data jsonb;
BEGIN
    -- Get user role
    SELECT role INTO user_role FROM profiles WHERE id = p_user_id;
    
    IF user_role = 'consigner' THEN
        -- Get consigner's own auctions
        SELECT jsonb_agg(
            jsonb_build_object(
                'id', id,
                'title', title,
                'status', status,
                'end_time', end_time,
                'bid_count', COALESCE(bid_count, 0),
                'current_lowest_bid', COALESCE(current_lowest_bid, 0)
            ) ORDER BY created_at DESC
        ) INTO auctions_data
        FROM active_auctions_summary
        WHERE created_by = p_user_id
        LIMIT p_limit OFFSET p_offset;
        
    ELSE
        -- Get driver's available auctions
        SELECT jsonb_agg(
            jsonb_build_object(
                'id', id,
                'title', title,
                'vehicle_type', vehicle_type,
                'end_time', end_time,
                'bid_count', COALESCE(bid_count, 0),
                'current_lowest_bid', COALESCE(current_lowest_bid, 0),
                'creator_username', creator_username
            ) ORDER BY end_time ASC
        ) INTO auctions_data
        FROM active_auctions_summary
        WHERE calculated_status = 'active'
        LIMIT p_limit OFFSET p_offset;
    END IF;
    
    RETURN COALESCE(auctions_data, '[]'::jsonb);
END;
$$;

-- ============================================================================
-- GRANT PERMISSIONS
-- ============================================================================

GRANT EXECUTE ON FUNCTION send_push_notification TO authenticated;

GRANT
EXECUTE ON FUNCTION create_notification_with_push TO authenticated;

GRANT EXECUTE ON FUNCTION run_auction_maintenance TO authenticated;

GRANT
EXECUTE ON FUNCTION close_auction_with_notifications TO authenticated;

GRANT
EXECUTE ON FUNCTION get_user_auctions_optimized TO authenticated;

-- Grant view access
GRANT SELECT ON active_auctions_summary TO authenticated;

GRANT SELECT ON user_notifications_summary TO authenticated;


================================================
FILE: supabase/migrations/04_complete_database_schema.sql
================================================
-- Complete Database Schema Migration
-- This file contains the complete schema of the production database
-- Generated from database audit on 2025-01-26

-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS "http" WITH SCHEMA extensions;

-- =============================================
-- CORE TABLES
-- =============================================

-- Profiles table (users)
CREATE TABLE IF NOT EXISTS public.profiles (
    id UUID REFERENCES auth.users ON DELETE CASCADE PRIMARY KEY,
    email TEXT UNIQUE NOT NULL,
    full_name TEXT,
    phone TEXT,
    role TEXT CHECK (role IN ('consigner', 'driver')) NOT NULL,
    vehicle_type TEXT,
    driver_license TEXT,
    push_token TEXT,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Auctions table
CREATE TABLE IF NOT EXISTS public.auctions (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    title TEXT NOT NULL,
    description TEXT,
    pickup_location TEXT NOT NULL,
    delivery_location TEXT NOT NULL,
    pickup_date TIMESTAMPTZ NOT NULL,
    delivery_date TIMESTAMPTZ NOT NULL,
    starting_price DECIMAL(10,2) NOT NULL CHECK (starting_price > 0),
    current_price DECIMAL(10,2),
    status TEXT DEFAULT 'active' CHECK (status IN ('active', 'completed', 'cancelled')) NOT NULL,
    created_by UUID REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
    winner_id UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
    end_time TIMESTAMPTZ NOT NULL,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Auction bids table
CREATE TABLE IF NOT EXISTS public.auction_bids (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    auction_id UUID REFERENCES public.auctions(id) ON DELETE CASCADE NOT NULL,
    user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
    bid_amount DECIMAL(10,2) NOT NULL CHECK (bid_amount > 0),
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    UNIQUE(auction_id, user_id)
);

-- Auction notifications table
CREATE TABLE IF NOT EXISTS public.auction_notifications (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
    auction_id UUID REFERENCES public.auctions(id) ON DELETE CASCADE NOT NULL,
    type TEXT NOT NULL CHECK (type IN ('new_auction', 'bid_placed', 'auction_won', 'auction_completed', 'auction_ending_soon')),
    title TEXT NOT NULL,
    message TEXT NOT NULL,
    is_read BOOLEAN DEFAULT false NOT NULL,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Auction audit logs table
CREATE TABLE IF NOT EXISTS public.auction_audit_logs (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    auction_id UUID REFERENCES public.auctions(id) ON DELETE CASCADE NOT NULL,
    user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE,
    action TEXT NOT NULL,
    old_values JSONB,
    new_values JSONB,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- =============================================
-- INDEXES FOR PERFORMANCE
-- =============================================

CREATE INDEX IF NOT EXISTS idx_auctions_status ON public.auctions(status);
CREATE INDEX IF NOT EXISTS idx_auctions_end_time ON public.auctions(end_time);
CREATE INDEX IF NOT EXISTS idx_auctions_created_by ON public.auctions(created_by);
CREATE INDEX IF NOT EXISTS idx_auction_bids_auction_id ON public.auction_bids(auction_id);
CREATE INDEX IF NOT EXISTS idx_auction_bids_user_id ON public.auction_bids(user_id);
CREATE INDEX IF NOT EXISTS idx_auction_notifications_user_id ON public.auction_notifications(user_id);
CREATE INDEX IF NOT EXISTS idx_auction_notifications_is_read ON public.auction_notifications(is_read);
CREATE INDEX IF NOT EXISTS idx_auction_audit_logs_auction_id ON public.auction_audit_logs(auction_id);
CREATE INDEX IF NOT EXISTS idx_profiles_role ON public.profiles(role);
CREATE INDEX IF NOT EXISTS idx_profiles_push_token ON public.profiles(push_token);

-- =============================================
-- ROW LEVEL SECURITY POLICIES
-- =============================================

-- Enable RLS on all tables
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.auctions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.auction_bids ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.auction_notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.auction_audit_logs ENABLE ROW LEVEL SECURITY;

-- Profiles policies
CREATE POLICY "Users can view all profiles" ON public.profiles
    FOR SELECT USING (true);

CREATE POLICY "Users can insert own profile" ON public.profiles
    FOR INSERT WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can update own profile" ON public.profiles
    FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);

-- Auctions policies
CREATE POLICY "Drivers view active auctions" ON public.auctions
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM profiles 
            WHERE profiles.id = auth.uid() 
            AND profiles.role = 'driver' 
            AND (auctions.status = 'active' OR auctions.winner_id = auth.uid())
        )
    );

CREATE POLICY "Consigners view own auctions" ON public.auctions
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM profiles 
            WHERE profiles.id = auth.uid() 
            AND profiles.role = 'consigner' 
            AND auctions.created_by = auth.uid()
        )
    );

CREATE POLICY "Consigners create auctions" ON public.auctions
    FOR INSERT WITH CHECK (
        EXISTS (
            SELECT 1 FROM profiles 
            WHERE profiles.id = auth.uid() 
            AND profiles.role = 'consigner'
        ) AND auth.uid() = created_by
    );

-- Auction bids policies
CREATE POLICY "View bids for visible auctions" ON public.auction_bids
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM auctions 
            WHERE auctions.id = auction_bids.auction_id
        )
    );

CREATE POLICY "Drivers create bids" ON public.auction_bids
    FOR INSERT WITH CHECK (
        EXISTS (
            SELECT 1 FROM profiles 
            WHERE profiles.id = auth.uid() 
            AND profiles.role = 'driver'
        ) AND auth.uid() = user_id 
        AND EXISTS (
            SELECT 1 FROM auctions 
            WHERE auctions.id = auction_bids.auction_id 
            AND auctions.status = 'active' 
            AND auctions.end_time > now()
        )
    );

-- Notifications policies
CREATE POLICY "Users view own notifications" ON public.auction_notifications
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users update own notifications" ON public.auction_notifications
    FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE POLICY "System creates notifications" ON public.auction_notifications
    FOR INSERT WITH CHECK (true);

-- Audit logs policies
CREATE POLICY "Users view relevant audit logs" ON public.auction_audit_logs
    FOR SELECT USING (
        auth.uid() = user_id OR 
        EXISTS (
            SELECT 1 FROM auctions 
            WHERE auctions.id = auction_audit_logs.auction_id 
            AND (auctions.created_by = auth.uid() OR auctions.winner_id = auth.uid())
        )
    );

CREATE POLICY "System creates audit logs" ON public.auction_audit_logs
    FOR INSERT WITH CHECK (true);



================================================
FILE: supabase/migrations/05_database_functions.sql
================================================
-- Database Functions and Stored Procedures
-- This file contains all custom functions for the auction platform
-- Generated from database audit on 2025-01-26

-- =============================================
-- AUCTION MANAGEMENT FUNCTIONS
-- =============================================

-- Function to create a new auction
CREATE OR REPLACE FUNCTION auction_create(
    p_title TEXT,
    p_description TEXT,
    p_pickup_location TEXT,
    p_delivery_location TEXT,
    p_pickup_date TIMESTAMPTZ,
    p_delivery_date TIMESTAMPTZ,
    p_starting_price DECIMAL,
    p_end_time TIMESTAMPTZ
)
RETURNS UUID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    auction_id UUID;
    user_role TEXT;
BEGIN
    -- Check if user is a consigner
    SELECT role INTO user_role FROM profiles WHERE id = auth.uid();
    
    IF user_role != 'consigner' THEN
        RAISE EXCEPTION 'Only consigners can create auctions';
    END IF;
    
    -- Validate dates
    IF p_pickup_date <= now() THEN
        RAISE EXCEPTION 'Pickup date must be in the future';
    END IF;
    
    IF p_delivery_date <= p_pickup_date THEN
        RAISE EXCEPTION 'Delivery date must be after pickup date';
    END IF;
    
    IF p_end_time <= now() THEN
        RAISE EXCEPTION 'End time must be in the future';
    END IF;
    
    -- Create auction
    INSERT INTO auctions (
        title, description, pickup_location, delivery_location,
        pickup_date, delivery_date, starting_price, current_price,
        created_by, end_time
    ) VALUES (
        p_title, p_description, p_pickup_location, p_delivery_location,
        p_pickup_date, p_delivery_date, p_starting_price, p_starting_price,
        auth.uid(), p_end_time
    ) RETURNING id INTO auction_id;
    
    -- Log audit entry
    INSERT INTO auction_audit_logs (auction_id, user_id, action, new_values)
    VALUES (auction_id, auth.uid(), 'auction_created', 
           jsonb_build_object('title', p_title, 'starting_price', p_starting_price));
    
    RETURN auction_id;
END;
$$;

-- Function to place a bid
CREATE OR REPLACE FUNCTION place_bid(
    p_auction_id UUID,
    p_bid_amount DECIMAL
)
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    auction_record RECORD;
    user_role TEXT;
    existing_bid DECIMAL;
BEGIN
    -- Check if user is a driver
    SELECT role INTO user_role FROM profiles WHERE id = auth.uid();
    
    IF user_role != 'driver' THEN
        RAISE EXCEPTION 'Only drivers can place bids';
    END IF;
    
    -- Get auction details
    SELECT * INTO auction_record FROM auctions WHERE id = p_auction_id;
    
    IF NOT FOUND THEN
        RAISE EXCEPTION 'Auction not found';
    END IF;
    
    -- Validate auction is active
    IF auction_record.status != 'active' THEN
        RAISE EXCEPTION 'Auction is not active';
    END IF;
    
    IF auction_record.end_time <= now() THEN
        RAISE EXCEPTION 'Auction has ended';
    END IF;
    
    -- Check if bid is higher than current price
    IF p_bid_amount <= auction_record.current_price THEN
        RAISE EXCEPTION 'Bid must be higher than current price';
    END IF;
    
    -- Get existing bid from this user
    SELECT bid_amount INTO existing_bid 
    FROM auction_bids 
    WHERE auction_id = p_auction_id AND user_id = auth.uid();
    
    -- Insert or update bid
    INSERT INTO auction_bids (auction_id, user_id, bid_amount)
    VALUES (p_auction_id, auth.uid(), p_bid_amount)
    ON CONFLICT (auction_id, user_id)
    DO UPDATE SET bid_amount = p_bid_amount, created_at = now();
    
    -- Update auction current price
    UPDATE auctions 
    SET current_price = p_bid_amount, updated_at = now()
    WHERE id = p_auction_id;
    
    -- Log audit entry
    INSERT INTO auction_audit_logs (auction_id, user_id, action, old_values, new_values)
    VALUES (p_auction_id, auth.uid(), 'bid_placed',
           CASE WHEN existing_bid IS NOT NULL THEN jsonb_build_object('bid_amount', existing_bid) ELSE NULL END,
           jsonb_build_object('bid_amount', p_bid_amount));
    
    RETURN TRUE;
END;
$$;

-- Function to complete auction
CREATE OR REPLACE FUNCTION complete_auction(p_auction_id UUID)
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    auction_record RECORD;
    winning_bid RECORD;
BEGIN
    -- Get auction details
    SELECT * INTO auction_record FROM auctions WHERE id = p_auction_id;
    
    IF NOT FOUND THEN
        RAISE EXCEPTION 'Auction not found';
    END IF;
    
    -- Check if user owns the auction
    IF auction_record.created_by != auth.uid() THEN
        RAISE EXCEPTION 'Only auction creator can complete auction';
    END IF;
    
    -- Check if auction is active
    IF auction_record.status != 'active' THEN
        RAISE EXCEPTION 'Auction is not active';
    END IF;
    
    -- Find winning bid
    SELECT ab.*, p.full_name, p.email, p.phone
    INTO winning_bid
    FROM auction_bids ab
    JOIN profiles p ON ab.user_id = p.id
    WHERE ab.auction_id = p_auction_id
    ORDER BY ab.bid_amount DESC, ab.created_at ASC
    LIMIT 1;
    
    -- Update auction status
    UPDATE auctions 
    SET status = 'completed', 
        winner_id = CASE WHEN winning_bid.user_id IS NOT NULL THEN winning_bid.user_id ELSE NULL END,
        updated_at = now()
    WHERE id = p_auction_id;
    
    -- Log audit entry
    INSERT INTO auction_audit_logs (auction_id, user_id, action, new_values)
    VALUES (p_auction_id, auth.uid(), 'auction_completed',
           jsonb_build_object('winner_id', winning_bid.user_id, 'winning_amount', winning_bid.bid_amount));
    
    RETURN TRUE;
END;
$$;

-- =============================================
-- NOTIFICATION FUNCTIONS
-- =============================================

-- Function to create notification
CREATE OR REPLACE FUNCTION create_notification(
    p_user_id UUID,
    p_auction_id UUID,
    p_type TEXT,
    p_title TEXT,
    p_message TEXT
)
RETURNS UUID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    notification_id UUID;
BEGIN
    INSERT INTO auction_notifications (user_id, auction_id, type, title, message)
    VALUES (p_user_id, p_auction_id, p_type, p_title, p_message)
    RETURNING id INTO notification_id;
    
    RETURN notification_id;
END;
$$;

-- Function to mark notification as read
CREATE OR REPLACE FUNCTION mark_notification_read(p_notification_id UUID)
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    UPDATE auction_notifications 
    SET is_read = TRUE 
    WHERE id = p_notification_id AND user_id = auth.uid();
    
    RETURN FOUND;
END;
$$;

-- Function to mark all notifications as read for user
CREATE OR REPLACE FUNCTION mark_all_notifications_read()
RETURNS INTEGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    updated_count INTEGER;
BEGIN
    UPDATE auction_notifications 
    SET is_read = TRUE 
    WHERE user_id = auth.uid() AND is_read = FALSE;
    
    GET DIAGNOSTICS updated_count = ROW_COUNT;
    RETURN updated_count;
END;
$$;

-- =============================================
-- UTILITY FUNCTIONS
-- =============================================

-- Function to get user's active auctions
CREATE OR REPLACE FUNCTION get_user_auctions()
RETURNS TABLE (
    id UUID,
    title TEXT,
    status TEXT,
    current_price DECIMAL,
    bid_count BIGINT,
    end_time TIMESTAMPTZ
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    RETURN QUERY
    SELECT 
        a.id,
        a.title,
        a.status,
        a.current_price,
        COUNT(ab.id) as bid_count,
        a.end_time
    FROM auctions a
    LEFT JOIN auction_bids ab ON a.id = ab.auction_id
    WHERE a.created_by = auth.uid()
    GROUP BY a.id, a.title, a.status, a.current_price, a.end_time
    ORDER BY a.created_at DESC;
END;
$$;

-- Function to get auction details with bids
CREATE OR REPLACE FUNCTION get_auction_with_bids(p_auction_id UUID)
RETURNS JSON
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    result JSON;
BEGIN
    SELECT json_build_object(
        'auction', row_to_json(a),
        'bids', COALESCE(
            (SELECT json_agg(
                json_build_object(
                    'id', ab.id,
                    'bid_amount', ab.bid_amount,
                    'created_at', ab.created_at,
                    'user', json_build_object(
                        'id', p.id,
                        'full_name', p.full_name,
                        'email', p.email
                    )
                ) ORDER BY ab.bid_amount DESC, ab.created_at ASC
            )
            FROM auction_bids ab
            JOIN profiles p ON ab.user_id = p.id
            WHERE ab.auction_id = p_auction_id), '[]'::json
        )
    ) INTO result
    FROM auctions a
    WHERE a.id = p_auction_id;
    
    RETURN result;
END;
$$;

-- Function to cleanup expired auctions
CREATE OR REPLACE FUNCTION cleanup_expired_auctions()
RETURNS INTEGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    updated_count INTEGER;
BEGIN
    -- Auto-complete expired auctions
    UPDATE auctions 
    SET status = 'completed', updated_at = now()
    WHERE status = 'active' AND end_time <= now();
    
    GET DIAGNOSTICS updated_count = ROW_COUNT;
    
    -- Log cleanup action
    INSERT INTO auction_audit_logs (auction_id, action, new_values)
    SELECT id, 'auto_completed', jsonb_build_object('reason', 'expired')
    FROM auctions 
    WHERE status = 'completed' AND updated_at >= now() - interval '1 minute';
    
    RETURN updated_count;
END;
$$;



================================================
FILE: supabase/migrations/06_database_views.sql
================================================
-- Database Views for Optimized Queries
-- This file contains all views for the auction platform
-- Generated from database audit on 2025-01-26

-- =============================================
-- ACTIVE AUCTIONS SUMMARY VIEW
-- =============================================

CREATE OR REPLACE VIEW active_auctions_summary AS
SELECT 
    a.id,
    a.title,
    a.description,
    a.pickup_location,
    a.delivery_location,
    a.pickup_date,
    a.delivery_date,
    a.starting_price,
    a.current_price,
    a.status,
    a.end_time,
    a.created_at,
    a.updated_at,
    -- Creator information
    creator.full_name as creator_name,
    creator.email as creator_email,
    creator.phone as creator_phone,
    -- Winner information (if any)
    winner.full_name as winner_name,
    winner.email as winner_email,
    winner.phone as winner_phone,
    -- Bid statistics
    COALESCE(bid_stats.bid_count, 0) as bid_count,
    COALESCE(bid_stats.highest_bid, a.starting_price) as highest_bid,
    bid_stats.last_bid_time,
    -- Time remaining
    CASE 
        WHEN a.end_time > now() THEN 
            EXTRACT(EPOCH FROM (a.end_time - now()))::INTEGER 
        ELSE 0 
    END as seconds_remaining,
    -- Status flags
    (a.end_time <= now()) as is_expired,
    (a.status = 'active' AND a.end_time > now()) as is_biddable
FROM auctions a
JOIN profiles creator ON a.created_by = creator.id
LEFT JOIN profiles winner ON a.winner_id = winner.id
LEFT JOIN (
    SELECT 
        auction_id,
        COUNT(*) as bid_count,
        MAX(bid_amount) as highest_bid,
        MAX(created_at) as last_bid_time
    FROM auction_bids
    GROUP BY auction_id
) bid_stats ON a.id = bid_stats.auction_id
WHERE a.status IN ('active', 'completed')
ORDER BY 
    CASE WHEN a.status = 'active' THEN 0 ELSE 1 END,
    a.end_time DESC;

-- =============================================
-- USER NOTIFICATIONS SUMMARY VIEW
-- =============================================

CREATE OR REPLACE VIEW user_notifications_summary AS
SELECT 
    n.id,
    n.user_id,
    n.auction_id,
    n.type,
    n.title,
    n.message,
    n.is_read,
    n.created_at,
    -- Auction information
    a.title as auction_title,
    a.status as auction_status,
    a.current_price as auction_current_price,
    -- User information
    u.full_name as user_name,
    u.email as user_email,
    -- Time formatting
    CASE 
        WHEN n.created_at > now() - interval '1 hour' THEN 
            EXTRACT(EPOCH FROM (now() - n.created_at))::INTEGER || ' seconds ago'
        WHEN n.created_at > now() - interval '1 day' THEN 
            EXTRACT(HOUR FROM (now() - n.created_at))::INTEGER || ' hours ago'
        WHEN n.created_at > now() - interval '1 week' THEN 
            EXTRACT(DAY FROM (now() - n.created_at))::INTEGER || ' days ago'
        ELSE 
            to_char(n.created_at, 'Mon DD, YYYY')
    END as time_ago,
    -- Priority scoring for sorting
    CASE 
        WHEN n.type = 'auction_won' THEN 5
        WHEN n.type = 'auction_ending_soon' THEN 4
        WHEN n.type = 'bid_placed' THEN 3
        WHEN n.type = 'auction_completed' THEN 2
        WHEN n.type = 'new_auction' THEN 1
        ELSE 0
    END as priority_score
FROM auction_notifications n
JOIN auctions a ON n.auction_id = a.id
JOIN profiles u ON n.user_id = u.id
ORDER BY 
    n.is_read ASC,
    priority_score DESC,
    n.created_at DESC;

-- =============================================
-- AUCTION BIDDING SUMMARY VIEW
-- =============================================

CREATE OR REPLACE VIEW auction_bidding_summary AS
SELECT 
    a.id as auction_id,
    a.title,
    a.current_price,
    a.end_time,
    a.status,
    -- Bidding statistics
    COUNT(DISTINCT ab.user_id) as unique_bidders,
    COUNT(ab.id) as total_bids,
    MAX(ab.bid_amount) as highest_bid,
    MIN(ab.bid_amount) as lowest_bid,
    AVG(ab.bid_amount) as average_bid,
    -- Latest bid information
    latest_bid.bid_amount as latest_bid_amount,
    latest_bid.created_at as latest_bid_time,
    latest_bidder.full_name as latest_bidder_name,
    -- Bid progression
    CASE 
        WHEN COUNT(ab.id) > 0 THEN 
            ((MAX(ab.bid_amount) - a.starting_price) / a.starting_price * 100)::DECIMAL(5,2)
        ELSE 0 
    END as price_increase_percentage,
    -- Time analysis
    CASE 
        WHEN a.end_time > now() THEN 
            ROUND(EXTRACT(EPOCH FROM (a.end_time - now())) / 3600, 2)
        ELSE 0 
    END as hours_remaining
FROM auctions a
LEFT JOIN auction_bids ab ON a.id = ab.auction_id
LEFT JOIN (
    SELECT DISTINCT ON (auction_id) 
        auction_id, user_id, bid_amount, created_at
    FROM auction_bids 
    ORDER BY auction_id, created_at DESC
) latest_bid ON a.id = latest_bid.auction_id
LEFT JOIN profiles latest_bidder ON latest_bid.user_id = latest_bidder.id
GROUP BY 
    a.id, a.title, a.current_price, a.end_time, a.status, a.starting_price,
    latest_bid.bid_amount, latest_bid.created_at, latest_bidder.full_name
ORDER BY a.created_at DESC;

-- =============================================
-- USER ACTIVITY SUMMARY VIEW
-- =============================================

CREATE OR REPLACE VIEW user_activity_summary AS
SELECT 
    p.id as user_id,
    p.full_name,
    p.email,
    p.role,
    p.created_at as user_since,
    -- Auction activity for consigners
    CASE WHEN p.role = 'consigner' THEN
        (SELECT COUNT(*) FROM auctions WHERE created_by = p.id)
    ELSE 0 END as auctions_created,
    CASE WHEN p.role = 'consigner' THEN
        (SELECT COUNT(*) FROM auctions WHERE created_by = p.id AND status = 'completed')
    ELSE 0 END as auctions_completed,
    -- Bidding activity for drivers  
    CASE WHEN p.role = 'driver' THEN
        (SELECT COUNT(*) FROM auction_bids WHERE user_id = p.id)
    ELSE 0 END as bids_placed,
    CASE WHEN p.role = 'driver' THEN
        (SELECT COUNT(*) FROM auctions WHERE winner_id = p.id)
    ELSE 0 END as auctions_won,
    -- Notification activity
    (SELECT COUNT(*) FROM auction_notifications WHERE user_id = p.id) as total_notifications,
    (SELECT COUNT(*) FROM auction_notifications WHERE user_id = p.id AND is_read = false) as unread_notifications,
    -- Recent activity
    (SELECT MAX(created_at) FROM auction_audit_logs WHERE user_id = p.id) as last_activity,
    -- Push notification status
    CASE WHEN p.push_token IS NOT NULL THEN true ELSE false END as has_push_notifications
FROM profiles p
ORDER BY 
    CASE WHEN p.role = 'consigner' THEN 
        (SELECT COUNT(*) FROM auctions WHERE created_by = p.id)
    ELSE 
        (SELECT COUNT(*) FROM auction_bids WHERE user_id = p.id)
    END DESC;



================================================
FILE: supabase/migrations/07_database_triggers.sql
================================================
-- Database Triggers and Automation
-- This file contains all triggers for the auction platform
-- Generated from database audit on 2025-01-26

-- =============================================
-- AUTHENTICATION TRIGGERS
-- =============================================

-- Function to handle new user registration
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    INSERT INTO public.profiles (id, email, full_name, role)
    VALUES (
        NEW.id,
        NEW.email,
        COALESCE(NEW.raw_user_meta_data->>'full_name', ''),
        COALESCE(NEW.raw_user_meta_data->>'role', 'driver')
    );
    RETURN NEW;
END;
$$;

-- Trigger for new user creation
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- Function to auto-confirm users (disable email confirmation)
CREATE OR REPLACE FUNCTION public.auto_confirm_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    NEW.email_confirmed_at = now();
    NEW.confirmed_at = now();
    RETURN NEW;
END;
$$;

-- Trigger for auto-confirming users
DROP TRIGGER IF EXISTS on_auth_user_auto_confirm ON auth.users;
CREATE TRIGGER on_auth_user_auto_confirm
    BEFORE INSERT ON auth.users
    FOR EACH ROW EXECUTE FUNCTION public.auto_confirm_user();

-- =============================================
-- AUCTION NOTIFICATION TRIGGERS
-- =============================================

-- Function to handle bid notifications
CREATE OR REPLACE FUNCTION notify_bid_placed()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    auction_title TEXT;
    consigner_id UUID;
    bidder_name TEXT;
    bid_amount DECIMAL;
BEGIN
    -- Get auction and bidder details
    SELECT a.title, a.created_by, p.full_name, NEW.bid_amount
    INTO auction_title, consigner_id, bidder_name, bid_amount
    FROM auctions a
    JOIN profiles p ON NEW.user_id = p.id
    WHERE a.id = NEW.auction_id;
    
    -- Notify auction creator
    INSERT INTO auction_notifications (user_id, auction_id, type, title, message)
    VALUES (
        consigner_id,
        NEW.auction_id,
        'bid_placed',
        'New Bid on Your Auction',
        bidder_name || ' placed a bid of $' || bid_amount || ' on "' || auction_title || '"'
    );
    
    -- Notify other bidders (except the current bidder)
    INSERT INTO auction_notifications (user_id, auction_id, type, title, message)
    SELECT DISTINCT 
        ab.user_id,
        NEW.auction_id,
        'bid_placed',
        'You''ve Been Outbid',
        'A higher bid of $' || bid_amount || ' was placed on "' || auction_title || '"'
    FROM auction_bids ab
    WHERE ab.auction_id = NEW.auction_id 
    AND ab.user_id != NEW.user_id
    AND ab.bid_amount < NEW.bid_amount;
    
    RETURN NEW;
END;
$$;

-- Trigger for bid notifications
DROP TRIGGER IF EXISTS trigger_bid_notifications ON auction_bids;
CREATE TRIGGER trigger_bid_notifications
    AFTER INSERT OR UPDATE ON auction_bids
    FOR EACH ROW EXECUTE FUNCTION notify_bid_placed();

-- Function to handle auction completion notifications
CREATE OR REPLACE FUNCTION notify_auction_completed()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    auction_title TEXT;
    winner_name TEXT;
    winning_amount DECIMAL;
BEGIN
    -- Only trigger on status change to completed
    IF OLD.status != 'completed' AND NEW.status = 'completed' THEN
        SELECT title INTO auction_title FROM auctions WHERE id = NEW.id;
        
        -- If there's a winner
        IF NEW.winner_id IS NOT NULL THEN
            SELECT full_name INTO winner_name FROM profiles WHERE id = NEW.winner_id;
            SELECT current_price INTO winning_amount FROM auctions WHERE id = NEW.id;
            
            -- Notify winner
            INSERT INTO auction_notifications (user_id, auction_id, type, title, message)
            VALUES (
                NEW.winner_id,
                NEW.id,
                'auction_won',
                'Congratulations! You Won!',
                'You won the auction "' || auction_title || '" with a bid of $' || winning_amount
            );
            
            -- Notify creator
            INSERT INTO auction_notifications (user_id, auction_id, type, title, message)
            VALUES (
                NEW.created_by,
                NEW.id,
                'auction_completed',
                'Your Auction Completed',
                'Your auction "' || auction_title || '" was won by ' || winner_name || ' for $' || winning_amount
            );
            
            -- Notify other bidders
            INSERT INTO auction_notifications (user_id, auction_id, type, title, message)
            SELECT DISTINCT 
                ab.user_id,
                NEW.id,
                'auction_completed',
                'Auction Ended',
                'The auction "' || auction_title || '" ended. It was won by ' || winner_name || ' for $' || winning_amount
            FROM auction_bids ab
            WHERE ab.auction_id = NEW.id 
            AND ab.user_id != NEW.winner_id;
        ELSE
            -- Notify creator - no winner
            INSERT INTO auction_notifications (user_id, auction_id, type, title, message)
            VALUES (
                NEW.created_by,
                NEW.id,
                'auction_completed',
                'Your Auction Ended',
                'Your auction "' || auction_title || '" ended with no winning bids'
            );
        END IF;
    END IF;
    
    RETURN NEW;
END;
$$;

-- Trigger for auction completion notifications
DROP TRIGGER IF EXISTS trigger_auction_completion_notifications ON auctions;
CREATE TRIGGER trigger_auction_completion_notifications
    AFTER UPDATE ON auctions
    FOR EACH ROW EXECUTE FUNCTION notify_auction_completed();

-- Function to notify about expiring auctions
CREATE OR REPLACE FUNCTION notify_auction_ending_soon()
RETURNS INTEGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    auction_record RECORD;
    notification_count INTEGER := 0;
BEGIN
    -- Find auctions ending in the next 30 minutes that haven't been notified recently
    FOR auction_record IN
        SELECT a.id, a.title, a.created_by, a.end_time
        FROM auctions a
        WHERE a.status = 'active'
        AND a.end_time BETWEEN now() AND now() + interval '30 minutes'
        AND NOT EXISTS (
            SELECT 1 FROM auction_notifications 
            WHERE auction_id = a.id 
            AND type = 'auction_ending_soon' 
            AND created_at > now() - interval '1 hour'
        )
    LOOP
        -- Notify auction creator
        INSERT INTO auction_notifications (user_id, auction_id, type, title, message)
        VALUES (
            auction_record.created_by,
            auction_record.id,
            'auction_ending_soon',
            'Auction Ending Soon',
            'Your auction "' || auction_record.title || '" ends in less than 30 minutes'
        );
        
        -- Notify active bidders
        INSERT INTO auction_notifications (user_id, auction_id, type, title, message)
        SELECT DISTINCT 
            ab.user_id,
            auction_record.id,
            'auction_ending_soon',
            'Auction Ending Soon',
            'The auction "' || auction_record.title || '" ends in less than 30 minutes'
        FROM auction_bids ab
        WHERE ab.auction_id = auction_record.id;
        
        notification_count := notification_count + 1;
    END LOOP;
    
    RETURN notification_count;
END;
$$;

-- =============================================
-- TIMESTAMP UPDATE TRIGGERS
-- =============================================

-- Function to update timestamps
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$;

-- Triggers for timestamp updates
DROP TRIGGER IF EXISTS update_profiles_updated_at ON profiles;
CREATE TRIGGER update_profiles_updated_at
    BEFORE UPDATE ON profiles
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_auctions_updated_at ON auctions;
CREATE TRIGGER update_auctions_updated_at
    BEFORE UPDATE ON auctions
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- =============================================
-- AUDIT LOGGING TRIGGERS  
-- =============================================

-- Function to log auction changes
CREATE OR REPLACE FUNCTION log_auction_changes()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    action_type TEXT;
    old_values JSONB;
    new_values JSONB;
BEGIN
    -- Determine action type
    IF TG_OP = 'INSERT' THEN
        action_type := 'created';
        old_values := NULL;
        new_values := to_jsonb(NEW);
    ELSIF TG_OP = 'UPDATE' THEN
        action_type := 'updated';
        old_values := to_jsonb(OLD);
        new_values := to_jsonb(NEW);
    ELSIF TG_OP = 'DELETE' THEN
        action_type := 'deleted';
        old_values := to_jsonb(OLD);
        new_values := NULL;
    END IF;
    
    -- Log the change
    INSERT INTO auction_audit_logs (
        auction_id, 
        user_id, 
        action, 
        old_values, 
        new_values
    ) VALUES (
        COALESCE(NEW.id, OLD.id),
        auth.uid(),
        action_type,
        old_values,
        new_values
    );
    
    RETURN COALESCE(NEW, OLD);
END;
$$;

-- Trigger for auction audit logging
DROP TRIGGER IF EXISTS trigger_auction_audit ON auctions;
CREATE TRIGGER trigger_auction_audit
    AFTER INSERT OR UPDATE OR DELETE ON auctions
    FOR EACH ROW EXECUTE FUNCTION log_auction_changes();

-- =============================================
-- SCHEDULED MAINTENANCE FUNCTIONS
-- =============================================

-- Function to perform automated maintenance
CREATE OR REPLACE FUNCTION automated_maintenance()
RETURNS TEXT
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    expired_count INTEGER;
    notification_count INTEGER;
    result_message TEXT;
BEGIN
    -- Complete expired auctions
    SELECT cleanup_expired_auctions() INTO expired_count;
    
    -- Send ending soon notifications
    SELECT notify_auction_ending_soon() INTO notification_count;
    
    -- Clean up old notifications (older than 30 days)
    DELETE FROM auction_notifications 
    WHERE created_at < now() - interval '30 days';
    
    -- Clean up old audit logs (older than 90 days)
    DELETE FROM auction_audit_logs 
    WHERE created_at < now() - interval '90 days';
    
    result_message := format(
        'Maintenance completed: %s expired auctions, %s ending notifications sent',
        expired_count,
        notification_count
    );
    
    RETURN result_message;
END;
$$;



================================================
FILE: supabase/migrations/08_push_notifications.sql
================================================
-- Push Notification System and External API Integration
-- This file contains functions for push notifications and external API calls
-- Generated from database audit on 2025-01-26

-- =============================================
-- PUSH NOTIFICATION FUNCTIONS
-- =============================================

-- Function to send push notification via HTTP
CREATE OR REPLACE FUNCTION send_push_notification(
    p_user_id UUID,
    p_title TEXT,
    p_message TEXT,
    p_data JSONB DEFAULT '{}'::JSONB
)
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    push_token TEXT;
    notification_payload JSONB;
    http_response RECORD;
    expo_url TEXT := 'https://exp.host/--/api/v2/push/send';
BEGIN
    -- Get user's push token
    SELECT profiles.push_token INTO push_token
    FROM profiles
    WHERE profiles.id = p_user_id;
    
    -- Return false if no push token
    IF push_token IS NULL OR push_token = '' THEN
        RETURN FALSE;
    END IF;
    
    -- Build notification payload
    notification_payload := jsonb_build_object(
        'to', push_token,
        'title', p_title,
        'body', p_message,
        'data', p_data,
        'sound', 'default',
        'priority', 'high'
    );
    
    -- Send HTTP request to Expo Push API
    SELECT * INTO http_response
    FROM http((
        'POST',
        expo_url,
        ARRAY[
            http_header('Content-Type', 'application/json'),
            http_header('Accept', 'application/json')
        ],
        'application/json',
        notification_payload::TEXT
    )::http_request);
    
    -- Check if request was successful
    IF http_response.status BETWEEN 200 AND 299 THEN
        RETURN TRUE;
    ELSE
        -- Log the error for debugging
        RAISE WARNING 'Push notification failed: Status %, Response: %', 
            http_response.status, http_response.content;
        RETURN FALSE;
    END IF;
    
EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING 'Push notification error: %', SQLERRM;
        RETURN FALSE;
END;
$$;

-- Function to send notification with database logging
CREATE OR REPLACE FUNCTION send_notification_with_push(
    p_user_id UUID,
    p_auction_id UUID,
    p_type TEXT,
    p_title TEXT,
    p_message TEXT,
    p_data JSONB DEFAULT '{}'::JSONB
)
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    notification_id UUID;
    push_sent BOOLEAN;
BEGIN
    -- Create database notification
    INSERT INTO auction_notifications (user_id, auction_id, type, title, message)
    VALUES (p_user_id, p_auction_id, p_type, p_title, p_message)
    RETURNING id INTO notification_id;
    
    -- Send push notification
    SELECT send_push_notification(p_user_id, p_title, p_message, 
           p_data || jsonb_build_object('notification_id', notification_id))
    INTO push_sent;
    
    RETURN push_sent;
END;
$$;

-- Function to broadcast notification to multiple users
CREATE OR REPLACE FUNCTION broadcast_notification(
    p_user_ids UUID[],
    p_auction_id UUID,
    p_type TEXT,
    p_title TEXT,
    p_message TEXT,
    p_data JSONB DEFAULT '{}'::JSONB
)
RETURNS INTEGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    user_id UUID;
    success_count INTEGER := 0;
    notification_sent BOOLEAN;
BEGIN
    -- Send to each user
    FOREACH user_id IN ARRAY p_user_ids
    LOOP
        SELECT send_notification_with_push(
            user_id, p_auction_id, p_type, p_title, p_message, p_data
        ) INTO notification_sent;
        
        IF notification_sent THEN
            success_count := success_count + 1;
        END IF;
    END LOOP;
    
    RETURN success_count;
END;
$$;

-- =============================================
-- NOTIFICATION TRIGGER FUNCTIONS WITH PUSH
-- =============================================

-- Enhanced bid notification function with push
CREATE OR REPLACE FUNCTION notify_bid_placed_with_push()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    auction_title TEXT;
    consigner_id UUID;
    bidder_name TEXT;
    bid_amount DECIMAL;
    other_bidders UUID[];
    notification_data JSONB;
BEGIN
    -- Get auction and bidder details
    SELECT a.title, a.created_by, p.full_name, NEW.bid_amount
    INTO auction_title, consigner_id, bidder_name, bid_amount
    FROM auctions a
    JOIN profiles p ON NEW.user_id = p.id
    WHERE a.id = NEW.auction_id;
    
    -- Prepare notification data
    notification_data := jsonb_build_object(
        'auction_id', NEW.auction_id,
        'bid_amount', bid_amount,
        'bidder_name', bidder_name,
        'type', 'bid_placed'
    );
    
    -- Notify auction creator
    PERFORM send_notification_with_push(
        consigner_id,
        NEW.auction_id,
        'bid_placed',
        'New Bid on Your Auction',
        bidder_name || ' placed a bid of $' || bid_amount || ' on "' || auction_title || '"',
        notification_data
    );
    
    -- Get other bidders to notify
    SELECT array_agg(DISTINCT ab.user_id)
    INTO other_bidders
    FROM auction_bids ab
    WHERE ab.auction_id = NEW.auction_id 
    AND ab.user_id != NEW.user_id
    AND ab.bid_amount < NEW.bid_amount;
    
    -- Notify other bidders
    IF other_bidders IS NOT NULL AND array_length(other_bidders, 1) > 0 THEN
        PERFORM broadcast_notification(
            other_bidders,
            NEW.auction_id,
            'bid_placed',
            'You''ve Been Outbid',
            'A higher bid of $' || bid_amount || ' was placed on "' || auction_title || '"',
            notification_data
        );
    END IF;
    
    RETURN NEW;
END;
$$;

-- Enhanced auction completion notification with push
CREATE OR REPLACE FUNCTION notify_auction_completed_with_push()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    auction_title TEXT;
    winner_name TEXT;
    winning_amount DECIMAL;
    other_bidders UUID[];
    notification_data JSONB;
BEGIN
    -- Only trigger on status change to completed
    IF OLD.status != 'completed' AND NEW.status = 'completed' THEN
        SELECT title INTO auction_title FROM auctions WHERE id = NEW.id;
        
        -- Prepare base notification data
        notification_data := jsonb_build_object(
            'auction_id', NEW.id,
            'auction_title', auction_title,
            'type', 'auction_completed'
        );
        
        -- If there's a winner
        IF NEW.winner_id IS NOT NULL THEN
            SELECT full_name INTO winner_name FROM profiles WHERE id = NEW.winner_id;
            SELECT current_price INTO winning_amount FROM auctions WHERE id = NEW.id;
            
            -- Add winner data
            notification_data := notification_data || jsonb_build_object(
                'winner_id', NEW.winner_id,
                'winner_name', winner_name,
                'winning_amount', winning_amount
            );
            
            -- Notify winner
            PERFORM send_notification_with_push(
                NEW.winner_id,
                NEW.id,
                'auction_won',
                'Congratulations! You Won!',
                'You won the auction "' || auction_title || '" with a bid of $' || winning_amount,
                notification_data || jsonb_build_object('is_winner', true)
            );
            
            -- Notify creator
            PERFORM send_notification_with_push(
                NEW.created_by,
                NEW.id,
                'auction_completed',
                'Your Auction Completed',
                'Your auction "' || auction_title || '" was won by ' || winner_name || ' for $' || winning_amount,
                notification_data || jsonb_build_object('is_creator', true)
            );
            
            -- Get other bidders to notify
            SELECT array_agg(DISTINCT ab.user_id)
            INTO other_bidders
            FROM auction_bids ab
            WHERE ab.auction_id = NEW.id 
            AND ab.user_id != NEW.winner_id;
            
            -- Notify other bidders
            IF other_bidders IS NOT NULL AND array_length(other_bidders, 1) > 0 THEN
                PERFORM broadcast_notification(
                    other_bidders,
                    NEW.id,
                    'auction_completed',
                    'Auction Ended',
                    'The auction "' || auction_title || '" ended. It was won by ' || winner_name || ' for $' || winning_amount,
                    notification_data
                );
            END IF;
        ELSE
            -- Notify creator - no winner
            PERFORM send_notification_with_push(
                NEW.created_by,
                NEW.id,
                'auction_completed',
                'Your Auction Ended',
                'Your auction "' || auction_title || '" ended with no winning bids',
                notification_data || jsonb_build_object('is_creator', true, 'no_winner', true)
            );
        END IF;
    END IF;
    
    RETURN NEW;
END;
$$;

-- Enhanced ending soon notification with push
CREATE OR REPLACE FUNCTION notify_auction_ending_soon_with_push()
RETURNS INTEGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    auction_record RECORD;
    active_bidders UUID[];
    notification_count INTEGER := 0;
    notification_data JSONB;
BEGIN
    -- Find auctions ending in the next 30 minutes
    FOR auction_record IN
        SELECT a.id, a.title, a.created_by, a.end_time, a.current_price
        FROM auctions a
        WHERE a.status = 'active'
        AND a.end_time BETWEEN now() AND now() + interval '30 minutes'
        AND NOT EXISTS (
            SELECT 1 FROM auction_notifications 
            WHERE auction_id = a.id 
            AND type = 'auction_ending_soon' 
            AND created_at > now() - interval '1 hour'
        )
    LOOP
        -- Prepare notification data
        notification_data := jsonb_build_object(
            'auction_id', auction_record.id,
            'auction_title', auction_record.title,
            'current_price', auction_record.current_price,
            'end_time', auction_record.end_time,
            'type', 'auction_ending_soon'
        );
        
        -- Notify auction creator
        PERFORM send_notification_with_push(
            auction_record.created_by,
            auction_record.id,
            'auction_ending_soon',
            'Auction Ending Soon',
            'Your auction "' || auction_record.title || '" ends in less than 30 minutes',
            notification_data || jsonb_build_object('is_creator', true)
        );
        
        -- Get active bidders
        SELECT array_agg(DISTINCT ab.user_id)
        INTO active_bidders
        FROM auction_bids ab
        WHERE ab.auction_id = auction_record.id;
        
        -- Notify active bidders
        IF active_bidders IS NOT NULL AND array_length(active_bidders, 1) > 0 THEN
            PERFORM broadcast_notification(
                active_bidders,
                auction_record.id,
                'auction_ending_soon',
                'Auction Ending Soon',
                'The auction "' || auction_record.title || '" ends in less than 30 minutes',
                notification_data
            );
        END IF;
        
        notification_count := notification_count + 1;
    END LOOP;
    
    RETURN notification_count;
END;
$$;

-- =============================================
-- UTILITY FUNCTIONS FOR PUSH TOKENS
-- =============================================

-- Function to update user push token
CREATE OR REPLACE FUNCTION update_push_token(p_token TEXT)
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    UPDATE profiles 
    SET push_token = p_token, updated_at = now()
    WHERE id = auth.uid();
    
    RETURN FOUND;
END;
$$;

-- Function to get push notification statistics
CREATE OR REPLACE FUNCTION get_push_notification_stats()
RETURNS JSON
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    stats JSON;
BEGIN
    SELECT json_build_object(
        'total_users', (SELECT COUNT(*) FROM profiles),
        'users_with_push_tokens', (SELECT COUNT(*) FROM profiles WHERE push_token IS NOT NULL AND push_token != ''),
        'notifications_last_24h', (SELECT COUNT(*) FROM auction_notifications WHERE created_at > now() - interval '24 hours'),
        'unread_notifications', (SELECT COUNT(*) FROM auction_notifications WHERE is_read = false),
        'active_auctions', (SELECT COUNT(*) FROM auctions WHERE status = 'active' AND end_time > now())
    ) INTO stats;
    
    RETURN stats;
END;
$$;

-- Function to test push notification
CREATE OR REPLACE FUNCTION test_push_notification()
RETURNS BOOLEAN
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    RETURN send_push_notification(
        auth.uid(),
        'Test Notification',
        'This is a test push notification from Airavatl',
        jsonb_build_object('test', true, 'timestamp', now())
    );
END;
$$;



================================================
FILE: supabase/migrations/09_sample_data.sql
================================================
-- Sample Data for Testing and Development
-- This file contains sample data to populate the database for testing
-- Generated from database audit on 2025-01-26

-- =============================================
-- SAMPLE PROFILES (USERS)
-- =============================================

-- Insert sample consigners
INSERT INTO profiles (id, email, full_name, phone, role, created_at) VALUES
('11111111-1111-1111-1111-111111111111', 'john.consigner@airavatl.com', 'John Consigner', '+1-555-0101', 'consigner', now() - interval '30 days'),
('22222222-2222-2222-2222-222222222222', 'sarah.shipper@airavatl.com', 'Sarah Shipper', '+1-555-0102', 'consigner', now() - interval '25 days'),
('33333333-3333-3333-3333-333333333333', 'mike.merchant@airavatl.com', 'Mike Merchant', '+1-555-0103', 'consigner', now() - interval '20 days')
ON CONFLICT (id) DO NOTHING;

-- Insert sample drivers
INSERT INTO profiles (id, email, full_name, phone, role, vehicle_type, driver_license, created_at) VALUES
('44444444-4444-4444-4444-444444444444', 'alex.driver@airavatl.com', 'Alex Driver', '+1-555-0201', 'driver', 'Pickup Truck', 'DL123456789', now() - interval '28 days'),
('55555555-5555-5555-5555-555555555555', 'lisa.logistics@airavatl.com', 'Lisa Logistics', '+1-555-0202', 'driver', 'Van', 'DL987654321', now() - interval '26 days'),
('66666666-6666-6666-6666-666666666666', 'carlos.carrier@airavatl.com', 'Carlos Carrier', '+1-555-0203', 'driver', 'Box Truck', 'DL456789123', now() - interval '24 days'),
('77777777-7777-7777-7777-777777777777', 'emma.express@airavatl.com', 'Emma Express', '+1-555-0204', 'driver', 'Sedan', 'DL321654987', now() - interval '22 days'),
('88888888-8888-8888-8888-888888888888', 'david.delivery@airavatl.com', 'David Delivery', '+1-555-0205', 'driver', 'SUV', 'DL789123456', now() - interval '18 days')
ON CONFLICT (id) DO NOTHING;

-- =============================================
-- SAMPLE AUCTIONS
-- =============================================

-- Active auctions
INSERT INTO auctions (id, title, description, pickup_location, delivery_location, pickup_date, delivery_date, starting_price, current_price, status, created_by, end_time, created_at) VALUES
('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', 
 'Furniture Delivery - Downtown to Suburbs', 
 'Need to move a 3-piece living room set from downtown showroom to residential address. Includes sofa, loveseat, and coffee table. Careful handling required.',
 '123 Main St, Downtown, Atlanta, GA 30309',
 '456 Oak Ave, Marietta, GA 30060',
 now() + interval '2 days',
 now() + interval '3 days',
 75.00,
 95.00,
 'active',
 '11111111-1111-1111-1111-111111111111',
 now() + interval '12 hours',
 now() - interval '2 days'),

('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb',
 'Electronics Shipment - Express Delivery',
 'Urgent delivery of computer equipment from warehouse to office. Fragile items, insurance coverage required.',
 '789 Industrial Blvd, Warehouse District, Atlanta, GA 30318',
 '321 Business Park Dr, Sandy Springs, GA 30328',
 now() + interval '1 day',
 now() + interval '1 day',
 120.00,
 150.00,
 'active',
 '22222222-2222-2222-2222-222222222222',
 now() + interval '8 hours',
 now() - interval '1 day'),

('cccccccc-cccc-cccc-cccc-cccccccccccc',
 'Art Gallery Transport',
 'Transport of framed artwork from gallery to private residence. White glove service required.',
 '555 Art District Way, Atlanta, GA 30309',
 '777 Peachtree Hills Ave, Atlanta, GA 30305',
 now() + interval '3 days',
 now() + interval '4 days',
 200.00,
 200.00,
 'active',
 '33333333-3333-3333-3333-333333333333',
 now() + interval '2 days',
 now() - interval '6 hours')
ON CONFLICT (id) DO NOTHING;

-- Completed auctions
INSERT INTO auctions (id, title, description, pickup_location, delivery_location, pickup_date, delivery_date, starting_price, current_price, status, created_by, winner_id, end_time, created_at) VALUES
('dddddddd-dddd-dddd-dddd-dddddddddddd',
 'Appliance Delivery - Refrigerator',
 'Delivery of new refrigerator from store to customer home. Ground floor delivery.',
 '999 Appliance Store Rd, Decatur, GA 30030',
 '111 Residential St, Stone Mountain, GA 30083',
 now() - interval '1 day',
 now(),
 100.00,
 140.00,
 'completed',
 '11111111-1111-1111-1111-111111111111',
 '44444444-4444-4444-4444-444444444444',
 now() - interval '2 hours',
 now() - interval '3 days'),

('eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee',
 'Office Relocation - Small Items',
 'Moving boxes of office supplies and documents. Multiple trips may be required.',
 '888 Old Office Blvd, Atlanta, GA 30309',
 '222 New Office Complex, Buckhead, GA 30305',
 now() - interval '2 days',
 now() - interval '1 day',
 80.00,
 110.00,
 'completed',
 '22222222-2222-2222-2222-222222222222',
 '55555555-5555-5555-5555-555555555555',
 now() - interval '1 day',
 now() - interval '5 days')
ON CONFLICT (id) DO NOTHING;

-- =============================================
-- SAMPLE AUCTION BIDS
-- =============================================

-- Bids for active auction A
INSERT INTO auction_bids (auction_id, user_id, bid_amount, created_at) VALUES
('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '44444444-4444-4444-4444-444444444444', 80.00, now() - interval '36 hours'),
('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '55555555-5555-5555-5555-555555555555', 85.00, now() - interval '30 hours'),
('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '66666666-6666-6666-6666-666666666666', 90.00, now() - interval '24 hours'),
('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '77777777-7777-7777-7777-777777777777', 95.00, now() - interval '18 hours')
ON CONFLICT (auction_id, user_id) DO UPDATE SET bid_amount = EXCLUDED.bid_amount, created_at = EXCLUDED.created_at;

-- Bids for active auction B
INSERT INTO auction_bids (auction_id, user_id, bid_amount, created_at) VALUES
('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb', '66666666-6666-6666-6666-666666666666', 125.00, now() - interval '20 hours'),
('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb', '88888888-8888-8888-8888-888888888888', 130.00, now() - interval '15 hours'),
('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb', '44444444-4444-4444-4444-444444444444', 140.00, now() - interval '12 hours'),
('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb', '55555555-5555-5555-5555-555555555555', 150.00, now() - interval '8 hours')
ON CONFLICT (auction_id, user_id) DO UPDATE SET bid_amount = EXCLUDED.bid_amount, created_at = EXCLUDED.created_at;

-- Bids for completed auctions
INSERT INTO auction_bids (auction_id, user_id, bid_amount, created_at) VALUES
('dddddddd-dddd-dddd-dddd-dddddddddddd', '55555555-5555-5555-5555-555555555555', 105.00, now() - interval '3 days'),
('dddddddd-dddd-dddd-dddd-dddddddddddd', '66666666-6666-6666-6666-666666666666', 120.00, now() - interval '2 days 18 hours'),
('dddddddd-dddd-dddd-dddd-dddddddddddd', '44444444-4444-4444-4444-444444444444', 140.00, now() - interval '2 days 12 hours'),

('eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee', '77777777-7777-7777-7777-777777777777', 85.00, now() - interval '5 days'),
('eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee', '88888888-8888-8888-8888-888888888888', 95.00, now() - interval '4 days 18 hours'),
('eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee', '55555555-5555-5555-5555-555555555555', 110.00, now() - interval '4 days 12 hours')
ON CONFLICT (auction_id, user_id) DO UPDATE SET bid_amount = EXCLUDED.bid_amount, created_at = EXCLUDED.created_at;

-- =============================================
-- SAMPLE NOTIFICATIONS
-- =============================================

-- Recent notifications for active auctions
INSERT INTO auction_notifications (user_id, auction_id, type, title, message, is_read, created_at) VALUES
-- Notifications for auction A
('11111111-1111-1111-1111-111111111111', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', 'bid_placed', 'New Bid on Your Auction', 'Emma Express placed a bid of $95.00 on "Furniture Delivery - Downtown to Suburbs"', false, now() - interval '18 hours'),
('44444444-4444-4444-4444-444444444444', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', 'bid_placed', 'You''ve Been Outbid', 'A higher bid of $95.00 was placed on "Furniture Delivery - Downtown to Suburbs"', false, now() - interval '18 hours'),
('55555555-5555-5555-5555-555555555555', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', 'bid_placed', 'You''ve Been Outbid', 'A higher bid of $95.00 was placed on "Furniture Delivery - Downtown to Suburbs"', true, now() - interval '18 hours'),

-- Notifications for auction B
('22222222-2222-2222-2222-222222222222', 'bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb', 'bid_placed', 'New Bid on Your Auction', 'Lisa Logistics placed a bid of $150.00 on "Electronics Shipment - Express Delivery"', false, now() - interval '8 hours'),
('66666666-6666-6666-6666-666666666666', 'bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb', 'bid_placed', 'You''ve Been Outbid', 'A higher bid of $150.00 was placed on "Electronics Shipment - Express Delivery"', false, now() - interval '8 hours'),

-- Notifications for completed auctions
('44444444-4444-4444-4444-444444444444', 'dddddddd-dddd-dddd-dddd-dddddddddddd', 'auction_won', 'Congratulations! You Won!', 'You won the auction "Appliance Delivery - Refrigerator" with a bid of $140.00', true, now() - interval '2 hours'),
('11111111-1111-1111-1111-111111111111', 'dddddddd-dddd-dddd-dddd-dddddddddddd', 'auction_completed', 'Your Auction Completed', 'Your auction "Appliance Delivery - Refrigerator" was won by Alex Driver for $140.00', true, now() - interval '2 hours'),

('55555555-5555-5555-5555-555555555555', 'eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee', 'auction_won', 'Congratulations! You Won!', 'You won the auction "Office Relocation - Small Items" with a bid of $110.00', true, now() - interval '1 day'),
('22222222-2222-2222-2222-222222222222', 'eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee', 'auction_completed', 'Your Auction Completed', 'Your auction "Office Relocation - Small Items" was won by Lisa Logistics for $110.00', true, now() - interval '1 day')
ON CONFLICT DO NOTHING;

-- =============================================
-- SAMPLE AUDIT LOGS
-- =============================================

INSERT INTO auction_audit_logs (auction_id, user_id, action, old_values, new_values, created_at) VALUES
-- Auction creation logs
('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '11111111-1111-1111-1111-111111111111', 'auction_created', null, '{"title": "Furniture Delivery - Downtown to Suburbs", "starting_price": 75.00}', now() - interval '2 days'),
('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb', '22222222-2222-2222-2222-222222222222', 'auction_created', null, '{"title": "Electronics Shipment - Express Delivery", "starting_price": 120.00}', now() - interval '1 day'),
('cccccccc-cccc-cccc-cccc-cccccccccccc', '33333333-3333-3333-3333-333333333333', 'auction_created', null, '{"title": "Art Gallery Transport", "starting_price": 200.00}', now() - interval '6 hours'),

-- Bid placement logs
('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '44444444-4444-4444-4444-444444444444', 'bid_placed', null, '{"bid_amount": 80.00}', now() - interval '36 hours'),
('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '55555555-5555-5555-5555-555555555555', 'bid_placed', null, '{"bid_amount": 85.00}', now() - interval '30 hours'),
('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '77777777-7777-7777-7777-777777777777', 'bid_placed', null, '{"bid_amount": 95.00}', now() - interval '18 hours'),

('bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb', '55555555-5555-5555-5555-555555555555', 'bid_placed', null, '{"bid_amount": 150.00}', now() - interval '8 hours'),

-- Auction completion logs
('dddddddd-dddd-dddd-dddd-dddddddddddd', '11111111-1111-1111-1111-111111111111', 'auction_completed', null, '{"winner_id": "44444444-4444-4444-4444-444444444444", "winning_amount": 140.00}', now() - interval '2 hours'),
('eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee', '22222222-2222-2222-2222-222222222222', 'auction_completed', null, '{"winner_id": "55555555-5555-5555-5555-555555555555", "winning_amount": 110.00}', now() - interval '1 day')
ON CONFLICT DO NOTHING;

-- =============================================
-- UPDATE STATISTICS
-- =============================================

-- This will be displayed when the migration runs
DO $$
DECLARE
    user_count INTEGER;
    auction_count INTEGER;
    bid_count INTEGER;
    notification_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO user_count FROM profiles;
    SELECT COUNT(*) INTO auction_count FROM auctions;
    SELECT COUNT(*) INTO bid_count FROM auction_bids;
    SELECT COUNT(*) INTO notification_count FROM auction_notifications;
    
    RAISE NOTICE 'Sample data inserted successfully:';
    RAISE NOTICE '- Users: %', user_count;
    RAISE NOTICE '- Auctions: %', auction_count;
    RAISE NOTICE '- Bids: %', bid_count;
    RAISE NOTICE '- Notifications: %', notification_count;
END $$;



================================================
FILE: supabase/migrations/10_current_database_complete_schema.sql
================================================
/*
# Airavatl Auction Platform - Complete Current Database Schema
# Generated: August 7, 2025
# Purpose: Reference migration containing the complete current production schema

This migration file serves as a comprehensive reference for the current 
production database schema. It includes all tables, indexes, policies, 
functions, and views that are currently deployed.

This file should NOT be applied to production - it's for reference only.
*/

-- ============================================================================
-- EXTENSIONS
-- ============================================================================
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

CREATE EXTENSION IF NOT EXISTS "http" WITH SCHEMA extensions;

-- ============================================================================
-- CURRENT PRODUCTION TABLES
-- ============================================================================

-- Profiles table (User management)
CREATE TABLE IF NOT EXISTS public.profiles (
    id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    username text NOT NULL UNIQUE,
    role text NOT NULL CHECK (role IN ('consigner', 'driver')),

-- Contact information
phone_number text CHECK (phone_number ~ '^[0-9]{10}$'),
address text,
bio text,

-- Payment info
upi_id text CHECK ( upi_id ~ '^[a-zA-Z0-9._-]+@[a-zA-Z0-9]+$' ),

-- Driver-specific fields (expanded vehicle types)
vehicle_type text CHECK (
    vehicle_type IN (
        'three_wheeler',
        'pickup_truck',
        'mini_truck',
        'medium_truck',
        'large_truck'
    )
),

-- Push notifications
push_token text,

-- Avatar
avatar_url text,

-- Timestamps
created_at timestamptz DEFAULT now() NOT NULL,
    updated_at timestamptz DEFAULT now() NOT NULL
);

-- Auctions table (Core auction management)
CREATE TABLE IF NOT EXISTS public.auctions (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    title text NOT NULL,
    description text NOT NULL,

-- Vehicle information (expanded types)
vehicle_type text NOT NULL CHECK (
    vehicle_type IN (
        'three_wheeler',
        'pickup_truck',
        'mini_truck',
        'medium_truck',
        'large_truck'
    )
),

-- Timing
start_time timestamptz NOT NULL,
end_time timestamptz NOT NULL CHECK (end_time > start_time),
consignment_date timestamptz NOT NULL,

-- Status (expanded to include completed)
status text NOT NULL DEFAULT 'active' CHECK (
    status IN (
        'active',
        'completed',
        'cancelled'
    )
),

-- Ownership and winners
created_by uuid NOT NULL REFERENCES profiles (id) ON DELETE CASCADE,
winner_id uuid REFERENCES profiles (id),
winning_bid_id uuid, -- FK to auction_bids

-- Timestamps
created_at timestamptz DEFAULT now() NOT NULL,
updated_at timestamptz DEFAULT now() NOT NULL,

-- Constraints
CONSTRAINT valid_auction_duration CHECK (
        end_time - start_time >= interval '5 minutes' AND
        end_time - start_time <= interval '7 days'
    )
);

-- Auction bids table (Bidding system)
CREATE TABLE IF NOT EXISTS public.auction_bids (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    auction_id uuid NOT NULL REFERENCES auctions(id) ON DELETE CASCADE,
    user_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
    amount numeric NOT NULL CHECK (amount > 0),
    is_winning_bid boolean DEFAULT false,

-- Timestamps
created_at timestamptz DEFAULT now() NOT NULL,

-- Ensure unique bids per user per auction
UNIQUE(auction_id, user_id, amount) );

-- Add foreign key for winning bid (after auction_bids table exists)
ALTER TABLE auctions
ADD CONSTRAINT IF NOT EXISTS auctions_winning_bid_id_fkey FOREIGN KEY (winning_bid_id) REFERENCES auction_bids (id);

-- Auction notifications table (Enhanced notification system)
CREATE TABLE IF NOT EXISTS public.auction_notifications (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
    auction_id uuid REFERENCES auctions(id) ON DELETE CASCADE,

-- Enhanced notification types
type text NOT NULL CHECK (
    type IN (
        'auction_created',
        'bid_placed',
        'outbid',
        'auction_won',
        'auction_lost',
        'auction_cancelled',
        'bid_cancelled'
    )
),
message text NOT NULL,
is_read boolean DEFAULT false,

-- Additional data (JSON for flexibility)
data jsonb DEFAULT '{}',

-- Timestamps
created_at timestamptz DEFAULT now() NOT NULL );

-- Auction audit logs table (Compliance and debugging)
CREATE TABLE IF NOT EXISTS public.auction_audit_logs (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    auction_id uuid REFERENCES auctions(id) ON DELETE CASCADE,
    user_id uuid REFERENCES profiles(id) ON DELETE CASCADE,
    action text NOT NULL,
    details jsonb,

-- Timestamps
created_at timestamptz DEFAULT now() NOT NULL );

-- ============================================================================
-- PERFORMANCE INDEXES
-- ============================================================================

-- Profiles indexes
CREATE INDEX IF NOT EXISTS idx_profiles_role ON profiles (role);

CREATE INDEX IF NOT EXISTS idx_profiles_vehicle_type ON profiles (vehicle_type)
WHERE
    vehicle_type IS NOT NULL;

CREATE INDEX IF NOT EXISTS idx_profiles_push_token ON profiles (push_token)
WHERE
    push_token IS NOT NULL;

-- Auctions indexes
CREATE INDEX IF NOT EXISTS idx_auctions_status ON auctions (status);

CREATE INDEX IF NOT EXISTS idx_auctions_created_by ON auctions (created_by);

CREATE INDEX IF NOT EXISTS idx_auctions_winner_id ON auctions (winner_id)
WHERE
    winner_id IS NOT NULL;

CREATE INDEX IF NOT EXISTS idx_auctions_winning_bid_id ON auctions (winning_bid_id)
WHERE
    winning_bid_id IS NOT NULL;

CREATE INDEX IF NOT EXISTS idx_auctions_vehicle_type ON auctions (vehicle_type);

CREATE INDEX IF NOT EXISTS idx_auctions_end_time ON auctions (end_time);

CREATE INDEX IF NOT EXISTS idx_auctions_active_end_time ON auctions (end_time)
WHERE
    status = 'active';

-- Auction bids indexes
CREATE INDEX IF NOT EXISTS idx_auction_bids_auction_id ON auction_bids (auction_id);

CREATE INDEX IF NOT EXISTS idx_auction_bids_user_id ON auction_bids (user_id);

CREATE INDEX IF NOT EXISTS idx_auction_bids_amount ON auction_bids (auction_id, amount);

CREATE INDEX IF NOT EXISTS idx_auction_bids_winning ON auction_bids (auction_id)
WHERE
    is_winning_bid = true;

-- Notifications indexes
CREATE INDEX IF NOT EXISTS idx_auction_notifications_user_id ON auction_notifications (user_id);

CREATE INDEX IF NOT EXISTS idx_auction_notifications_auction_id ON auction_notifications (auction_id);

CREATE INDEX IF NOT EXISTS idx_auction_notifications_unread ON auction_notifications (user_id, created_at)
WHERE
    is_read = false;

-- Audit logs indexes
CREATE INDEX IF NOT EXISTS idx_auction_audit_logs_auction_id ON auction_audit_logs (auction_id);

CREATE INDEX IF NOT EXISTS idx_auction_audit_logs_user_id ON auction_audit_logs (user_id);

CREATE INDEX IF NOT EXISTS idx_auction_audit_logs_created_at ON auction_audit_logs (created_at);

-- ============================================================================
-- ROW LEVEL SECURITY POLICIES
-- ============================================================================

-- Enable RLS on all tables
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

ALTER TABLE auctions ENABLE ROW LEVEL SECURITY;

ALTER TABLE auction_bids ENABLE ROW LEVEL SECURITY;

ALTER TABLE auction_notifications ENABLE ROW LEVEL SECURITY;

ALTER TABLE auction_audit_logs ENABLE ROW LEVEL SECURITY;

-- ============================================================================
-- CURRENT PRODUCTION POLICIES
-- ============================================================================

-- Profiles policies
DROP POLICY IF EXISTS "Users can view all profiles" ON profiles;

CREATE POLICY "Users can view all profiles" ON profiles FOR
SELECT USING (true);

DROP POLICY IF EXISTS "Users can insert own profile" ON profiles;

CREATE POLICY "Users can insert own profile" ON profiles FOR
INSERT
WITH
    CHECK (auth.uid () = id);

DROP POLICY IF EXISTS "Users can update own profile" ON profiles;

CREATE POLICY "Users can update own profile" ON profiles FOR
UPDATE USING (auth.uid () = id)
WITH
    CHECK (auth.uid () = id);

-- Auctions policies
DROP POLICY IF EXISTS "Drivers view active auctions" ON auctions;

CREATE POLICY "Drivers view active auctions" ON auctions FOR
SELECT USING (
        EXISTS (
            SELECT 1
            FROM profiles
            WHERE
                profiles.id = auth.uid ()
                AND profiles.role = 'driver'
                AND (
                    auctions.status = 'active'
                    OR auctions.winner_id = auth.uid ()
                )
        )
    );

DROP POLICY IF EXISTS "Consigners view own auctions" ON auctions;

CREATE POLICY "Consigners view own auctions" ON auctions FOR
SELECT USING (
        EXISTS (
            SELECT 1
            FROM profiles
            WHERE
                profiles.id = auth.uid ()
                AND profiles.role = 'consigner'
                AND auctions.created_by = auth.uid ()
        )
    );

DROP POLICY IF EXISTS "Consigners create auctions" ON auctions;

CREATE POLICY "Consigners create auctions" ON auctions FOR
INSERT
WITH
    CHECK (
        EXISTS (
            SELECT 1
            FROM profiles
            WHERE
                profiles.id = auth.uid ()
                AND profiles.role = 'consigner'
        )
        AND auth.uid () = created_by
    );

-- Auction bids policies
DROP POLICY IF EXISTS "View bids for visible auctions" ON auction_bids;

CREATE POLICY "View bids for visible auctions" ON auction_bids FOR
SELECT USING (
        EXISTS (
            SELECT 1
            FROM auctions
            WHERE
                auctions.id = auction_bids.auction_id
        )
    );

DROP POLICY IF EXISTS "Drivers create bids" ON auction_bids;

CREATE POLICY "Drivers create bids" ON auction_bids FOR
INSERT
WITH
    CHECK (
        EXISTS (
            SELECT 1
            FROM profiles
            WHERE
                profiles.id = auth.uid ()
                AND profiles.role = 'driver'
        )
        AND auth.uid () = user_id
        AND EXISTS (
            SELECT 1
            FROM auctions
            WHERE
                auctions.id = auction_bids.auction_id
                AND auctions.status = 'active'
                AND auctions.end_time > now()
        )
    );

-- Notifications policies
DROP POLICY IF EXISTS "Users view own notifications" ON auction_notifications;

CREATE POLICY "Users view own notifications" ON auction_notifications FOR
SELECT USING (auth.uid () = user_id);

DROP POLICY IF EXISTS "Users update own notifications" ON auction_notifications;

CREATE POLICY "Users update own notifications" ON auction_notifications FOR
UPDATE USING (auth.uid () = user_id)
WITH
    CHECK (auth.uid () = user_id);

DROP POLICY IF EXISTS "System creates notifications" ON auction_notifications;

CREATE POLICY "System creates notifications" ON auction_notifications FOR
INSERT
WITH
    CHECK (true);

-- Audit logs policies
DROP POLICY IF EXISTS "Users view relevant audit logs" ON auction_audit_logs;

CREATE POLICY "Users view relevant audit logs" ON auction_audit_logs FOR
SELECT USING (
        auth.uid () = user_id
        OR EXISTS (
            SELECT 1
            FROM auctions
            WHERE
                auctions.id = auction_audit_logs.auction_id
                AND (
                    auctions.created_by = auth.uid ()
                    OR auctions.winner_id = auth.uid ()
                )
        )
    );

DROP POLICY IF EXISTS "System creates audit logs" ON auction_audit_logs;

CREATE POLICY "System creates audit logs" ON auction_audit_logs FOR
INSERT
WITH
    CHECK (true);

-- ============================================================================
-- CURRENT PRODUCTION VIEWS
-- ============================================================================

-- Active auctions summary view (Performance optimization)
CREATE OR REPLACE VIEW active_auctions_summary AS
SELECT a.id, a.title, a.description, a.vehicle_type, a.start_time, a.end_time, a.consignment_date, a.status, a.created_by, a.created_at,

-- Creator information
p.username as creator_username, p.phone_number as creator_phone,

-- Bidding summary
COALESCE(bid_summary.total_bids, 0) as total_bids,
bid_summary.current_highest_bid
FROM
    auctions a
    LEFT JOIN profiles p ON a.created_by = p.id
    LEFT JOIN (
        SELECT
            auction_id,
            COUNT(*) as total_bids,
            MIN(amount) as current_highest_bid
        FROM auction_bids
        GROUP BY
            auction_id
    ) bid_summary ON a.id = bid_summary.auction_id
WHERE
    a.status = 'active'
    AND a.end_time > now();

-- User notifications summary view
CREATE OR REPLACE VIEW user_notifications_summary AS
SELECT
    user_id,
    COUNT(*) as total_notifications,
    COUNT(*) FILTER (
        WHERE
            is_read = false
    ) as unread_count,
    COUNT(*) FILTER (
        WHERE
            type = 'auction_won'
    ) as auctions_won,
    COUNT(*) FILTER (
        WHERE
            type = 'outbid'
    ) as times_outbid,
    MAX(created_at) as latest_notification
FROM auction_notifications
GROUP BY
    user_id;

-- ============================================================================
-- AUTOMATION TRIGGERS
-- ============================================================================

-- Update timestamps trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS trigger AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply updated_at triggers
DROP TRIGGER IF EXISTS update_profiles_updated_at ON profiles;

CREATE TRIGGER update_profiles_updated_at 
    BEFORE UPDATE ON profiles
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_auctions_updated_at ON auctions;

CREATE TRIGGER update_auctions_updated_at
    BEFORE UPDATE ON auctions  
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- ============================================================================
-- CURRENT PRODUCTION FUNCTIONS
-- ============================================================================

-- Note: The actual function implementations are in separate migration files
-- This section lists the current functions available in production:

/*
Current Production Functions:
- create_auction_optimized()
- create_bid_optimized()
- close_auction_optimized()
- check_and_close_expired_auctions()
- cancel_auction_by_consigner()
- cancel_bid_by_driver()
- create_auction_notification()
- log_auction_activity()
- get_auction_details_optimized()
- send_push_notification()
- create_notification_with_push()
- get_user_auctions_optimized()
- get_auctions_paginated()
- create_auction_fast()
- place_bid_fast()
- get_auction_details_fast()
- run_auction_maintenance()
- test_user_notification()
- get_notification_system_status()
- close_auction_with_notifications()

HTTP Extension Functions:
- http()
- http_get()
- http_post()
- http_put()
- http_delete()
- http_patch()
- http_head()
- send_push_notification() (uses http extension)
*/

-- ============================================================================
-- SUMMARY OF CURRENT SCHEMA
-- ============================================================================

/*
PRODUCTION DATABASE SUMMARY (August 7, 2025):

TABLES:
✅ profiles (12 columns) - User management with enhanced vehicle types
✅ auctions (13 columns) - Core auction functionality
✅ auction_bids (6 columns) - Bidding system with unique constraints
✅ auction_notifications (8 columns) - Enhanced notification system
✅ auction_audit_logs (6 columns) - Complete audit trail

VIEWS:
✅ active_auctions_summary - Performance-optimized auction listing
✅ user_notifications_summary - User notification analytics

INDEXES:
✅ 15 performance indexes across all tables
✅ Conditional indexes for optimal query performance

SECURITY:
✅ Row Level Security enabled on all tables
✅ 10 comprehensive RLS policies
✅ Role-based access control (consigner/driver)

FUNCTIONS:
✅ 20+ business logic functions
✅ Push notification system with HTTP extension
✅ Automated auction lifecycle management
✅ Performance-optimized data access

VEHICLE TYPES SUPPORTED:
- three_wheeler
- pickup_truck
- mini_truck (NEW)
- medium_truck (NEW)  
- large_truck

NOTIFICATION TYPES:
- auction_created, bid_placed, outbid
- auction_won, auction_lost
- auction_cancelled, bid_cancelled

AUCTION STATUSES:
- active, completed, cancelled

This schema supports a fully functional auction platform with:
- Multi-role user system
- Real-time bidding
- Push notifications
- Audit logging
- Performance optimization
- Security compliance
*/


================================================
FILE: supabase/migrations/11_add_auction_updated_notification_type.sql
================================================
-- Add auction_updated notification type
-- This allows notifications to be sent when auctions are edited/updated

-- Drop existing constraint
ALTER TABLE auction_notifications
DROP CONSTRAINT IF EXISTS auction_notifications_type_check;

-- Add new constraint with auction_updated type
ALTER TABLE auction_notifications
ADD CONSTRAINT auction_notifications_type_check CHECK (
    type IN (
        'auction_created',
        'auction_updated',
        'bid_placed',
        'outbid',
        'auction_won',
        'auction_lost',
        'auction_cancelled',
        'bid_cancelled'
    )
);


================================================
FILE: types/supabase.ts
================================================
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      auction_audit_logs: {
        Row: {
          action: string
          auction_id: string | null
          created_at: string
          details: Json | null
          id: string
          user_id: string | null
        }
        Insert: {
          action: string
          auction_id?: string | null
          created_at?: string
          details?: Json | null
          id?: string
          user_id?: string | null
        }
        Update: {
          action?: string
          auction_id?: string | null
          created_at?: string
          details?: Json | null
          id?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "auction_audit_logs_auction_id_fkey"
            columns: ["auction_id"]
            isOneToOne: false
            referencedRelation: "auctions"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "auction_audit_logs_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      auction_bids: {
        Row: {
          amount: number
          auction_id: string
          created_at: string
          id: string
          is_winning_bid: boolean | null
          user_id: string
        }
        Insert: {
          amount: number
          auction_id: string
          created_at?: string
          id?: string
          is_winning_bid?: boolean | null
          user_id: string
        }
        Update: {
          amount?: number
          auction_id?: string
          created_at?: string
          id?: string
          is_winning_bid?: boolean | null
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "auction_bids_auction_id_fkey"
            columns: ["auction_id"]
            isOneToOne: false
            referencedRelation: "auctions"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "auction_bids_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      auction_notifications: {
        Row: {
          auction_id: string | null
          created_at: string
          data: Json | null
          id: string
          is_read: boolean | null
          message: string
          type: string
          user_id: string
        }
        Insert: {
          auction_id?: string | null
          created_at?: string
          data?: Json | null
          id?: string
          is_read?: boolean | null
          message: string
          type: string
          user_id: string
        }
        Update: {
          auction_id?: string | null
          created_at?: string
          data?: Json | null
          id?: string
          is_read?: boolean | null
          message?: string
          type?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "auction_notifications_auction_id_fkey"
            columns: ["auction_id"]
            isOneToOne: false
            referencedRelation: "auctions"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "auction_notifications_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      auctions: {
        Row: {
          consignment_date: string
          created_at: string
          created_by: string
          description: string
          end_time: string
          id: string
          start_time: string
          status: string
          title: string
          updated_at: string
          vehicle_type: string
          winner_id: string | null
          winning_bid_id: string | null
        }
        Insert: {
          consignment_date: string
          created_at?: string
          created_by: string
          description: string
          end_time: string
          id?: string
          start_time: string
          status?: string
          title: string
          updated_at?: string
          vehicle_type: string
          winner_id?: string | null
          winning_bid_id?: string | null
        }
        Update: {
          consignment_date?: string
          created_at?: string
          created_by?: string
          description?: string
          end_time?: string
          id?: string
          start_time?: string
          status?: string
          title?: string
          updated_at?: string
          vehicle_type?: string
          winner_id?: string | null
          winning_bid_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "auctions_created_by_fkey"
            columns: ["created_by"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "auctions_winner_id_fkey"
            columns: ["winner_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "auctions_winning_bid_id_fkey"
            columns: ["winning_bid_id"]
            isOneToOne: false
            referencedRelation: "auction_bids"
            referencedColumns: ["id"]
          },
        ]
      }
      profiles: {
        Row: {
          address: string | null
          avatar_url: string | null
          bio: string | null
          created_at: string
          id: string
          phone_number: string | null
          push_token: string | null
          role: string
          updated_at: string
          upi_id: string | null
          username: string
          vehicle_type: string | null
        }
        Insert: {
          address?: string | null
          avatar_url?: string | null
          bio?: string | null
          created_at?: string
          id: string
          phone_number?: string | null
          push_token?: string | null
          role: string
          updated_at?: string
          upi_id?: string | null
          username: string
          vehicle_type?: string | null
        }
        Update: {
          address?: string | null
          avatar_url?: string | null
          bio?: string | null
          created_at?: string
          id?: string
          phone_number?: string | null
          push_token?: string | null
          role?: string
          updated_at?: string
          upi_id?: string | null
          username?: string
          vehicle_type?: string | null
        }
        Relationships: []
      }
    }
    Views: {
      active_auctions_summary: {
        Row: {
          consignment_date: string | null
          created_at: string | null
          created_by: string | null
          creator_phone: string | null
          creator_username: string | null
          current_highest_bid: number | null
          description: string | null
          end_time: string | null
          id: string | null
          start_time: string | null
          status: string | null
          title: string | null
          total_bids: number | null
          vehicle_type: string | null
        }
        Relationships: [
          {
            foreignKeyName: "auctions_created_by_fkey"
            columns: ["created_by"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      user_notifications_summary: {
        Row: {
          auctions_won: number | null
          latest_notification: string | null
          times_outbid: number | null
          total_notifications: number | null
          unread_count: number | null
          user_id: string | null
        }
        Relationships: [
          {
            foreignKeyName: "auction_notifications_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
    }
    Functions: {
      cancel_auction_by_consigner: {
        Args: { p_auction_id: string; p_user_id: string }
        Returns: Json
      }
      cancel_bid_by_driver: {
        Args: { p_bid_id: string; p_user_id: string }
        Returns: Json
      }
      check_and_close_expired_auctions: {
        Args: Record<PropertyKey, never>
        Returns: number
      }
      close_auction_optimized: {
        Args: { p_auction_id: string }
        Returns: Json
      }
      close_auction_with_notifications: {
        Args: { p_auction_id: string }
        Returns: Json
      }
      create_auction_fast: {
        Args: { auction_data: Json }
        Returns: Json
      }
      create_auction_notification: {
        Args: {
          p_user_id: string
          p_auction_id: string
          p_type: string
          p_message: string
          p_data?: Json
        }
        Returns: string
      }
      create_auction_optimized: {
        Args: {
          p_title: string
          p_description: string
          p_vehicle_type: string
          p_start_time: string
          p_end_time: string
          p_consignment_date: string
          p_created_by: string
        }
        Returns: string
      }
      create_bid_optimized: {
        Args: { p_auction_id: string; p_user_id: string; p_amount: number }
        Returns: Json
      }
      create_notification_with_push: {
        Args: {
          p_user_id: string
          p_auction_id: string
          p_type: string
          p_message: string
          p_data?: Json
        }
        Returns: string
      }
      get_auction_details_fast: {
        Args: { p_auction_id: string }
        Returns: Json
      }
      get_auction_details_optimized: {
        Args: { p_auction_id: string }
        Returns: Json
      }
      get_auctions_paginated: {
        Args: {
          p_status?: string
          p_vehicle_type?: string
          p_limit?: number
          p_offset?: number
          p_user_role?: string
        }
        Returns: Json
      }
      get_notification_system_status: {
        Args: Record<PropertyKey, never>
        Returns: Json
      }
      get_user_auctions_optimized: {
        Args: { p_user_id: string; p_limit?: number; p_offset?: number }
        Returns: Json
      }
      log_auction_activity: {
        Args: {
          p_auction_id: string
          p_user_id: string
          p_action: string
          p_details?: Json
        }
        Returns: string
      }
      place_bid_fast: {
        Args: { p_auction_id: string; p_bid_amount: number }
        Returns: Json
      }
      run_auction_maintenance: {
        Args: Record<PropertyKey, never>
        Returns: Json
      }
      send_push_notification: {
        Args: {
          p_user_id: string
          p_title: string
          p_body: string
          p_data?: Json
        }
        Returns: boolean
      }
      test_user_notification: {
        Args: { p_user_id: string; p_test_message?: string }
        Returns: Json
      }
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

// Type helpers for better development experience
export type Tables<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Row']
export type TablesInsert<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Insert']
export type TablesUpdate<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Update']

// Specific table types
export type Profile = Tables<'profiles'>
export type Auction = Tables<'auctions'>
export type AuctionBid = Tables<'auction_bids'>
export type AuctionNotification = Tables<'auction_notifications'>
export type AuctionAuditLog = Tables<'auction_audit_logs'>

// View types
export type ActiveAuctionSummary = Database['public']['Views']['active_auctions_summary']['Row']
export type UserNotificationSummary = Database['public']['Views']['user_notifications_summary']['Row']

// Enum types
export type UserRole = 'consigner' | 'driver'
export type VehicleType = 'three_wheeler' | 'pickup_truck' | 'mini_truck' | 'medium_truck' | 'large_truck'
export type AuctionStatus = 'active' | 'completed' | 'cancelled'
export type NotificationType = 
  | 'auction_created' 
  | 'bid_placed' 
  | 'outbid' 
  | 'auction_won' 
  | 'auction_lost' 
  | 'auction_cancelled' 
  | 'bid_cancelled'



================================================
FILE: .github/dependabot.yml
================================================
version: 2
updates:
  # JS/TS dependencies
  - package-ecosystem: 'npm'
    directory: '/'
    schedule:
      interval: 'weekly'
    groups:
      expo-and-react:
        patterns:
          - 'expo*'
          - 'react*'
    open-pull-requests-limit: 5

  # GitHub Actions
  - package-ecosystem: 'github-actions'
    directory: '/'
    schedule:
      interval: 'weekly'



================================================
FILE: .github/PULL_REQUEST_TEMPLATE.md
================================================
## Pull-request checklist

- [ ] PR targets **`dev`**
- [ ] Title uses Conventional Commit prefix
- [ ] `npm test` & `npm lint` pass locally
- [ ] Screenshots / screen-casts attached (UI changes)
- [ ] Relevant issue linked (`Fixes #123`)

GitHub Actions will run the same tests; do not merge while checks are red.

## Running locally

```bash
corepack enable          # enables pnpm
npm install
npm start               # expo start
```



================================================
FILE: .github/ISSUE_TEMPLATE/bug_report.md
================================================
---
name: 🐞 Bug report
about: Create a report to help us squash it
title: '[Bug] '
labels: bug
assignees: ''
---

### 🔎 What happened?

A clear and concise description of the bug.

### 🪜 Steps to reproduce

1. Go to '...'
2. Tap on '....'
3. Observe error

### 📱 Device info

| Field       | Value                       |
| ----------- | --------------------------- |
| Platform    | Android / iOS               |
| OS version  |                             |
| App version | (found in Settings → About) |
| Expo SDK    |                             |

### 📄 Logs / screenshots

_Please attach the Expo CLI or device log output, plus any screenshots._



================================================
FILE: .github/workflows/ci.yml
================================================
name: CI

on:
  pull_request:
    branches: [dev, main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Node + npm cache
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - run: npm ci # fast, uses package-lock
      - run: npm run lint
      - run: npm test


